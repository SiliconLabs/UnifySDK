/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/
// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

#include "dotdot_mqtt_helpers.hpp"

#include <regex>
#include <functional>
#include <limits>

namespace unify
{
std::optional<std::string> unid_from_mqtt_topic(const std::string &topic)
{
  std::regex rgx_unid(R"(by-unid/([^/]*).*)");
  std::smatch match;
  if (std::regex_search(topic, match, rgx_unid)) {
    return match[1];
  }
  return std::nullopt;
}
}  // namespace unify

// Create a map of enums and their name label.
// Functions are declared in dotdot_mqtt.hpp

// Enum to string map for AoXLocatorAntennaMode
const std::map<uint32_t, std::string> aox_locator_antenna_mode_enum_id_to_string_map {
  { 0, "Array 4x4 URA" },
  { 1, "Array 3x3 URA" },
  { 2, "Array 1x4 ULA" },
  { 3, "Array 4x4 DP URA" },
  { 4, "Array COREHW_15x15 DP" },
  { 5, "Array COREHW 12x12 DP" },
};

// String to enum map for AoXLocatorAntennaMode
const std::map<std::string, uint32_t> aox_locator_antenna_mode_enum_string_to_id_map {
  { "Array 4x4 URA", 0 },
  { "Array 3x3 URA", 1 },
  { "Array 1x4 ULA", 2 },
  { "Array 4x4 DP URA", 3 },
  { "Array COREHW_15x15 DP", 4 },
  { "Array COREHW 12x12 DP", 5 },
};

std::string aox_locator_antenna_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = aox_locator_antenna_mode_enum_id_to_string_map.find(value);
  if (it != aox_locator_antenna_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t aox_locator_antenna_mode_get_enum_value_number(const std::string &str)
{
  auto it = aox_locator_antenna_mode_enum_string_to_id_map.find(str);
  if (it != aox_locator_antenna_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for AoXLocatorAoXMode
const std::map<uint32_t, std::string> aox_locator_aox_mode_enum_id_to_string_map {
  { 3, "One Shot Basic" },
  { 4, "One Shot Basic Lightweight" },
  { 5, "One Shot Fast Response" },
  { 6, "One Shot High Accuracy" },
  { 7, "One Shot Basic Azimuth Only" },
  { 8, "One Shot Fast Response Azimuth Only" },
  { 9, "One Shot High Accuracy Azimuth Only" },
  { 10, "Real Time Fast Response" },
  { 11, "Real Time Basic" },
  { 12, "Real Time High Accuracy" },
};

// String to enum map for AoXLocatorAoXMode
const std::map<std::string, uint32_t> aox_locator_aox_mode_enum_string_to_id_map {
  { "One Shot Basic", 3 },
  { "One Shot Basic Lightweight", 4 },
  { "One Shot Fast Response", 5 },
  { "One Shot High Accuracy", 6 },
  { "One Shot Basic Azimuth Only", 7 },
  { "One Shot Fast Response Azimuth Only", 8 },
  { "One Shot High Accuracy Azimuth Only", 9 },
  { "Real Time Fast Response", 10 },
  { "Real Time Basic", 11 },
  { "Real Time High Accuracy", 12 },
};

std::string aox_locator_aox_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = aox_locator_aox_mode_enum_id_to_string_map.find(value);
  if (it != aox_locator_aox_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t aox_locator_aox_mode_get_enum_value_number(const std::string &str)
{
  auto it = aox_locator_aox_mode_enum_string_to_id_map.find(str);
  if (it != aox_locator_aox_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for AoXLocatorCTEMode
const std::map<uint32_t, std::string> aox_locator_cte_mode_enum_id_to_string_map {
  { 0, "Silicon Labs" },
  { 1, "Connection" },
  { 2, "Connectionless" },
};

// String to enum map for AoXLocatorCTEMode
const std::map<std::string, uint32_t> aox_locator_cte_mode_enum_string_to_id_map {
  { "Silicon Labs", 0 },
  { "Connection", 1 },
  { "Connectionless", 2 },
};

std::string aox_locator_cte_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = aox_locator_cte_mode_enum_id_to_string_map.find(value);
  if (it != aox_locator_cte_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t aox_locator_cte_mode_get_enum_value_number(const std::string &str)
{
  auto it = aox_locator_cte_mode_enum_string_to_id_map.find(str);
  if (it != aox_locator_cte_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for AoXLocatorReportingMode
const std::map<uint32_t, std::string> aox_locator_reporting_mode_enum_id_to_string_map {
  { 0, "IQReport" },
  { 1, "AngleReport" },
};

// String to enum map for AoXLocatorReportingMode
const std::map<std::string, uint32_t> aox_locator_reporting_mode_enum_string_to_id_map {
  { "IQReport", 0 },
  { "AngleReport", 1 },
};

std::string aox_locator_reporting_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = aox_locator_reporting_mode_enum_id_to_string_map.find(value);
  if (it != aox_locator_reporting_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t aox_locator_reporting_mode_get_enum_value_number(const std::string &str)
{
  auto it = aox_locator_reporting_mode_enum_string_to_id_map.find(str);
  if (it != aox_locator_reporting_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ArmArmMode
const std::map<uint32_t, std::string> arm_arm_mode_enum_id_to_string_map {
  { 0, "Disarm" },
  { 1, "ArmDayHomeZonesOnly" },
  { 2, "ArmNightSleepZonesOnly" },
  { 3, "ArmAllZones" },
};

// String to enum map for ArmArmMode
const std::map<std::string, uint32_t> arm_arm_mode_enum_string_to_id_map {
  { "Disarm", 0 },
  { "ArmDayHomeZonesOnly", 1 },
  { "ArmNightSleepZonesOnly", 2 },
  { "ArmAllZones", 3 },
};

std::string arm_arm_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = arm_arm_mode_enum_id_to_string_map.find(value);
  if (it != arm_arm_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t arm_arm_mode_get_enum_value_number(const std::string &str)
{
  auto it = arm_arm_mode_enum_string_to_id_map.find(str);
  if (it != arm_arm_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ArmResponseArmNotification
const std::map<uint32_t, std::string> arm_response_arm_notification_enum_id_to_string_map {
  { 0, "AllZonesDisarmed" },
  { 1, "OnlyDayHomeZonesArmed" },
  { 2, "OnlyNightSleepZonesArmed" },
  { 3, "AllZonesArmed" },
  { 4, "InvalidArmDisarmCode" },
  { 5, "NotReadyToArm" },
  { 6, "AlreadyDisarmed" },
};

// String to enum map for ArmResponseArmNotification
const std::map<std::string, uint32_t> arm_response_arm_notification_enum_string_to_id_map {
  { "AllZonesDisarmed", 0 },
  { "OnlyDayHomeZonesArmed", 1 },
  { "OnlyNightSleepZonesArmed", 2 },
  { "AllZonesArmed", 3 },
  { "InvalidArmDisarmCode", 4 },
  { "NotReadyToArm", 5 },
  { "AlreadyDisarmed", 6 },
};

std::string arm_response_arm_notification_get_enum_value_name(
  uint32_t value)
{
  auto it = arm_response_arm_notification_enum_id_to_string_map.find(value);
  if (it != arm_response_arm_notification_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t arm_response_arm_notification_get_enum_value_number(const std::string &str)
{
  auto it = arm_response_arm_notification_enum_string_to_id_map.find(str);
  if (it != arm_response_arm_notification_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for BarrierControlMovingState
const std::map<uint32_t, std::string> barrier_control_moving_state_enum_id_to_string_map {
  { 0, "Stopped" },
  { 1, "Closing" },
  { 2, "Opening" },
};

// String to enum map for BarrierControlMovingState
const std::map<std::string, uint32_t> barrier_control_moving_state_enum_string_to_id_map {
  { "Stopped", 0 },
  { "Closing", 1 },
  { "Opening", 2 },
};

std::string barrier_control_moving_state_get_enum_value_name(
  uint32_t value)
{
  auto it = barrier_control_moving_state_enum_id_to_string_map.find(value);
  if (it != barrier_control_moving_state_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t barrier_control_moving_state_get_enum_value_number(const std::string &str)
{
  auto it = barrier_control_moving_state_enum_string_to_id_map.find(str);
  if (it != barrier_control_moving_state_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for BasicGenericDevice-Class
const std::map<uint32_t, std::string> basic_generic_device_class_enum_id_to_string_map {
  { 0, "Lighting" },
};

// String to enum map for BasicGenericDevice-Class
const std::map<std::string, uint32_t> basic_generic_device_class_enum_string_to_id_map {
  { "Lighting", 0 },
};

std::string basic_generic_device_class_get_enum_value_name(
  uint32_t value)
{
  auto it = basic_generic_device_class_enum_id_to_string_map.find(value);
  if (it != basic_generic_device_class_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t basic_generic_device_class_get_enum_value_number(const std::string &str)
{
  auto it = basic_generic_device_class_enum_string_to_id_map.find(str);
  if (it != basic_generic_device_class_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for BasicGenericDevice-Type
const std::map<uint32_t, std::string> basic_generic_device_type_enum_id_to_string_map {
  { 0, "Incandescent" },
  { 1, "SpotlightHalogen" },
  { 2, "HalogenBulb" },
  { 3, "CFL" },
  { 4, "LinearFluorescent" },
  { 5, "LEDBulb" },
  { 6, "SpotlightLED" },
  { 7, "LEDStrip" },
  { 8, "LEDTube" },
  { 9, "GenericIndoorLuminaireOrLightFixture" },
  { 10, "GenericOutdoorLuminaireOrLightFixture" },
  { 11, "PendantLuminaireOrLightFixture" },
  { 12, "FloorStandingLuminaireOrLightFixture" },
  { 224, "GenericController" },
  { 225, "WallSwitch" },
  { 226, "PortableRemoteController" },
  { 227, "MotionSensorOrLightSensor" },
  { 240, "GenericActuator" },
  { 241, "WallSocket" },
  { 242, "GatewayOrBridge" },
  { 243, "PlugInUnit" },
  { 244, "RetrofitActuator" },
  { 255, "Unspecified" },
};

// String to enum map for BasicGenericDevice-Type
const std::map<std::string, uint32_t> basic_generic_device_type_enum_string_to_id_map {
  { "Incandescent", 0 },
  { "SpotlightHalogen", 1 },
  { "HalogenBulb", 2 },
  { "CFL", 3 },
  { "LinearFluorescent", 4 },
  { "LEDBulb", 5 },
  { "SpotlightLED", 6 },
  { "LEDStrip", 7 },
  { "LEDTube", 8 },
  { "GenericIndoorLuminaireOrLightFixture", 9 },
  { "GenericOutdoorLuminaireOrLightFixture", 10 },
  { "PendantLuminaireOrLightFixture", 11 },
  { "FloorStandingLuminaireOrLightFixture", 12 },
  { "GenericController", 224 },
  { "WallSwitch", 225 },
  { "PortableRemoteController", 226 },
  { "MotionSensorOrLightSensor", 227 },
  { "GenericActuator", 240 },
  { "WallSocket", 241 },
  { "GatewayOrBridge", 242 },
  { "PlugInUnit", 243 },
  { "RetrofitActuator", 244 },
  { "Unspecified", 255 },
};

std::string basic_generic_device_type_get_enum_value_name(
  uint32_t value)
{
  auto it = basic_generic_device_type_enum_id_to_string_map.find(value);
  if (it != basic_generic_device_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t basic_generic_device_type_get_enum_value_number(const std::string &str)
{
  auto it = basic_generic_device_type_enum_string_to_id_map.find(str);
  if (it != basic_generic_device_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for BasicPhysicalEnvironment
const std::map<uint32_t, std::string> basic_physical_environment_enum_id_to_string_map {
  { 0, "UnspecifiedEnvironment" },
  { 1, "Deprecated" },
  { 2, "Bar" },
  { 3, "Courtyard" },
  { 4, "Bathroom" },
  { 5, "Bedroom" },
  { 6, "BilliardRoom" },
  { 7, "UtilityRoom" },
  { 8, "Cellar" },
  { 9, "StorageCloset" },
  { 10, "Theater" },
  { 11, "Office" },
  { 12, "Deck" },
  { 13, "Den" },
  { 14, "DiningRoom" },
  { 15, "ElectricalRoom" },
  { 16, "Elevator" },
  { 17, "Entry" },
  { 18, "FamilyRoom" },
  { 19, "MainFloor" },
  { 20, "Upstairs" },
  { 21, "Downstairs" },
  { 22, "Basement/LowerLevel" },
  { 23, "Gallery" },
  { 24, "GameRoom" },
  { 25, "Garage" },
  { 26, "Gym" },
  { 27, "Hallway" },
  { 28, "House" },
  { 29, "Kitchen" },
  { 30, "LaundryRoom" },
  { 31, "Library" },
  { 32, "MasterBedroom" },
  { 33, "MudRoom" },
  { 34, "Nursery" },
  { 35, "Pantry" },
  { 36, "SecondaryOffice" },
  { 37, "Outside" },
  { 38, "Pool" },
  { 39, "Porch" },
  { 40, "SewingRoom" },
  { 41, "SittingRoom" },
  { 42, "Stairway" },
  { 43, "Yard" },
  { 44, "Attic" },
  { 45, "HotTub" },
  { 46, "LivingRoom" },
  { 47, "Sauna" },
  { 48, "ShopOrWorkshop" },
  { 49, "GuestBedroom" },
  { 50, "GuestBath" },
  { 51, "PowderRoom" },
  { 52, "BackYard" },
  { 53, "FrontYard" },
  { 54, "Patio" },
  { 55, "Driveway" },
  { 56, "SunRoom" },
  { 57, "SecondaryLivingRoom" },
  { 58, "Spa" },
  { 59, "Whirlpool" },
  { 60, "Shed" },
  { 61, "EquipmentStorage" },
  { 62, "HobbyOrCraftRoom" },
  { 63, "Fountain" },
  { 64, "Pond" },
  { 65, "ReceptionRoom" },
  { 66, "BreakfastRoom" },
  { 67, "Nook" },
  { 68, "Garden" },
  { 69, "Balcony" },
  { 70, "PanicRoom" },
  { 71, "Terrace" },
  { 72, "Roof" },
  { 73, "Toilet" },
  { 74, "ToiletMain" },
  { 75, "OutsideToilet" },
  { 76, "ShowerRoom" },
  { 77, "Study" },
  { 78, "FrontGarden" },
  { 79, "BackGarden" },
  { 80, "Kettle" },
  { 81, "Television" },
  { 82, "Stove" },
  { 83, "Microwave" },
  { 84, "Toaster" },
  { 85, "Vacuum" },
  { 86, "Appliance" },
  { 87, "FrontDoor" },
  { 88, "BackDoor" },
  { 89, "FridgeDoor" },
  { 96, "MedicationCabinetDoor" },
  { 97, "WardrobeDoor" },
  { 98, "FrontCupboardDoor" },
  { 99, "OtherDoor" },
  { 100, "WaitingRoom" },
  { 101, "TriageRoom" },
  { 102, "DoctorsOffice" },
  { 103, "PatientsPrivateRoom" },
  { 104, "ConsultationRoom" },
  { 105, "NurseStation" },
  { 106, "Ward" },
  { 107, "Corridor" },
  { 108, "OperatingTheatre" },
  { 109, "DentalSurgeryRoom" },
  { 110, "MedicalImagingRoom" },
  { 111, "DecontaminationRoom" },
  { 112, "Atrium" },
  { 113, "Mirror" },
  { 255, "UnknownEnvironment" },
};

// String to enum map for BasicPhysicalEnvironment
const std::map<std::string, uint32_t> basic_physical_environment_enum_string_to_id_map {
  { "UnspecifiedEnvironment", 0 },
  { "Deprecated", 1 },
  { "Bar", 2 },
  { "Courtyard", 3 },
  { "Bathroom", 4 },
  { "Bedroom", 5 },
  { "BilliardRoom", 6 },
  { "UtilityRoom", 7 },
  { "Cellar", 8 },
  { "StorageCloset", 9 },
  { "Theater", 10 },
  { "Office", 11 },
  { "Deck", 12 },
  { "Den", 13 },
  { "DiningRoom", 14 },
  { "ElectricalRoom", 15 },
  { "Elevator", 16 },
  { "Entry", 17 },
  { "FamilyRoom", 18 },
  { "MainFloor", 19 },
  { "Upstairs", 20 },
  { "Downstairs", 21 },
  { "Basement/LowerLevel", 22 },
  { "Gallery", 23 },
  { "GameRoom", 24 },
  { "Garage", 25 },
  { "Gym", 26 },
  { "Hallway", 27 },
  { "House", 28 },
  { "Kitchen", 29 },
  { "LaundryRoom", 30 },
  { "Library", 31 },
  { "MasterBedroom", 32 },
  { "MudRoom", 33 },
  { "Nursery", 34 },
  { "Pantry", 35 },
  { "SecondaryOffice", 36 },
  { "Outside", 37 },
  { "Pool", 38 },
  { "Porch", 39 },
  { "SewingRoom", 40 },
  { "SittingRoom", 41 },
  { "Stairway", 42 },
  { "Yard", 43 },
  { "Attic", 44 },
  { "HotTub", 45 },
  { "LivingRoom", 46 },
  { "Sauna", 47 },
  { "ShopOrWorkshop", 48 },
  { "GuestBedroom", 49 },
  { "GuestBath", 50 },
  { "PowderRoom", 51 },
  { "BackYard", 52 },
  { "FrontYard", 53 },
  { "Patio", 54 },
  { "Driveway", 55 },
  { "SunRoom", 56 },
  { "SecondaryLivingRoom", 57 },
  { "Spa", 58 },
  { "Whirlpool", 59 },
  { "Shed", 60 },
  { "EquipmentStorage", 61 },
  { "HobbyOrCraftRoom", 62 },
  { "Fountain", 63 },
  { "Pond", 64 },
  { "ReceptionRoom", 65 },
  { "BreakfastRoom", 66 },
  { "Nook", 67 },
  { "Garden", 68 },
  { "Balcony", 69 },
  { "PanicRoom", 70 },
  { "Terrace", 71 },
  { "Roof", 72 },
  { "Toilet", 73 },
  { "ToiletMain", 74 },
  { "OutsideToilet", 75 },
  { "ShowerRoom", 76 },
  { "Study", 77 },
  { "FrontGarden", 78 },
  { "BackGarden", 79 },
  { "Kettle", 80 },
  { "Television", 81 },
  { "Stove", 82 },
  { "Microwave", 83 },
  { "Toaster", 84 },
  { "Vacuum", 85 },
  { "Appliance", 86 },
  { "FrontDoor", 87 },
  { "BackDoor", 88 },
  { "FridgeDoor", 89 },
  { "MedicationCabinetDoor", 96 },
  { "WardrobeDoor", 97 },
  { "FrontCupboardDoor", 98 },
  { "OtherDoor", 99 },
  { "WaitingRoom", 100 },
  { "TriageRoom", 101 },
  { "DoctorsOffice", 102 },
  { "PatientsPrivateRoom", 103 },
  { "ConsultationRoom", 104 },
  { "NurseStation", 105 },
  { "Ward", 106 },
  { "Corridor", 107 },
  { "OperatingTheatre", 108 },
  { "DentalSurgeryRoom", 109 },
  { "MedicalImagingRoom", 110 },
  { "DecontaminationRoom", 111 },
  { "Atrium", 112 },
  { "Mirror", 113 },
  { "UnknownEnvironment", 255 },
};

std::string basic_physical_environment_get_enum_value_name(
  uint32_t value)
{
  auto it = basic_physical_environment_enum_id_to_string_map.find(value);
  if (it != basic_physical_environment_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t basic_physical_environment_get_enum_value_number(const std::string &str)
{
  auto it = basic_physical_environment_enum_string_to_id_map.find(str);
  if (it != basic_physical_environment_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for BasicPowerSource
const std::map<uint32_t, std::string> basic_power_source_enum_id_to_string_map {
  { 0, "Unknown" },
  { 1, "SinglePhaseMains" },
  { 2, "ThreePhaseMains" },
  { 3, "Battery" },
  { 4, "DCSource" },
  { 5, "EmergencyMainsConstantlyPowered" },
  { 6, "EmergencyMainsAndTransferSwitch" },
  { 128, "UnknownWithBatteryBackup" },
  { 129, "SinglePhaseMainsWithBatteryBackup" },
  { 130, "ThreePhaseMainsWithBatteryBackup" },
  { 131, "BatteryWithBatteryBackup" },
  { 132, "DCSourceWithBatteryBackup" },
  { 133, "EmergencyMainsConstantlyPoweredWithBatteryBackup" },
  { 134, "EmergencyMainsAndTransferSwitchWithBatteryBackup" },
};

// String to enum map for BasicPowerSource
const std::map<std::string, uint32_t> basic_power_source_enum_string_to_id_map {
  { "Unknown", 0 },
  { "SinglePhaseMains", 1 },
  { "ThreePhaseMains", 2 },
  { "Battery", 3 },
  { "DCSource", 4 },
  { "EmergencyMainsConstantlyPowered", 5 },
  { "EmergencyMainsAndTransferSwitch", 6 },
  { "UnknownWithBatteryBackup", 128 },
  { "SinglePhaseMainsWithBatteryBackup", 129 },
  { "ThreePhaseMainsWithBatteryBackup", 130 },
  { "BatteryWithBatteryBackup", 131 },
  { "DCSourceWithBatteryBackup", 132 },
  { "EmergencyMainsConstantlyPoweredWithBatteryBackup", 133 },
  { "EmergencyMainsAndTransferSwitchWithBatteryBackup", 134 },
};

std::string basic_power_source_get_enum_value_name(
  uint32_t value)
{
  auto it = basic_power_source_enum_id_to_string_map.find(value);
  if (it != basic_power_source_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t basic_power_source_get_enum_value_number(const std::string &str)
{
  auto it = basic_power_source_enum_string_to_id_map.find(str);
  if (it != basic_power_source_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for BatterySize
const std::map<uint32_t, std::string> battery_size_enum_id_to_string_map {
  { 0, "NoBattery" },
  { 1, "BuiltIn" },
  { 2, "Other" },
  { 3, "AA" },
  { 4, "AAA" },
  { 5, "C" },
  { 6, "D" },
  { 7, "CR2" },
  { 8, "CR123A" },
  { 255, "Unknown" },
};

// String to enum map for BatterySize
const std::map<std::string, uint32_t> battery_size_enum_string_to_id_map {
  { "NoBattery", 0 },
  { "BuiltIn", 1 },
  { "Other", 2 },
  { "AA", 3 },
  { "AAA", 4 },
  { "C", 5 },
  { "D", 6 },
  { "CR2", 7 },
  { "CR123A", 8 },
  { "Unknown", 255 },
};

std::string battery_size_get_enum_value_name(
  uint32_t value)
{
  auto it = battery_size_enum_id_to_string_map.find(value);
  if (it != battery_size_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t battery_size_get_enum_value_number(const std::string &str)
{
  auto it = battery_size_enum_string_to_id_map.find(str);
  if (it != battery_size_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for BypassResponseZoneIDBypassResult
const std::map<uint32_t, std::string> bypass_response_zone_id_bypass_result_enum_id_to_string_map {
  { 0, "ZoneBypassed" },
  { 1, "ZoneNotBypassed" },
  { 2, "NotAllowed" },
  { 3, "InvalidZoneID" },
  { 4, "UnknownZoneID" },
  { 5, "InvalidArmDisarmCode" },
};

// String to enum map for BypassResponseZoneIDBypassResult
const std::map<std::string, uint32_t> bypass_response_zone_id_bypass_result_enum_string_to_id_map {
  { "ZoneBypassed", 0 },
  { "ZoneNotBypassed", 1 },
  { "NotAllowed", 2 },
  { "InvalidZoneID", 3 },
  { "UnknownZoneID", 4 },
  { "InvalidArmDisarmCode", 5 },
};

std::string bypass_response_zone_id_bypass_result_get_enum_value_name(
  uint32_t value)
{
  auto it = bypass_response_zone_id_bypass_result_enum_id_to_string_map.find(value);
  if (it != bypass_response_zone_id_bypass_result_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t bypass_response_zone_id_bypass_result_get_enum_value_number(const std::string &str)
{
  auto it = bypass_response_zone_id_bypass_result_enum_string_to_id_map.find(str);
  if (it != bypass_response_zone_id_bypass_result_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CCColorLoopDirection
const std::map<uint32_t, std::string> cc_color_loop_direction_enum_id_to_string_map {
  { 0, "ColorLoopHueDecrement" },
  { 1, "ColorLoopHueIncrement" },
};

// String to enum map for CCColorLoopDirection
const std::map<std::string, uint32_t> cc_color_loop_direction_enum_string_to_id_map {
  { "ColorLoopHueDecrement", 0 },
  { "ColorLoopHueIncrement", 1 },
};

std::string cc_color_loop_direction_get_enum_value_name(
  uint32_t value)
{
  auto it = cc_color_loop_direction_enum_id_to_string_map.find(value);
  if (it != cc_color_loop_direction_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t cc_color_loop_direction_get_enum_value_number(const std::string &str)
{
  auto it = cc_color_loop_direction_enum_string_to_id_map.find(str);
  if (it != cc_color_loop_direction_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CCDirection
const std::map<uint32_t, std::string> cc_direction_enum_id_to_string_map {
  { 0, "ShortestDistance" },
  { 1, "LongestDistance" },
  { 2, "Up" },
  { 3, "Down" },
};

// String to enum map for CCDirection
const std::map<std::string, uint32_t> cc_direction_enum_string_to_id_map {
  { "ShortestDistance", 0 },
  { "LongestDistance", 1 },
  { "Up", 2 },
  { "Down", 3 },
};

std::string cc_direction_get_enum_value_name(
  uint32_t value)
{
  auto it = cc_direction_enum_id_to_string_map.find(value);
  if (it != cc_direction_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t cc_direction_get_enum_value_number(const std::string &str)
{
  auto it = cc_direction_enum_string_to_id_map.find(str);
  if (it != cc_direction_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CCMoveMode
const std::map<uint32_t, std::string> cc_move_mode_enum_id_to_string_map {
  { 0, "Stop" },
  { 1, "Up" },
  { 3, "Down" },
};

// String to enum map for CCMoveMode
const std::map<std::string, uint32_t> cc_move_mode_enum_string_to_id_map {
  { "Stop", 0 },
  { "Up", 1 },
  { "Down", 3 },
};

std::string cc_move_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = cc_move_mode_enum_id_to_string_map.find(value);
  if (it != cc_move_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t cc_move_mode_get_enum_value_number(const std::string &str)
{
  auto it = cc_move_mode_enum_string_to_id_map.find(str);
  if (it != cc_move_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CCStepMode
const std::map<uint32_t, std::string> cc_step_mode_enum_id_to_string_map {
  { 1, "Up" },
  { 3, "Down" },
};

// String to enum map for CCStepMode
const std::map<std::string, uint32_t> cc_step_mode_enum_string_to_id_map {
  { "Up", 1 },
  { "Down", 3 },
};

std::string cc_step_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = cc_step_mode_enum_id_to_string_map.find(value);
  if (it != cc_step_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t cc_step_mode_get_enum_value_number(const std::string &str)
{
  auto it = cc_step_mode_enum_string_to_id_map.find(str);
  if (it != cc_step_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ColorControlColorLoopActive
const std::map<uint32_t, std::string> color_control_color_loop_active_enum_id_to_string_map {
  { 0, "ColorLoopInactive" },
  { 1, "ColorLoopActive" },
};

// String to enum map for ColorControlColorLoopActive
const std::map<std::string, uint32_t> color_control_color_loop_active_enum_string_to_id_map {
  { "ColorLoopInactive", 0 },
  { "ColorLoopActive", 1 },
};

std::string color_control_color_loop_active_get_enum_value_name(
  uint32_t value)
{
  auto it = color_control_color_loop_active_enum_id_to_string_map.find(value);
  if (it != color_control_color_loop_active_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t color_control_color_loop_active_get_enum_value_number(const std::string &str)
{
  auto it = color_control_color_loop_active_enum_string_to_id_map.find(str);
  if (it != color_control_color_loop_active_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ColorControlColorLoopDirection
const std::map<uint32_t, std::string> color_control_color_loop_direction_enum_id_to_string_map {
  { 0, "DecrementEnhancedCurrentHue" },
  { 1, "IncrementEnhancedCurrentHue" },
};

// String to enum map for ColorControlColorLoopDirection
const std::map<std::string, uint32_t> color_control_color_loop_direction_enum_string_to_id_map {
  { "DecrementEnhancedCurrentHue", 0 },
  { "IncrementEnhancedCurrentHue", 1 },
};

std::string color_control_color_loop_direction_get_enum_value_name(
  uint32_t value)
{
  auto it = color_control_color_loop_direction_enum_id_to_string_map.find(value);
  if (it != color_control_color_loop_direction_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t color_control_color_loop_direction_get_enum_value_number(const std::string &str)
{
  auto it = color_control_color_loop_direction_enum_string_to_id_map.find(str);
  if (it != color_control_color_loop_direction_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ColorControlColorMode
const std::map<uint32_t, std::string> color_control_color_mode_enum_id_to_string_map {
  { 0, "CurrentHueAndCurrentSaturation" },
  { 1, "CurrentXAndCurrentY" },
  { 2, "ColorTemperatureMireds" },
};

// String to enum map for ColorControlColorMode
const std::map<std::string, uint32_t> color_control_color_mode_enum_string_to_id_map {
  { "CurrentHueAndCurrentSaturation", 0 },
  { "CurrentXAndCurrentY", 1 },
  { "ColorTemperatureMireds", 2 },
};

std::string color_control_color_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = color_control_color_mode_enum_id_to_string_map.find(value);
  if (it != color_control_color_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t color_control_color_mode_get_enum_value_number(const std::string &str)
{
  auto it = color_control_color_mode_enum_string_to_id_map.find(str);
  if (it != color_control_color_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ColorControlDriftCompensation
const std::map<uint32_t, std::string> color_control_drift_compensation_enum_id_to_string_map {
  { 0, "None" },
  { 1, "OtherOrUnknown" },
  { 2, "TemperatureMonitoring" },
  { 3, "OpticalLuminanceMonitoringAndFeedback" },
  { 4, "OpticalColorMonitoringAndFeedback" },
};

// String to enum map for ColorControlDriftCompensation
const std::map<std::string, uint32_t> color_control_drift_compensation_enum_string_to_id_map {
  { "None", 0 },
  { "OtherOrUnknown", 1 },
  { "TemperatureMonitoring", 2 },
  { "OpticalLuminanceMonitoringAndFeedback", 3 },
  { "OpticalColorMonitoringAndFeedback", 4 },
};

std::string color_control_drift_compensation_get_enum_value_name(
  uint32_t value)
{
  auto it = color_control_drift_compensation_enum_id_to_string_map.find(value);
  if (it != color_control_drift_compensation_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t color_control_drift_compensation_get_enum_value_number(const std::string &str)
{
  auto it = color_control_drift_compensation_enum_string_to_id_map.find(str);
  if (it != color_control_drift_compensation_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ColorControlEnhancedColorMode
const std::map<uint32_t, std::string> color_control_enhanced_color_mode_enum_id_to_string_map {
  { 0, "CurrentHueAndCurrentSaturation" },
  { 1, "CurrentXAndCurrentY" },
  { 2, "ColorTemperatureMireds" },
  { 3, "EnhancedCurrentHueAndCurrentSaturation" },
};

// String to enum map for ColorControlEnhancedColorMode
const std::map<std::string, uint32_t> color_control_enhanced_color_mode_enum_string_to_id_map {
  { "CurrentHueAndCurrentSaturation", 0 },
  { "CurrentXAndCurrentY", 1 },
  { "ColorTemperatureMireds", 2 },
  { "EnhancedCurrentHueAndCurrentSaturation", 3 },
};

std::string color_control_enhanced_color_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = color_control_enhanced_color_mode_enum_id_to_string_map.find(value);
  if (it != color_control_enhanced_color_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t color_control_enhanced_color_mode_get_enum_value_number(const std::string &str)
{
  auto it = color_control_enhanced_color_mode_enum_string_to_id_map.find(str);
  if (it != color_control_enhanced_color_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ColorLoopSetAction
const std::map<uint32_t, std::string> color_loop_set_action_enum_id_to_string_map {
  { 0, "DeactivateColorLoop" },
  { 1, "ActivateColorLoopFromColorLoopStartEnhancedHue" },
  { 2, "ActivateColorLoopFromEnhancedCurrentHue" },
};

// String to enum map for ColorLoopSetAction
const std::map<std::string, uint32_t> color_loop_set_action_enum_string_to_id_map {
  { "DeactivateColorLoop", 0 },
  { "ActivateColorLoopFromColorLoopStartEnhancedHue", 1 },
  { "ActivateColorLoopFromEnhancedCurrentHue", 2 },
};

std::string color_loop_set_action_get_enum_value_name(
  uint32_t value)
{
  auto it = color_loop_set_action_enum_id_to_string_map.find(value);
  if (it != color_loop_set_action_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t color_loop_set_action_get_enum_value_number(const std::string &str)
{
  auto it = color_loop_set_action_enum_string_to_id_map.find(str);
  if (it != color_loop_set_action_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CommissioningNetworkKeyType
const std::map<uint32_t, std::string> commissioning_network_key_type_enum_id_to_string_map {
  { 1, "StandardKey" },
};

// String to enum map for CommissioningNetworkKeyType
const std::map<std::string, uint32_t> commissioning_network_key_type_enum_string_to_id_map {
  { "StandardKey", 1 },
};

std::string commissioning_network_key_type_get_enum_value_name(
  uint32_t value)
{
  auto it = commissioning_network_key_type_enum_id_to_string_map.find(value);
  if (it != commissioning_network_key_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t commissioning_network_key_type_get_enum_value_number(const std::string &str)
{
  auto it = commissioning_network_key_type_enum_string_to_id_map.find(str);
  if (it != commissioning_network_key_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CommissioningProtocolVersion
const std::map<uint32_t, std::string> commissioning_protocol_version_enum_id_to_string_map {
  { 2, "Zigbee2006OrLater" },
};

// String to enum map for CommissioningProtocolVersion
const std::map<std::string, uint32_t> commissioning_protocol_version_enum_string_to_id_map {
  { "Zigbee2006OrLater", 2 },
};

std::string commissioning_protocol_version_get_enum_value_name(
  uint32_t value)
{
  auto it = commissioning_protocol_version_enum_id_to_string_map.find(value);
  if (it != commissioning_protocol_version_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t commissioning_protocol_version_get_enum_value_number(const std::string &str)
{
  auto it = commissioning_protocol_version_enum_string_to_id_map.find(str);
  if (it != commissioning_protocol_version_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CommissioningStackProfile
const std::map<uint32_t, std::string> commissioning_stack_profile_enum_id_to_string_map {
  { 1, "ZigbeeStackProfile" },
  { 2, "ZigbeeProStackProfile" },
};

// String to enum map for CommissioningStackProfile
const std::map<std::string, uint32_t> commissioning_stack_profile_enum_string_to_id_map {
  { "ZigbeeStackProfile", 1 },
  { "ZigbeeProStackProfile", 2 },
};

std::string commissioning_stack_profile_get_enum_value_name(
  uint32_t value)
{
  auto it = commissioning_stack_profile_enum_id_to_string_map.find(value);
  if (it != commissioning_stack_profile_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t commissioning_stack_profile_get_enum_value_number(const std::string &str)
{
  auto it = commissioning_stack_profile_enum_string_to_id_map.find(str);
  if (it != commissioning_stack_profile_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CommissioningStartupControl
const std::map<uint32_t, std::string> commissioning_startup_control_enum_id_to_string_map {
  { 0, "OnANetwork" },
  { 1, "FormNetwork" },
  { 2, "RejoinNetwork" },
  { 3, "JoinUsingMACAssociation" },
};

// String to enum map for CommissioningStartupControl
const std::map<std::string, uint32_t> commissioning_startup_control_enum_string_to_id_map {
  { "OnANetwork", 0 },
  { "FormNetwork", 1 },
  { "RejoinNetwork", 2 },
  { "JoinUsingMACAssociation", 3 },
};

std::string commissioning_startup_control_get_enum_value_name(
  uint32_t value)
{
  auto it = commissioning_startup_control_enum_id_to_string_map.find(value);
  if (it != commissioning_startup_control_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t commissioning_startup_control_get_enum_value_number(const std::string &str)
{
  auto it = commissioning_startup_control_enum_string_to_id_map.find(str);
  if (it != commissioning_startup_control_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CredRule
const std::map<uint32_t, std::string> cred_rule_enum_id_to_string_map {
  { 1, "Single" },
  { 2, "Dual" },
  { 3, "Triple" },
};

// String to enum map for CredRule
const std::map<std::string, uint32_t> cred_rule_enum_string_to_id_map {
  { "Single", 1 },
  { "Dual", 2 },
  { "Triple", 3 },
};

std::string cred_rule_get_enum_value_name(
  uint32_t value)
{
  auto it = cred_rule_enum_id_to_string_map.find(value);
  if (it != cred_rule_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t cred_rule_get_enum_value_number(const std::string &str)
{
  auto it = cred_rule_enum_string_to_id_map.find(str);
  if (it != cred_rule_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CredType
const std::map<uint32_t, std::string> cred_type_enum_id_to_string_map {
  { 1, "PINCode" },
  { 2, "Password" },
  { 3, "RFIDCode" },
  { 4, "BLE" },
  { 5, "NFC" },
  { 6, "UWB" },
  { 7, "EyeBiometric" },
  { 8, "FaceBiometric" },
  { 9, "FingerBiometric" },
  { 10, "HandBiometric" },
  { 11, "UnspecifiedBiometric" },
};

// String to enum map for CredType
const std::map<std::string, uint32_t> cred_type_enum_string_to_id_map {
  { "PINCode", 1 },
  { "Password", 2 },
  { "RFIDCode", 3 },
  { "BLE", 4 },
  { "NFC", 5 },
  { "UWB", 6 },
  { "EyeBiometric", 7 },
  { "FaceBiometric", 8 },
  { "FingerBiometric", 9 },
  { "HandBiometric", 10 },
  { "UnspecifiedBiometric", 11 },
};

std::string cred_type_get_enum_value_name(
  uint32_t value)
{
  auto it = cred_type_enum_id_to_string_map.find(value);
  if (it != cred_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t cred_type_get_enum_value_number(const std::string &str)
{
  auto it = cred_type_enum_string_to_id_map.find(str);
  if (it != cred_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CredentialRuleEnum
const std::map<uint32_t, std::string> credential_rule_enum_enum_id_to_string_map {
  { 0, "Single" },
  { 1, "Dual" },
  { 2, "Tri" },
};

// String to enum map for CredentialRuleEnum
const std::map<std::string, uint32_t> credential_rule_enum_enum_string_to_id_map {
  { "Single", 0 },
  { "Dual", 1 },
  { "Tri", 2 },
};

std::string credential_rule_enum_get_enum_value_name(
  uint32_t value)
{
  auto it = credential_rule_enum_enum_id_to_string_map.find(value);
  if (it != credential_rule_enum_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t credential_rule_enum_get_enum_value_number(const std::string &str)
{
  auto it = credential_rule_enum_enum_string_to_id_map.find(str);
  if (it != credential_rule_enum_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for CredentialTypeEnum
const std::map<uint32_t, std::string> credential_type_enum_enum_id_to_string_map {
  { 0, "ProgrammingPIN" },
  { 1, "PIN" },
  { 2, "RFID" },
  { 3, "Fingerprint" },
  { 4, "FingerVein" },
  { 5, "Face" },
};

// String to enum map for CredentialTypeEnum
const std::map<std::string, uint32_t> credential_type_enum_enum_string_to_id_map {
  { "ProgrammingPIN", 0 },
  { "PIN", 1 },
  { "RFID", 2 },
  { "Fingerprint", 3 },
  { "FingerVein", 4 },
  { "Face", 5 },
};

std::string credential_type_enum_get_enum_value_name(
  uint32_t value)
{
  auto it = credential_type_enum_enum_id_to_string_map.find(value);
  if (it != credential_type_enum_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t credential_type_enum_get_enum_value_number(const std::string &str)
{
  auto it = credential_type_enum_enum_string_to_id_map.find(str);
  if (it != credential_type_enum_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DataOperationTypeEnum
const std::map<uint32_t, std::string> data_operation_type_enum_enum_id_to_string_map {
  { 0, "Add" },
  { 1, "Clear" },
  { 2, "Modify" },
};

// String to enum map for DataOperationTypeEnum
const std::map<std::string, uint32_t> data_operation_type_enum_enum_string_to_id_map {
  { "Add", 0 },
  { "Clear", 1 },
  { "Modify", 2 },
};

std::string data_operation_type_enum_get_enum_value_name(
  uint32_t value)
{
  auto it = data_operation_type_enum_enum_id_to_string_map.find(value);
  if (it != data_operation_type_enum_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t data_operation_type_enum_get_enum_value_number(const std::string &str)
{
  auto it = data_operation_type_enum_enum_string_to_id_map.find(str);
  if (it != data_operation_type_enum_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DehumidificationControlDehumidificationLockout
const std::map<uint32_t, std::string> dehumidification_control_dehumidification_lockout_enum_id_to_string_map {
  { 0, "DehumidificationNotAllowed." },
  { 1, "DehumidificationAllowed." },
};

// String to enum map for DehumidificationControlDehumidificationLockout
const std::map<std::string, uint32_t> dehumidification_control_dehumidification_lockout_enum_string_to_id_map {
  { "DehumidificationNotAllowed.", 0 },
  { "DehumidificationAllowed.", 1 },
};

std::string dehumidification_control_dehumidification_lockout_get_enum_value_name(
  uint32_t value)
{
  auto it = dehumidification_control_dehumidification_lockout_enum_id_to_string_map.find(value);
  if (it != dehumidification_control_dehumidification_lockout_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t dehumidification_control_dehumidification_lockout_get_enum_value_number(const std::string &str)
{
  auto it = dehumidification_control_dehumidification_lockout_enum_string_to_id_map.find(str);
  if (it != dehumidification_control_dehumidification_lockout_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DehumidificationControlRelativeHumidityDisplay
const std::map<uint32_t, std::string> dehumidification_control_relative_humidity_display_enum_id_to_string_map {
  { 0, "NotDisplayed" },
  { 1, "Displayed" },
};

// String to enum map for DehumidificationControlRelativeHumidityDisplay
const std::map<std::string, uint32_t> dehumidification_control_relative_humidity_display_enum_string_to_id_map {
  { "NotDisplayed", 0 },
  { "Displayed", 1 },
};

std::string dehumidification_control_relative_humidity_display_get_enum_value_name(
  uint32_t value)
{
  auto it = dehumidification_control_relative_humidity_display_enum_id_to_string_map.find(value);
  if (it != dehumidification_control_relative_humidity_display_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t dehumidification_control_relative_humidity_display_get_enum_value_number(const std::string &str)
{
  auto it = dehumidification_control_relative_humidity_display_enum_string_to_id_map.find(str);
  if (it != dehumidification_control_relative_humidity_display_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DehumidificationControlRelativeHumidityMode
const std::map<uint32_t, std::string> dehumidification_control_relative_humidity_mode_enum_id_to_string_map {
  { 0, "MeasuredLocally" },
  { 1, "UpdatedOverTheNetwork" },
};

// String to enum map for DehumidificationControlRelativeHumidityMode
const std::map<std::string, uint32_t> dehumidification_control_relative_humidity_mode_enum_string_to_id_map {
  { "MeasuredLocally", 0 },
  { "UpdatedOverTheNetwork", 1 },
};

std::string dehumidification_control_relative_humidity_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = dehumidification_control_relative_humidity_mode_enum_id_to_string_map.find(value);
  if (it != dehumidification_control_relative_humidity_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t dehumidification_control_relative_humidity_mode_get_enum_value_number(const std::string &str)
{
  auto it = dehumidification_control_relative_humidity_mode_enum_string_to_id_map.find(str);
  if (it != dehumidification_control_relative_humidity_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DevTypeId
const std::map<uint32_t, std::string> dev_type_id_enum_id_to_string_map {
  { 10, "DoorLock" },
  { 11, "DoorLockController" },
  { 43, "Fan" },
  { 45, "AirPurifier" },
  { 114, "RoomAirConditioner" },
  { 120, "Cooktop" },
  { 122, "ExtractorHood" },
  { 256, "OnOffLight" },
  { 257, "DimmableLight" },
  { 259, "OnOffLightSwitch" },
  { 260, "DimmerSwitch" },
  { 261, "ColorDimmerSwitch" },
  { 262, "LightSensor" },
  { 263, "OccupancySensor" },
  { 266, "OnOffPluginUnit" },
  { 267, "DimmablePlugInUnit" },
  { 268, "ColorTemperatureLight" },
  { 269, "ExtendedColorLight" },
  { 514, "WindowCovering" },
  { 515, "WindowCoveringController" },
  { 768, "HeatingCoolingUnit" },
  { 769, "Thermostat" },
  { 770, "TemperatureSensor" },
  { 771, "Pump" },
  { 773, "PressureSensor" },
  { 774, "FlowSensor" },
  { 775, "HumiditySensor" },
  { 2112, "ControlBridge" },
  { 2128, "OnOffSensor" },
};

// String to enum map for DevTypeId
const std::map<std::string, uint32_t> dev_type_id_enum_string_to_id_map {
  { "DoorLock", 10 },
  { "DoorLockController", 11 },
  { "Fan", 43 },
  { "AirPurifier", 45 },
  { "RoomAirConditioner", 114 },
  { "Cooktop", 120 },
  { "ExtractorHood", 122 },
  { "OnOffLight", 256 },
  { "DimmableLight", 257 },
  { "OnOffLightSwitch", 259 },
  { "DimmerSwitch", 260 },
  { "ColorDimmerSwitch", 261 },
  { "LightSensor", 262 },
  { "OccupancySensor", 263 },
  { "OnOffPluginUnit", 266 },
  { "DimmablePlugInUnit", 267 },
  { "ColorTemperatureLight", 268 },
  { "ExtendedColorLight", 269 },
  { "WindowCovering", 514 },
  { "WindowCoveringController", 515 },
  { "HeatingCoolingUnit", 768 },
  { "Thermostat", 769 },
  { "TemperatureSensor", 770 },
  { "Pump", 771 },
  { "PressureSensor", 773 },
  { "FlowSensor", 774 },
  { "HumiditySensor", 775 },
  { "ControlBridge", 2112 },
  { "OnOffSensor", 2128 },
};

std::string dev_type_id_get_enum_value_name(
  uint32_t value)
{
  auto it = dev_type_id_enum_id_to_string_map.find(value);
  if (it != dev_type_id_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t dev_type_id_get_enum_value_number(const std::string &str)
{
  auto it = dev_type_id_enum_string_to_id_map.find(str);
  if (it != dev_type_id_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DoorLockDoorState
const std::map<uint32_t, std::string> door_lock_door_state_enum_id_to_string_map {
  { 0, "Open" },
  { 1, "Closed" },
  { 2, "ErrorJammed" },
  { 3, "ErrorForcedOpen" },
  { 4, "ErrorUnspecified" },
  { 5, "DoorAjar" },
  { 255, "Undefined" },
};

// String to enum map for DoorLockDoorState
const std::map<std::string, uint32_t> door_lock_door_state_enum_string_to_id_map {
  { "Open", 0 },
  { "Closed", 1 },
  { "ErrorJammed", 2 },
  { "ErrorForcedOpen", 3 },
  { "ErrorUnspecified", 4 },
  { "DoorAjar", 5 },
  { "Undefined", 255 },
};

std::string door_lock_door_state_get_enum_value_name(
  uint32_t value)
{
  auto it = door_lock_door_state_enum_id_to_string_map.find(value);
  if (it != door_lock_door_state_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t door_lock_door_state_get_enum_value_number(const std::string &str)
{
  auto it = door_lock_door_state_enum_string_to_id_map.find(str);
  if (it != door_lock_door_state_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DoorLockLEDSettings
const std::map<uint32_t, std::string> door_lock_led_settings_enum_id_to_string_map {
  { 0, "NeverUseLED" },
  { 1, "UseLEDExceptForAccessAllowed" },
  { 2, "UseLEDForAllEvents" },
};

// String to enum map for DoorLockLEDSettings
const std::map<std::string, uint32_t> door_lock_led_settings_enum_string_to_id_map {
  { "NeverUseLED", 0 },
  { "UseLEDExceptForAccessAllowed", 1 },
  { "UseLEDForAllEvents", 2 },
};

std::string door_lock_led_settings_get_enum_value_name(
  uint32_t value)
{
  auto it = door_lock_led_settings_enum_id_to_string_map.find(value);
  if (it != door_lock_led_settings_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t door_lock_led_settings_get_enum_value_number(const std::string &str)
{
  auto it = door_lock_led_settings_enum_string_to_id_map.find(str);
  if (it != door_lock_led_settings_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DoorLockLockState
const std::map<uint32_t, std::string> door_lock_lock_state_enum_id_to_string_map {
  { 0, "NotFullyLocked" },
  { 1, "Locked" },
  { 2, "Unlocked" },
  { 3, "Unlatched" },
  { 255, "Undefined" },
};

// String to enum map for DoorLockLockState
const std::map<std::string, uint32_t> door_lock_lock_state_enum_string_to_id_map {
  { "NotFullyLocked", 0 },
  { "Locked", 1 },
  { "Unlocked", 2 },
  { "Unlatched", 3 },
  { "Undefined", 255 },
};

std::string door_lock_lock_state_get_enum_value_name(
  uint32_t value)
{
  auto it = door_lock_lock_state_enum_id_to_string_map.find(value);
  if (it != door_lock_lock_state_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t door_lock_lock_state_get_enum_value_number(const std::string &str)
{
  auto it = door_lock_lock_state_enum_string_to_id_map.find(str);
  if (it != door_lock_lock_state_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DoorLockLockType
const std::map<uint32_t, std::string> door_lock_lock_type_enum_id_to_string_map {
  { 0, "DeadBolt" },
  { 1, "Magnetic" },
  { 2, "Other" },
  { 3, "Mortise" },
  { 4, "Rim" },
  { 5, "LatchBolt" },
  { 6, "CylindricalLock" },
  { 7, "TubularLock" },
  { 8, "InterconnectedLock" },
  { 9, "DeadLatch" },
  { 10, "DoorFurniture" },
  { 11, "Eurocylinder" },
};

// String to enum map for DoorLockLockType
const std::map<std::string, uint32_t> door_lock_lock_type_enum_string_to_id_map {
  { "DeadBolt", 0 },
  { "Magnetic", 1 },
  { "Other", 2 },
  { "Mortise", 3 },
  { "Rim", 4 },
  { "LatchBolt", 5 },
  { "CylindricalLock", 6 },
  { "TubularLock", 7 },
  { "InterconnectedLock", 8 },
  { "DeadLatch", 9 },
  { "DoorFurniture", 10 },
  { "Eurocylinder", 11 },
};

std::string door_lock_lock_type_get_enum_value_name(
  uint32_t value)
{
  auto it = door_lock_lock_type_enum_id_to_string_map.find(value);
  if (it != door_lock_lock_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t door_lock_lock_type_get_enum_value_number(const std::string &str)
{
  auto it = door_lock_lock_type_enum_string_to_id_map.find(str);
  if (it != door_lock_lock_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DoorLockSecurityLevel
const std::map<uint32_t, std::string> door_lock_security_level_enum_id_to_string_map {
  { 0, "Network" },
  { 1, "APS" },
};

// String to enum map for DoorLockSecurityLevel
const std::map<std::string, uint32_t> door_lock_security_level_enum_string_to_id_map {
  { "Network", 0 },
  { "APS", 1 },
};

std::string door_lock_security_level_get_enum_value_name(
  uint32_t value)
{
  auto it = door_lock_security_level_enum_id_to_string_map.find(value);
  if (it != door_lock_security_level_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t door_lock_security_level_get_enum_value_number(const std::string &str)
{
  auto it = door_lock_security_level_enum_string_to_id_map.find(str);
  if (it != door_lock_security_level_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DoorLockSoundVolume
const std::map<uint32_t, std::string> door_lock_sound_volume_enum_id_to_string_map {
  { 0, "SilentMode" },
  { 1, "LowVolume" },
  { 2, "HighVolume" },
  { 3, "MediumVolume" },
};

// String to enum map for DoorLockSoundVolume
const std::map<std::string, uint32_t> door_lock_sound_volume_enum_string_to_id_map {
  { "SilentMode", 0 },
  { "LowVolume", 1 },
  { "HighVolume", 2 },
  { "MediumVolume", 3 },
};

std::string door_lock_sound_volume_get_enum_value_name(
  uint32_t value)
{
  auto it = door_lock_sound_volume_enum_id_to_string_map.find(value);
  if (it != door_lock_sound_volume_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t door_lock_sound_volume_get_enum_value_number(const std::string &str)
{
  auto it = door_lock_sound_volume_enum_string_to_id_map.find(str);
  if (it != door_lock_sound_volume_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DrlkOperEventSource
const std::map<uint32_t, std::string> drlk_oper_event_source_enum_id_to_string_map {
  { 0, "Keypad" },
  { 1, "RF" },
  { 2, "Manual" },
  { 3, "RFID" },
  { 255, "Indeterminate" },
};

// String to enum map for DrlkOperEventSource
const std::map<std::string, uint32_t> drlk_oper_event_source_enum_string_to_id_map {
  { "Keypad", 0 },
  { "RF", 1 },
  { "Manual", 2 },
  { "RFID", 3 },
  { "Indeterminate", 255 },
};

std::string drlk_oper_event_source_get_enum_value_name(
  uint32_t value)
{
  auto it = drlk_oper_event_source_enum_id_to_string_map.find(value);
  if (it != drlk_oper_event_source_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t drlk_oper_event_source_get_enum_value_number(const std::string &str)
{
  auto it = drlk_oper_event_source_enum_string_to_id_map.find(str);
  if (it != drlk_oper_event_source_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DrlkOperMode
const std::map<uint32_t, std::string> drlk_oper_mode_enum_id_to_string_map {
  { 0, "Normal" },
  { 1, "Vacation" },
  { 2, "Privacy" },
  { 3, "NoRFLockOrUnlock" },
  { 4, "Passage" },
};

// String to enum map for DrlkOperMode
const std::map<std::string, uint32_t> drlk_oper_mode_enum_string_to_id_map {
  { "Normal", 0 },
  { "Vacation", 1 },
  { "Privacy", 2 },
  { "NoRFLockOrUnlock", 3 },
  { "Passage", 4 },
};

std::string drlk_oper_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = drlk_oper_mode_enum_id_to_string_map.find(value);
  if (it != drlk_oper_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t drlk_oper_mode_get_enum_value_number(const std::string &str)
{
  auto it = drlk_oper_mode_enum_string_to_id_map.find(str);
  if (it != drlk_oper_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DrlkPassFailStatus
const std::map<uint32_t, std::string> drlk_pass_fail_status_enum_id_to_string_map {
  { 0, "Pass" },
  { 1, "Fail" },
};

// String to enum map for DrlkPassFailStatus
const std::map<std::string, uint32_t> drlk_pass_fail_status_enum_string_to_id_map {
  { "Pass", 0 },
  { "Fail", 1 },
};

std::string drlk_pass_fail_status_get_enum_value_name(
  uint32_t value)
{
  auto it = drlk_pass_fail_status_enum_id_to_string_map.find(value);
  if (it != drlk_pass_fail_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t drlk_pass_fail_status_get_enum_value_number(const std::string &str)
{
  auto it = drlk_pass_fail_status_enum_string_to_id_map.find(str);
  if (it != drlk_pass_fail_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DrlkSetCodeStatus
const std::map<uint32_t, std::string> drlk_set_code_status_enum_id_to_string_map {
  { 0, "Success" },
  { 1, "GeneralFailure" },
  { 2, "MemoryFull" },
  { 3, "DuplicateCode" },
};

// String to enum map for DrlkSetCodeStatus
const std::map<std::string, uint32_t> drlk_set_code_status_enum_string_to_id_map {
  { "Success", 0 },
  { "GeneralFailure", 1 },
  { "MemoryFull", 2 },
  { "DuplicateCode", 3 },
};

std::string drlk_set_code_status_get_enum_value_name(
  uint32_t value)
{
  auto it = drlk_set_code_status_enum_id_to_string_map.find(value);
  if (it != drlk_set_code_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t drlk_set_code_status_get_enum_value_number(const std::string &str)
{
  auto it = drlk_set_code_status_enum_string_to_id_map.find(str);
  if (it != drlk_set_code_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DrlkSettableUserStatus
const std::map<uint32_t, std::string> drlk_settable_user_status_enum_id_to_string_map {
  { 1, "OccupiedEnabled" },
  { 3, "OccupiedDisabled" },
};

// String to enum map for DrlkSettableUserStatus
const std::map<std::string, uint32_t> drlk_settable_user_status_enum_string_to_id_map {
  { "OccupiedEnabled", 1 },
  { "OccupiedDisabled", 3 },
};

std::string drlk_settable_user_status_get_enum_value_name(
  uint32_t value)
{
  auto it = drlk_settable_user_status_enum_id_to_string_map.find(value);
  if (it != drlk_settable_user_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t drlk_settable_user_status_get_enum_value_number(const std::string &str)
{
  auto it = drlk_settable_user_status_enum_string_to_id_map.find(str);
  if (it != drlk_settable_user_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DrlkUserStatus
const std::map<uint32_t, std::string> drlk_user_status_enum_id_to_string_map {
  { 0, "Available" },
  { 1, "OccupiedEnabled" },
  { 3, "OccupiedDisabled" },
  { 255, "NotSupported" },
};

// String to enum map for DrlkUserStatus
const std::map<std::string, uint32_t> drlk_user_status_enum_string_to_id_map {
  { "Available", 0 },
  { "OccupiedEnabled", 1 },
  { "OccupiedDisabled", 3 },
  { "NotSupported", 255 },
};

std::string drlk_user_status_get_enum_value_name(
  uint32_t value)
{
  auto it = drlk_user_status_enum_id_to_string_map.find(value);
  if (it != drlk_user_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t drlk_user_status_get_enum_value_number(const std::string &str)
{
  auto it = drlk_user_status_enum_string_to_id_map.find(str);
  if (it != drlk_user_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for DrlkUserType
const std::map<uint32_t, std::string> drlk_user_type_enum_id_to_string_map {
  { 0, "UnrestrictedUser" },
  { 1, "YearDayScheduleUser" },
  { 2, "WeekDayScheduleUser" },
  { 3, "MasterUser" },
  { 4, "NonAccessUser" },
  { 5, "ForcedUser" },
  { 6, "DisposableUser" },
  { 7, "ExpiringUser" },
  { 8, "ScheduleRestrictedUser" },
  { 9, "RemoteOnlyUser" },
  { 255, "NotSupported" },
};

// String to enum map for DrlkUserType
const std::map<std::string, uint32_t> drlk_user_type_enum_string_to_id_map {
  { "UnrestrictedUser", 0 },
  { "YearDayScheduleUser", 1 },
  { "WeekDayScheduleUser", 2 },
  { "MasterUser", 3 },
  { "NonAccessUser", 4 },
  { "ForcedUser", 5 },
  { "DisposableUser", 6 },
  { "ExpiringUser", 7 },
  { "ScheduleRestrictedUser", 8 },
  { "RemoteOnlyUser", 9 },
  { "NotSupported", 255 },
};

std::string drlk_user_type_get_enum_value_name(
  uint32_t value)
{
  auto it = drlk_user_type_enum_id_to_string_map.find(value);
  if (it != drlk_user_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t drlk_user_type_get_enum_value_number(const std::string &str)
{
  auto it = drlk_user_type_enum_string_to_id_map.find(str);
  if (it != drlk_user_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for FanControlFanMode
const std::map<uint32_t, std::string> fan_control_fan_mode_enum_id_to_string_map {
  { 0, "Off" },
  { 1, "Low" },
  { 2, "Medium" },
  { 3, "High" },
  { 4, "On" },
  { 5, "Auto" },
  { 6, "Smart" },
};

// String to enum map for FanControlFanMode
const std::map<std::string, uint32_t> fan_control_fan_mode_enum_string_to_id_map {
  { "Off", 0 },
  { "Low", 1 },
  { "Medium", 2 },
  { "High", 3 },
  { "On", 4 },
  { "Auto", 5 },
  { "Smart", 6 },
};

std::string fan_control_fan_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = fan_control_fan_mode_enum_id_to_string_map.find(value);
  if (it != fan_control_fan_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t fan_control_fan_mode_get_enum_value_number(const std::string &str)
{
  auto it = fan_control_fan_mode_enum_string_to_id_map.find(str);
  if (it != fan_control_fan_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for FanControlFanModeSequence
const std::map<uint32_t, std::string> fan_control_fan_mode_sequence_enum_id_to_string_map {
  { 0, "LowMedHigh" },
  { 1, "LowHigh" },
  { 2, "LowMedHighAuto" },
  { 3, "LowHighAuto" },
  { 4, "OnAuto" },
};

// String to enum map for FanControlFanModeSequence
const std::map<std::string, uint32_t> fan_control_fan_mode_sequence_enum_string_to_id_map {
  { "LowMedHigh", 0 },
  { "LowHigh", 1 },
  { "LowMedHighAuto", 2 },
  { "LowHighAuto", 3 },
  { "OnAuto", 4 },
};

std::string fan_control_fan_mode_sequence_get_enum_value_name(
  uint32_t value)
{
  auto it = fan_control_fan_mode_sequence_enum_id_to_string_map.find(value);
  if (it != fan_control_fan_mode_sequence_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t fan_control_fan_mode_sequence_get_enum_value_number(const std::string &str)
{
  auto it = fan_control_fan_mode_sequence_enum_string_to_id_map.find(str);
  if (it != fan_control_fan_mode_sequence_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for GetLogRecordResponseEventType
const std::map<uint32_t, std::string> get_log_record_response_event_type_enum_id_to_string_map {
  { 0, "Operation" },
  { 1, "Programming" },
  { 2, "Alarm" },
};

// String to enum map for GetLogRecordResponseEventType
const std::map<std::string, uint32_t> get_log_record_response_event_type_enum_string_to_id_map {
  { "Operation", 0 },
  { "Programming", 1 },
  { "Alarm", 2 },
};

std::string get_log_record_response_event_type_get_enum_value_name(
  uint32_t value)
{
  auto it = get_log_record_response_event_type_enum_id_to_string_map.find(value);
  if (it != get_log_record_response_event_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t get_log_record_response_event_type_get_enum_value_number(const std::string &str)
{
  auto it = get_log_record_response_event_type_enum_string_to_id_map.find(str);
  if (it != get_log_record_response_event_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for GetMeasurementProfileResponseStatus
const std::map<uint32_t, std::string> get_measurement_profile_response_status_enum_id_to_string_map {
  { 0, "Success" },
  { 1, "AttributeProfileNotSupported" },
  { 2, "InvalidStartTime" },
  { 3, "MoreIntervalsRequestedThanCanBeReturned" },
  { 4, "NoIntervalsAvailableForTheRequestedTime" },
};

// String to enum map for GetMeasurementProfileResponseStatus
const std::map<std::string, uint32_t> get_measurement_profile_response_status_enum_string_to_id_map {
  { "Success", 0 },
  { "AttributeProfileNotSupported", 1 },
  { "InvalidStartTime", 2 },
  { "MoreIntervalsRequestedThanCanBeReturned", 3 },
  { "NoIntervalsAvailableForTheRequestedTime", 4 },
};

std::string get_measurement_profile_response_status_get_enum_value_name(
  uint32_t value)
{
  auto it = get_measurement_profile_response_status_enum_id_to_string_map.find(value);
  if (it != get_measurement_profile_response_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t get_measurement_profile_response_status_get_enum_value_number(const std::string &str)
{
  auto it = get_measurement_profile_response_status_enum_string_to_id_map.find(str);
  if (it != get_measurement_profile_response_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for HVACSystemTypeConfigurationCoolingSystemStage
const std::map<uint32_t, std::string> hvac_system_type_configuration_cooling_system_stage_enum_id_to_string_map {
  { 0, "CoolStage1" },
  { 1, "CoolStage2" },
  { 2, "CoolStage3" },
};

// String to enum map for HVACSystemTypeConfigurationCoolingSystemStage
const std::map<std::string, uint32_t> hvac_system_type_configuration_cooling_system_stage_enum_string_to_id_map {
  { "CoolStage1", 0 },
  { "CoolStage2", 1 },
  { "CoolStage3", 2 },
};

std::string hvac_system_type_configuration_cooling_system_stage_get_enum_value_name(
  uint32_t value)
{
  auto it = hvac_system_type_configuration_cooling_system_stage_enum_id_to_string_map.find(value);
  if (it != hvac_system_type_configuration_cooling_system_stage_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t hvac_system_type_configuration_cooling_system_stage_get_enum_value_number(const std::string &str)
{
  auto it = hvac_system_type_configuration_cooling_system_stage_enum_string_to_id_map.find(str);
  if (it != hvac_system_type_configuration_cooling_system_stage_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for HVACSystemTypeConfigurationHeatingFuelSource
const std::map<uint32_t, std::string> hvac_system_type_configuration_heating_fuel_source_enum_id_to_string_map {
  { 0, "ElectricOrB" },
  { 1, "GasOrO" },
};

// String to enum map for HVACSystemTypeConfigurationHeatingFuelSource
const std::map<std::string, uint32_t> hvac_system_type_configuration_heating_fuel_source_enum_string_to_id_map {
  { "ElectricOrB", 0 },
  { "GasOrO", 1 },
};

std::string hvac_system_type_configuration_heating_fuel_source_get_enum_value_name(
  uint32_t value)
{
  auto it = hvac_system_type_configuration_heating_fuel_source_enum_id_to_string_map.find(value);
  if (it != hvac_system_type_configuration_heating_fuel_source_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t hvac_system_type_configuration_heating_fuel_source_get_enum_value_number(const std::string &str)
{
  auto it = hvac_system_type_configuration_heating_fuel_source_enum_string_to_id_map.find(str);
  if (it != hvac_system_type_configuration_heating_fuel_source_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for HVACSystemTypeConfigurationHeatingSystemStage
const std::map<uint32_t, std::string> hvac_system_type_configuration_heating_system_stage_enum_id_to_string_map {
  { 0, "HeatStage1" },
  { 1, "HeatStage2" },
  { 2, "HeatStage3" },
};

// String to enum map for HVACSystemTypeConfigurationHeatingSystemStage
const std::map<std::string, uint32_t> hvac_system_type_configuration_heating_system_stage_enum_string_to_id_map {
  { "HeatStage1", 0 },
  { "HeatStage2", 1 },
  { "HeatStage3", 2 },
};

std::string hvac_system_type_configuration_heating_system_stage_get_enum_value_name(
  uint32_t value)
{
  auto it = hvac_system_type_configuration_heating_system_stage_enum_id_to_string_map.find(value);
  if (it != hvac_system_type_configuration_heating_system_stage_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t hvac_system_type_configuration_heating_system_stage_get_enum_value_number(const std::string &str)
{
  auto it = hvac_system_type_configuration_heating_system_stage_enum_string_to_id_map.find(str);
  if (it != hvac_system_type_configuration_heating_system_stage_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for HVACSystemTypeConfigurationHeatingSystemType
const std::map<uint32_t, std::string> hvac_system_type_configuration_heating_system_type_enum_id_to_string_map {
  { 0, "Conventional" },
  { 1, "HeatPump" },
};

// String to enum map for HVACSystemTypeConfigurationHeatingSystemType
const std::map<std::string, uint32_t> hvac_system_type_configuration_heating_system_type_enum_string_to_id_map {
  { "Conventional", 0 },
  { "HeatPump", 1 },
};

std::string hvac_system_type_configuration_heating_system_type_get_enum_value_name(
  uint32_t value)
{
  auto it = hvac_system_type_configuration_heating_system_type_enum_id_to_string_map.find(value);
  if (it != hvac_system_type_configuration_heating_system_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t hvac_system_type_configuration_heating_system_type_get_enum_value_number(const std::string &str)
{
  auto it = hvac_system_type_configuration_heating_system_type_enum_string_to_id_map.find(str);
  if (it != hvac_system_type_configuration_heating_system_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for IASZoneZoneState
const std::map<uint32_t, std::string> ias_zone_zone_state_enum_id_to_string_map {
  { 0, "NotEnrolled" },
  { 1, "Enrolled" },
};

// String to enum map for IASZoneZoneState
const std::map<std::string, uint32_t> ias_zone_zone_state_enum_string_to_id_map {
  { "NotEnrolled", 0 },
  { "Enrolled", 1 },
};

std::string ias_zone_zone_state_get_enum_value_name(
  uint32_t value)
{
  auto it = ias_zone_zone_state_enum_id_to_string_map.find(value);
  if (it != ias_zone_zone_state_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t ias_zone_zone_state_get_enum_value_number(const std::string &str)
{
  auto it = ias_zone_zone_state_enum_string_to_id_map.find(str);
  if (it != ias_zone_zone_state_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for IasZoneType
const std::map<uint32_t, std::string> ias_zone_type_enum_id_to_string_map {
  { 0, "StandardCIE" },
  { 13, "MotionSensor" },
  { 21, "ContactSwitch" },
  { 22, "DoorOrWindowHandle" },
  { 40, "FireSensor" },
  { 42, "WaterSensor" },
  { 43, "CarbonMonoxideSensor" },
  { 44, "PersonalEmergencyDevice" },
  { 45, "VibrationOrMovementSensor" },
  { 271, "RemoteControl" },
  { 277, "KeyFob" },
  { 541, "Keypad" },
  { 549, "StandardWarningDevice" },
  { 550, "GlassBreakSensor" },
  { 553, "SecurityRepeater" },
  { 65535, "Invalid" },
};

// String to enum map for IasZoneType
const std::map<std::string, uint32_t> ias_zone_type_enum_string_to_id_map {
  { "StandardCIE", 0 },
  { "MotionSensor", 13 },
  { "ContactSwitch", 21 },
  { "DoorOrWindowHandle", 22 },
  { "FireSensor", 40 },
  { "WaterSensor", 42 },
  { "CarbonMonoxideSensor", 43 },
  { "PersonalEmergencyDevice", 44 },
  { "VibrationOrMovementSensor", 45 },
  { "RemoteControl", 271 },
  { "KeyFob", 277 },
  { "Keypad", 541 },
  { "StandardWarningDevice", 549 },
  { "GlassBreakSensor", 550 },
  { "SecurityRepeater", 553 },
  { "Invalid", 65535 },
};

std::string ias_zone_type_get_enum_value_name(
  uint32_t value)
{
  auto it = ias_zone_type_enum_id_to_string_map.find(value);
  if (it != ias_zone_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t ias_zone_type_get_enum_value_number(const std::string &str)
{
  auto it = ias_zone_type_enum_string_to_id_map.find(str);
  if (it != ias_zone_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for IasacPanelStatus
const std::map<uint32_t, std::string> iasac_panel_status_enum_id_to_string_map {
  { 0, "PanelDisarmedReadyToArm" },
  { 1, "ArmedStay" },
  { 2, "ArmedNight" },
  { 3, "ArmedAway" },
  { 4, "ExitDelay" },
  { 5, "EntryDelay" },
  { 6, "NotReadyToArm" },
  { 7, "InAlarm" },
  { 8, "ArmingStay" },
  { 9, "ArmingNight" },
  { 10, "ArmingAway" },
};

// String to enum map for IasacPanelStatus
const std::map<std::string, uint32_t> iasac_panel_status_enum_string_to_id_map {
  { "PanelDisarmedReadyToArm", 0 },
  { "ArmedStay", 1 },
  { "ArmedNight", 2 },
  { "ArmedAway", 3 },
  { "ExitDelay", 4 },
  { "EntryDelay", 5 },
  { "NotReadyToArm", 6 },
  { "InAlarm", 7 },
  { "ArmingStay", 8 },
  { "ArmingNight", 9 },
  { "ArmingAway", 10 },
};

std::string iasac_panel_status_get_enum_value_name(
  uint32_t value)
{
  auto it = iasac_panel_status_enum_id_to_string_map.find(value);
  if (it != iasac_panel_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t iasac_panel_status_get_enum_value_number(const std::string &str)
{
  auto it = iasac_panel_status_enum_string_to_id_map.find(str);
  if (it != iasac_panel_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for IasaceAlarmStatus
const std::map<uint32_t, std::string> iasace_alarm_status_enum_id_to_string_map {
  { 0, "NoAlarm" },
  { 1, "Burgler" },
  { 2, "Fire" },
  { 3, "Emergency" },
  { 4, "PolicePanic" },
  { 5, "FirePanic" },
  { 6, "EmergencyPanic" },
};

// String to enum map for IasaceAlarmStatus
const std::map<std::string, uint32_t> iasace_alarm_status_enum_string_to_id_map {
  { "NoAlarm", 0 },
  { "Burgler", 1 },
  { "Fire", 2 },
  { "Emergency", 3 },
  { "PolicePanic", 4 },
  { "FirePanic", 5 },
  { "EmergencyPanic", 6 },
};

std::string iasace_alarm_status_get_enum_value_name(
  uint32_t value)
{
  auto it = iasace_alarm_status_enum_id_to_string_map.find(value);
  if (it != iasace_alarm_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t iasace_alarm_status_get_enum_value_number(const std::string &str)
{
  auto it = iasace_alarm_status_enum_string_to_id_map.find(str);
  if (it != iasace_alarm_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for IasaceAudibleNotification
const std::map<uint32_t, std::string> iasace_audible_notification_enum_id_to_string_map {
  { 0, "Mute" },
  { 1, "DefaultSound" },
};

// String to enum map for IasaceAudibleNotification
const std::map<std::string, uint32_t> iasace_audible_notification_enum_string_to_id_map {
  { "Mute", 0 },
  { "DefaultSound", 1 },
};

std::string iasace_audible_notification_get_enum_value_name(
  uint32_t value)
{
  auto it = iasace_audible_notification_enum_id_to_string_map.find(value);
  if (it != iasace_audible_notification_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t iasace_audible_notification_get_enum_value_number(const std::string &str)
{
  auto it = iasace_audible_notification_enum_string_to_id_map.find(str);
  if (it != iasace_audible_notification_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for IaswdLevel
const std::map<uint32_t, std::string> iaswd_level_enum_id_to_string_map {
  { 0, "LowLevel" },
  { 1, "MediumLevel" },
  { 2, "HighLevel" },
  { 3, "VeryHighLevel" },
};

// String to enum map for IaswdLevel
const std::map<std::string, uint32_t> iaswd_level_enum_string_to_id_map {
  { "LowLevel", 0 },
  { "MediumLevel", 1 },
  { "HighLevel", 2 },
  { "VeryHighLevel", 3 },
};

std::string iaswd_level_get_enum_value_name(
  uint32_t value)
{
  auto it = iaswd_level_enum_id_to_string_map.find(value);
  if (it != iaswd_level_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t iaswd_level_get_enum_value_number(const std::string &str)
{
  auto it = iaswd_level_enum_string_to_id_map.find(str);
  if (it != iaswd_level_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for IlluminanceLevelSensingLevelStatus
const std::map<uint32_t, std::string> illuminance_level_sensing_level_status_enum_id_to_string_map {
  { 0, "IlluminanceOnTarget" },
  { 1, "IlluminanceBelowTarget" },
  { 2, "IlluminanceAboveTarget" },
};

// String to enum map for IlluminanceLevelSensingLevelStatus
const std::map<std::string, uint32_t> illuminance_level_sensing_level_status_enum_string_to_id_map {
  { "IlluminanceOnTarget", 0 },
  { "IlluminanceBelowTarget", 1 },
  { "IlluminanceAboveTarget", 2 },
};

std::string illuminance_level_sensing_level_status_get_enum_value_name(
  uint32_t value)
{
  auto it = illuminance_level_sensing_level_status_enum_id_to_string_map.find(value);
  if (it != illuminance_level_sensing_level_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t illuminance_level_sensing_level_status_get_enum_value_number(const std::string &str)
{
  auto it = illuminance_level_sensing_level_status_enum_string_to_id_map.find(str);
  if (it != illuminance_level_sensing_level_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for IlluminanceLevelSensingLightSensorType
const std::map<uint32_t, std::string> illuminance_level_sensing_light_sensor_type_enum_id_to_string_map {
  { 0, "Photodiode" },
  { 1, "CMOS" },
  { 255, "Unknown" },
};

// String to enum map for IlluminanceLevelSensingLightSensorType
const std::map<std::string, uint32_t> illuminance_level_sensing_light_sensor_type_enum_string_to_id_map {
  { "Photodiode", 0 },
  { "CMOS", 1 },
  { "Unknown", 255 },
};

std::string illuminance_level_sensing_light_sensor_type_get_enum_value_name(
  uint32_t value)
{
  auto it = illuminance_level_sensing_light_sensor_type_enum_id_to_string_map.find(value);
  if (it != illuminance_level_sensing_light_sensor_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t illuminance_level_sensing_light_sensor_type_get_enum_value_number(const std::string &str)
{
  auto it = illuminance_level_sensing_light_sensor_type_enum_string_to_id_map.find(str);
  if (it != illuminance_level_sensing_light_sensor_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for IlluminanceMeasurementLightSensorType
const std::map<uint32_t, std::string> illuminance_measurement_light_sensor_type_enum_id_to_string_map {
  { 0, "Photodiode" },
  { 1, "CMOS" },
  { 255, "Unknown" },
};

// String to enum map for IlluminanceMeasurementLightSensorType
const std::map<std::string, uint32_t> illuminance_measurement_light_sensor_type_enum_string_to_id_map {
  { "Photodiode", 0 },
  { "CMOS", 1 },
  { "Unknown", 255 },
};

std::string illuminance_measurement_light_sensor_type_get_enum_value_name(
  uint32_t value)
{
  auto it = illuminance_measurement_light_sensor_type_enum_id_to_string_map.find(value);
  if (it != illuminance_measurement_light_sensor_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t illuminance_measurement_light_sensor_type_get_enum_value_number(const std::string &str)
{
  auto it = illuminance_measurement_light_sensor_type_enum_string_to_id_map.find(str);
  if (it != illuminance_measurement_light_sensor_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ImageNotifyPayloadType
const std::map<uint32_t, std::string> image_notify_payload_type_enum_id_to_string_map {
  { 0, "QueryJitter" },
  { 1, "QueryJitterAndManufacturerCode" },
  { 2, "QueryJitterManufacturerCodeAndImageType" },
  { 3, "QueryJitterManufacturerCodeImageTypeAndNewFileVersion" },
};

// String to enum map for ImageNotifyPayloadType
const std::map<std::string, uint32_t> image_notify_payload_type_enum_string_to_id_map {
  { "QueryJitter", 0 },
  { "QueryJitterAndManufacturerCode", 1 },
  { "QueryJitterManufacturerCodeAndImageType", 2 },
  { "QueryJitterManufacturerCodeImageTypeAndNewFileVersion", 3 },
};

std::string image_notify_payload_type_get_enum_value_name(
  uint32_t value)
{
  auto it = image_notify_payload_type_enum_id_to_string_map.find(value);
  if (it != image_notify_payload_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t image_notify_payload_type_get_enum_value_number(const std::string &str)
{
  auto it = image_notify_payload_type_enum_string_to_id_map.find(str);
  if (it != image_notify_payload_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for LoggingLevelEnum
const std::map<uint32_t, std::string> logging_level_enum_enum_id_to_string_map {
  { 0, "Debug" },
  { 1, "Info" },
  { 2, "Warning" },
  { 3, "Error" },
  { 4, "Critical" },
};

// String to enum map for LoggingLevelEnum
const std::map<std::string, uint32_t> logging_level_enum_enum_string_to_id_map {
  { "Debug", 0 },
  { "Info", 1 },
  { "Warning", 2 },
  { "Error", 3 },
  { "Critical", 4 },
};

std::string logging_level_enum_get_enum_value_name(
  uint32_t value)
{
  auto it = logging_level_enum_enum_id_to_string_map.find(value);
  if (it != logging_level_enum_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t logging_level_enum_get_enum_value_number(const std::string &str)
{
  auto it = logging_level_enum_enum_string_to_id_map.find(str);
  if (it != logging_level_enum_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for MeteringEnergyCarrierUnitOfMeasure
const std::map<uint32_t, std::string> metering_energy_carrier_unit_of_measure_enum_id_to_string_map {
  { 0, "KilowattHoursOrKilowatts" },
  { 1, "CubicMeterOrCubicMeterPerHour" },
  { 2, "CubicFeetOrCubicFeetPerHour" },
  { 3, "CentumCubicFeetOrCentum" },
  { 4, "USGallonsOrUSGalonsPerHour" },
  { 5, "ImperialGallonsOrImperialGallonsPerhour" },
  { 6, "BTUsOrBTUPerhour" },
  { 7, "LitersOrLitersPerHour" },
  { 8, "kPAGaugein" },
  { 9, "kPAabsolute" },
  { 10, "mcfCubicFeetOr mcfPerHour" },
  { 11, "Unitless" },
  { 12, "MegaJouleMegaJoulePerSecond" },
};

// String to enum map for MeteringEnergyCarrierUnitOfMeasure
const std::map<std::string, uint32_t> metering_energy_carrier_unit_of_measure_enum_string_to_id_map {
  { "KilowattHoursOrKilowatts", 0 },
  { "CubicMeterOrCubicMeterPerHour", 1 },
  { "CubicFeetOrCubicFeetPerHour", 2 },
  { "CentumCubicFeetOrCentum", 3 },
  { "USGallonsOrUSGalonsPerHour", 4 },
  { "ImperialGallonsOrImperialGallonsPerhour", 5 },
  { "BTUsOrBTUPerhour", 6 },
  { "LitersOrLitersPerHour", 7 },
  { "kPAGaugein", 8 },
  { "kPAabsolute", 9 },
  { "mcfCubicFeetOr mcfPerHour", 10 },
  { "Unitless", 11 },
  { "MegaJouleMegaJoulePerSecond", 12 },
};

std::string metering_energy_carrier_unit_of_measure_get_enum_value_name(
  uint32_t value)
{
  auto it = metering_energy_carrier_unit_of_measure_enum_id_to_string_map.find(value);
  if (it != metering_energy_carrier_unit_of_measure_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t metering_energy_carrier_unit_of_measure_get_enum_value_number(const std::string &str)
{
  auto it = metering_energy_carrier_unit_of_measure_enum_string_to_id_map.find(str);
  if (it != metering_energy_carrier_unit_of_measure_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for MeteringMeteringDeviceType
const std::map<uint32_t, std::string> metering_metering_device_type_enum_id_to_string_map {
  { 0, "ElectricMetering" },
  { 1, "GasMetering" },
  { 2, "WaterMetering" },
  { 3, "ThermalMetering" },
  { 4, "PressureMetering" },
  { 5, "HeatMetering" },
  { 6, "CoolingMetering" },
  { 128, "MirroredGasMetering" },
  { 129, "MirroredWaterMetering" },
  { 130, "MirroredThermalMetering" },
  { 131, "MirroredPressureMetering" },
  { 132, "MirroredHeatMetering" },
  { 133, "MirroredCoolingMetering" },
};

// String to enum map for MeteringMeteringDeviceType
const std::map<std::string, uint32_t> metering_metering_device_type_enum_string_to_id_map {
  { "ElectricMetering", 0 },
  { "GasMetering", 1 },
  { "WaterMetering", 2 },
  { "ThermalMetering", 3 },
  { "PressureMetering", 4 },
  { "HeatMetering", 5 },
  { "CoolingMetering", 6 },
  { "MirroredGasMetering", 128 },
  { "MirroredWaterMetering", 129 },
  { "MirroredThermalMetering", 130 },
  { "MirroredPressureMetering", 131 },
  { "MirroredHeatMetering", 132 },
  { "MirroredCoolingMetering", 133 },
};

std::string metering_metering_device_type_get_enum_value_name(
  uint32_t value)
{
  auto it = metering_metering_device_type_enum_id_to_string_map.find(value);
  if (it != metering_metering_device_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t metering_metering_device_type_get_enum_value_number(const std::string &str)
{
  auto it = metering_metering_device_type_enum_string_to_id_map.find(str);
  if (it != metering_metering_device_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for MeteringSupplyStatus
const std::map<uint32_t, std::string> metering_supply_status_enum_id_to_string_map {
  { 0, "SupplyOFF" },
  { 1, "SupplyOFFOrARMED" },
  { 2, "SupplyON" },
};

// String to enum map for MeteringSupplyStatus
const std::map<std::string, uint32_t> metering_supply_status_enum_string_to_id_map {
  { "SupplyOFF", 0 },
  { "SupplyOFFOrARMED", 1 },
  { "SupplyON", 2 },
};

std::string metering_supply_status_get_enum_value_name(
  uint32_t value)
{
  auto it = metering_supply_status_enum_id_to_string_map.find(value);
  if (it != metering_supply_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t metering_supply_status_get_enum_value_number(const std::string &str)
{
  auto it = metering_supply_status_enum_string_to_id_map.find(str);
  if (it != metering_supply_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for MeteringTemperatureUnitOfMeasure
const std::map<uint32_t, std::string> metering_temperature_unit_of_measure_enum_id_to_string_map {
  { 0, "DegreesKelvin" },
  { 1, "DegreesCelsius" },
  { 2, "DegreesFahrenheit" },
};

// String to enum map for MeteringTemperatureUnitOfMeasure
const std::map<std::string, uint32_t> metering_temperature_unit_of_measure_enum_string_to_id_map {
  { "DegreesKelvin", 0 },
  { "DegreesCelsius", 1 },
  { "DegreesFahrenheit", 2 },
};

std::string metering_temperature_unit_of_measure_get_enum_value_name(
  uint32_t value)
{
  auto it = metering_temperature_unit_of_measure_enum_id_to_string_map.find(value);
  if (it != metering_temperature_unit_of_measure_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t metering_temperature_unit_of_measure_get_enum_value_number(const std::string &str)
{
  auto it = metering_temperature_unit_of_measure_enum_string_to_id_map.find(str);
  if (it != metering_temperature_unit_of_measure_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for MeteringUnitofMeasure
const std::map<uint32_t, std::string> metering_unitof_measure_enum_id_to_string_map {
  { 0, "KilowattHoursOrKilowatts" },
  { 1, "CubicMeterOrCubicMeterPerHour" },
  { 2, "CubicFeetOrCubicFeetPerHour" },
  { 3, "CentumCubicFeetOrCentum" },
  { 4, "USGallonsOrUSGalonsPerHour" },
  { 5, "ImperialGallonsOrImperialGallonsPerhour" },
  { 6, "BTUsOrBTUPerhour" },
  { 7, "LitersOrLitersPerHour" },
  { 8, "kPAGaugein" },
  { 9, "kPAabsolute" },
  { 10, "mcfCubicFeetOr mcfPerHour" },
  { 11, "Unitless" },
  { 12, "MegaJouleMegaJoulePerSecond" },
};

// String to enum map for MeteringUnitofMeasure
const std::map<std::string, uint32_t> metering_unitof_measure_enum_string_to_id_map {
  { "KilowattHoursOrKilowatts", 0 },
  { "CubicMeterOrCubicMeterPerHour", 1 },
  { "CubicFeetOrCubicFeetPerHour", 2 },
  { "CentumCubicFeetOrCentum", 3 },
  { "USGallonsOrUSGalonsPerHour", 4 },
  { "ImperialGallonsOrImperialGallonsPerhour", 5 },
  { "BTUsOrBTUPerhour", 6 },
  { "LitersOrLitersPerHour", 7 },
  { "kPAGaugein", 8 },
  { "kPAabsolute", 9 },
  { "mcfCubicFeetOr mcfPerHour", 10 },
  { "Unitless", 11 },
  { "MegaJouleMegaJoulePerSecond", 12 },
};

std::string metering_unitof_measure_get_enum_value_name(
  uint32_t value)
{
  auto it = metering_unitof_measure_enum_id_to_string_map.find(value);
  if (it != metering_unitof_measure_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t metering_unitof_measure_get_enum_value_number(const std::string &str)
{
  auto it = metering_unitof_measure_enum_string_to_id_map.find(str);
  if (it != metering_unitof_measure_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ModeType
const std::map<uint32_t, std::string> mode_type_enum_id_to_string_map {
  { 0, "Off" },
  { 1, "Humidify" },
  { 2, "Dehumidify" },
  { 3, "Auto" },
};

// String to enum map for ModeType
const std::map<std::string, uint32_t> mode_type_enum_string_to_id_map {
  { "Off", 0 },
  { "Humidify", 1 },
  { "Dehumidify", 2 },
  { "Auto", 3 },
};

std::string mode_type_get_enum_value_name(
  uint32_t value)
{
  auto it = mode_type_enum_id_to_string_map.find(value);
  if (it != mode_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t mode_type_get_enum_value_number(const std::string &str)
{
  auto it = mode_type_enum_string_to_id_map.find(str);
  if (it != mode_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for MoveStepMode
const std::map<uint32_t, std::string> move_step_mode_enum_id_to_string_map {
  { 0, "Up" },
  { 1, "Down" },
};

// String to enum map for MoveStepMode
const std::map<std::string, uint32_t> move_step_mode_enum_string_to_id_map {
  { "Up", 0 },
  { "Down", 1 },
};

std::string move_step_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = move_step_mode_enum_id_to_string_map.find(value);
  if (it != move_step_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t move_step_mode_get_enum_value_number(const std::string &str)
{
  auto it = move_step_mode_enum_string_to_id_map.find(str);
  if (it != move_step_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for NM_State
const std::map<uint32_t, std::string> nm_state_enum_id_to_string_map {
  { 0, "idle" },
  { 1, "add node" },
  { 2, "remove node" },
  { 3, "join network" },
  { 4, "leave network" },
  { 5, "network repair" },
  { 6, "network update" },
  { 7, "reset" },
  { 8, "scan mode" },
};

// String to enum map for NM_State
const std::map<std::string, uint32_t> nm_state_enum_string_to_id_map {
  { "idle", 0 },
  { "add node", 1 },
  { "remove node", 2 },
  { "join network", 3 },
  { "leave network", 4 },
  { "network repair", 5 },
  { "network update", 6 },
  { "reset", 7 },
  { "scan mode", 8 },
};

std::string nm_state_get_enum_value_name(
  uint32_t value)
{
  auto it = nm_state_enum_id_to_string_map.find(value);
  if (it != nm_state_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t nm_state_get_enum_value_number(const std::string &str)
{
  auto it = nm_state_enum_string_to_id_map.find(str);
  if (it != nm_state_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for NodeStateNetworkStatus
const std::map<uint32_t, std::string> node_state_network_status_enum_id_to_string_map {
  { 0, "Online functional" },
  { 1, "Online interviewing" },
  { 2, "Online non-functional" },
  { 3, "Unavailable" },
  { 4, "Offline" },
  { 5, "Commisioning Started" },
};

// String to enum map for NodeStateNetworkStatus
const std::map<std::string, uint32_t> node_state_network_status_enum_string_to_id_map {
  { "Online functional", 0 },
  { "Online interviewing", 1 },
  { "Online non-functional", 2 },
  { "Unavailable", 3 },
  { "Offline", 4 },
  { "Commisioning Started", 5 },
};

std::string node_state_network_status_get_enum_value_name(
  uint32_t value)
{
  auto it = node_state_network_status_enum_id_to_string_map.find(value);
  if (it != node_state_network_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t node_state_network_status_get_enum_value_number(const std::string &str)
{
  auto it = node_state_network_status_enum_string_to_id_map.find(str);
  if (it != node_state_network_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for NodeStateSecurity
const std::map<uint32_t, std::string> node_state_security_enum_id_to_string_map {
  { 0, "None" },
  { 1, "Z-Wave S0" },
  { 2, "Z-Wave S2 Unauthenticated" },
  { 3, "Z-Wave S2 Authenticated" },
  { 4, "Z-Wave S2 Access Control" },
  { 5, "Zigbee Z3" },
  { 6, "Matter" },
};

// String to enum map for NodeStateSecurity
const std::map<std::string, uint32_t> node_state_security_enum_string_to_id_map {
  { "None", 0 },
  { "Z-Wave S0", 1 },
  { "Z-Wave S2 Unauthenticated", 2 },
  { "Z-Wave S2 Authenticated", 3 },
  { "Z-Wave S2 Access Control", 4 },
  { "Zigbee Z3", 5 },
  { "Matter", 6 },
};

std::string node_state_security_get_enum_value_name(
  uint32_t value)
{
  auto it = node_state_security_enum_id_to_string_map.find(value);
  if (it != node_state_security_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t node_state_security_get_enum_value_number(const std::string &str)
{
  auto it = node_state_security_enum_string_to_id_map.find(str);
  if (it != node_state_security_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for OTADeviceSpecificImageType
const std::map<uint32_t, std::string> ota_device_specific_image_type_enum_id_to_string_map {
  { 65472, "ClientSecurityCredentials" },
  { 65473, "ClientConfiguration" },
  { 65474, "ServerLog" },
  { 65475, "Picture" },
};

// String to enum map for OTADeviceSpecificImageType
const std::map<std::string, uint32_t> ota_device_specific_image_type_enum_string_to_id_map {
  { "ClientSecurityCredentials", 65472 },
  { "ClientConfiguration", 65473 },
  { "ServerLog", 65474 },
  { "Picture", 65475 },
};

std::string ota_device_specific_image_type_get_enum_value_name(
  uint32_t value)
{
  auto it = ota_device_specific_image_type_enum_id_to_string_map.find(value);
  if (it != ota_device_specific_image_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t ota_device_specific_image_type_get_enum_value_number(const std::string &str)
{
  auto it = ota_device_specific_image_type_enum_string_to_id_map.find(str);
  if (it != ota_device_specific_image_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for OTAUpgradeImageUpgradeStatus
const std::map<uint32_t, std::string> ota_upgrade_image_upgrade_status_enum_id_to_string_map {
  { 0, "Normal" },
  { 1, "DownloadInProgress" },
  { 2, "DownloadComplete" },
  { 3, "WaitingToUpgrade" },
  { 4, "CountDown" },
  { 5, "WaitForMore" },
  { 6, "WaitingToUpgradeViaExternalEvent" },
};

// String to enum map for OTAUpgradeImageUpgradeStatus
const std::map<std::string, uint32_t> ota_upgrade_image_upgrade_status_enum_string_to_id_map {
  { "Normal", 0 },
  { "DownloadInProgress", 1 },
  { "DownloadComplete", 2 },
  { "WaitingToUpgrade", 3 },
  { "CountDown", 4 },
  { "WaitForMore", 5 },
  { "WaitingToUpgradeViaExternalEvent", 6 },
};

std::string ota_upgrade_image_upgrade_status_get_enum_value_name(
  uint32_t value)
{
  auto it = ota_upgrade_image_upgrade_status_enum_id_to_string_map.find(value);
  if (it != ota_upgrade_image_upgrade_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t ota_upgrade_image_upgrade_status_get_enum_value_number(const std::string &str)
{
  auto it = ota_upgrade_image_upgrade_status_enum_string_to_id_map.find(str);
  if (it != ota_upgrade_image_upgrade_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for OTAUpgradeUpgradeActivationPolicy
const std::map<uint32_t, std::string> ota_upgrade_upgrade_activation_policy_enum_id_to_string_map {
  { 0, "OTAServerActivationAllowed" },
  { 1, "OutOfBandActivationOnly" },
};

// String to enum map for OTAUpgradeUpgradeActivationPolicy
const std::map<std::string, uint32_t> ota_upgrade_upgrade_activation_policy_enum_string_to_id_map {
  { "OTAServerActivationAllowed", 0 },
  { "OutOfBandActivationOnly", 1 },
};

std::string ota_upgrade_upgrade_activation_policy_get_enum_value_name(
  uint32_t value)
{
  auto it = ota_upgrade_upgrade_activation_policy_enum_id_to_string_map.find(value);
  if (it != ota_upgrade_upgrade_activation_policy_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t ota_upgrade_upgrade_activation_policy_get_enum_value_number(const std::string &str)
{
  auto it = ota_upgrade_upgrade_activation_policy_enum_string_to_id_map.find(str);
  if (it != ota_upgrade_upgrade_activation_policy_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for OTAUpgradeUpgradeTimeoutPolicy
const std::map<uint32_t, std::string> ota_upgrade_upgrade_timeout_policy_enum_id_to_string_map {
  { 0, "ApplyUpgradeAfterTimeout" },
  { 1, "DoNotApplyUpgradeAfterTimeout" },
};

// String to enum map for OTAUpgradeUpgradeTimeoutPolicy
const std::map<std::string, uint32_t> ota_upgrade_upgrade_timeout_policy_enum_string_to_id_map {
  { "ApplyUpgradeAfterTimeout", 0 },
  { "DoNotApplyUpgradeAfterTimeout", 1 },
};

std::string ota_upgrade_upgrade_timeout_policy_get_enum_value_name(
  uint32_t value)
{
  auto it = ota_upgrade_upgrade_timeout_policy_enum_id_to_string_map.find(value);
  if (it != ota_upgrade_upgrade_timeout_policy_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t ota_upgrade_upgrade_timeout_policy_get_enum_value_number(const std::string &str)
{
  auto it = ota_upgrade_upgrade_timeout_policy_enum_string_to_id_map.find(str);
  if (it != ota_upgrade_upgrade_timeout_policy_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for OccupancySensingOccupancySensorType
const std::map<uint32_t, std::string> occupancy_sensing_occupancy_sensor_type_enum_id_to_string_map {
  { 0, "PIR" },
  { 1, "Ultrasonic" },
  { 2, "PIRAndUltrasonic" },
  { 3, "PhysicalContact" },
};

// String to enum map for OccupancySensingOccupancySensorType
const std::map<std::string, uint32_t> occupancy_sensing_occupancy_sensor_type_enum_string_to_id_map {
  { "PIR", 0 },
  { "Ultrasonic", 1 },
  { "PIRAndUltrasonic", 2 },
  { "PhysicalContact", 3 },
};

std::string occupancy_sensing_occupancy_sensor_type_get_enum_value_name(
  uint32_t value)
{
  auto it = occupancy_sensing_occupancy_sensor_type_enum_id_to_string_map.find(value);
  if (it != occupancy_sensing_occupancy_sensor_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t occupancy_sensing_occupancy_sensor_type_get_enum_value_number(const std::string &str)
{
  auto it = occupancy_sensing_occupancy_sensor_type_enum_string_to_id_map.find(str);
  if (it != occupancy_sensing_occupancy_sensor_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for OffWithEffectEffectIdentifier
const std::map<uint32_t, std::string> off_with_effect_effect_identifier_enum_id_to_string_map {
  { 0, "DelayedAllOff" },
  { 1, "DyingLight" },
};

// String to enum map for OffWithEffectEffectIdentifier
const std::map<std::string, uint32_t> off_with_effect_effect_identifier_enum_string_to_id_map {
  { "DelayedAllOff", 0 },
  { "DyingLight", 1 },
};

std::string off_with_effect_effect_identifier_get_enum_value_name(
  uint32_t value)
{
  auto it = off_with_effect_effect_identifier_enum_id_to_string_map.find(value);
  if (it != off_with_effect_effect_identifier_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t off_with_effect_effect_identifier_get_enum_value_number(const std::string &str)
{
  auto it = off_with_effect_effect_identifier_enum_string_to_id_map.find(str);
  if (it != off_with_effect_effect_identifier_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for OnOffStartUpOnOff
const std::map<uint32_t, std::string> on_off_start_up_on_off_enum_id_to_string_map {
  { 0, "SetOnOffTo0" },
  { 1, "SetOnOffTo1" },
  { 2, "TogglePreviousOnOff" },
  { 255, "SetPreviousOnOff" },
};

// String to enum map for OnOffStartUpOnOff
const std::map<std::string, uint32_t> on_off_start_up_on_off_enum_string_to_id_map {
  { "SetOnOffTo0", 0 },
  { "SetOnOffTo1", 1 },
  { "TogglePreviousOnOff", 2 },
  { "SetPreviousOnOff", 255 },
};

std::string on_off_start_up_on_off_get_enum_value_name(
  uint32_t value)
{
  auto it = on_off_start_up_on_off_enum_id_to_string_map.find(value);
  if (it != on_off_start_up_on_off_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t on_off_start_up_on_off_get_enum_value_number(const std::string &str)
{
  auto it = on_off_start_up_on_off_enum_string_to_id_map.find(str);
  if (it != on_off_start_up_on_off_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for OperatingEventNotificationOperationEventCode
const std::map<uint32_t, std::string> operating_event_notification_operation_event_code_enum_id_to_string_map {
  { 0, "UnknownOrMS" },
  { 1, "Lock" },
  { 2, "Unlock" },
  { 3, "LockFailureInvalidPINOrID" },
  { 4, "LockFailureInvalidSchedule" },
  { 5, "UnlockFailureInvalidPINOrID" },
  { 6, "UnlockFailureInvalidSchedule" },
  { 7, "OneTouchLock" },
  { 8, "KeyLock" },
  { 9, "KeyUnlock" },
  { 10, "AutoLock" },
  { 11, "ScheduleLock" },
  { 12, "ScheduleUnlock" },
  { 13, "ManualLock" },
  { 14, "ManualUnlock" },
  { 14, "NonAccessUserOperationalEvent" },
};

// String to enum map for OperatingEventNotificationOperationEventCode
const std::map<std::string, uint32_t> operating_event_notification_operation_event_code_enum_string_to_id_map {
  { "UnknownOrMS", 0 },
  { "Lock", 1 },
  { "Unlock", 2 },
  { "LockFailureInvalidPINOrID", 3 },
  { "LockFailureInvalidSchedule", 4 },
  { "UnlockFailureInvalidPINOrID", 5 },
  { "UnlockFailureInvalidSchedule", 6 },
  { "OneTouchLock", 7 },
  { "KeyLock", 8 },
  { "KeyUnlock", 9 },
  { "AutoLock", 10 },
  { "ScheduleLock", 11 },
  { "ScheduleUnlock", 12 },
  { "ManualLock", 13 },
  { "ManualUnlock", 14 },
  { "NonAccessUserOperationalEvent", 14 },
};

std::string operating_event_notification_operation_event_code_get_enum_value_name(
  uint32_t value)
{
  auto it = operating_event_notification_operation_event_code_enum_id_to_string_map.find(value);
  if (it != operating_event_notification_operation_event_code_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t operating_event_notification_operation_event_code_get_enum_value_number(const std::string &str)
{
  auto it = operating_event_notification_operation_event_code_enum_string_to_id_map.find(str);
  if (it != operating_event_notification_operation_event_code_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for OptionsStartupMode
const std::map<uint32_t, std::string> options_startup_mode_enum_id_to_string_map {
  { 0, "RestartUsingStartupParameters" },
  { 1, "RestartUsingCurrentState" },
};

// String to enum map for OptionsStartupMode
const std::map<std::string, uint32_t> options_startup_mode_enum_string_to_id_map {
  { "RestartUsingStartupParameters", 0 },
  { "RestartUsingCurrentState", 1 },
};

std::string options_startup_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = options_startup_mode_enum_id_to_string_map.find(value);
  if (it != options_startup_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t options_startup_mode_get_enum_value_number(const std::string &str)
{
  auto it = options_startup_mode_enum_string_to_id_map.find(str);
  if (it != options_startup_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ProfileIntervalPeriod
const std::map<uint32_t, std::string> profile_interval_period_enum_id_to_string_map {
  { 0, "Daily" },
  { 1, "60Minutes" },
  { 2, "30Minutes" },
  { 3, "15Minutes" },
  { 4, "10Minutes" },
  { 5, "7dot5Minutes" },
  { 6, "5Minutes" },
  { 7, "2dot5Minutes" },
};

// String to enum map for ProfileIntervalPeriod
const std::map<std::string, uint32_t> profile_interval_period_enum_string_to_id_map {
  { "Daily", 0 },
  { "60Minutes", 1 },
  { "30Minutes", 2 },
  { "15Minutes", 3 },
  { "10Minutes", 4 },
  { "7dot5Minutes", 5 },
  { "5Minutes", 6 },
  { "2dot5Minutes", 7 },
};

std::string profile_interval_period_get_enum_value_name(
  uint32_t value)
{
  auto it = profile_interval_period_enum_id_to_string_map.find(value);
  if (it != profile_interval_period_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t profile_interval_period_get_enum_value_number(const std::string &str)
{
  auto it = profile_interval_period_enum_string_to_id_map.find(str);
  if (it != profile_interval_period_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ProgrammingEventNotificationProgramEventCode
const std::map<uint32_t, std::string> programming_event_notification_program_event_code_enum_id_to_string_map {
  { 0, "UnknownOrMS" },
  { 1, "MasterCodeChanged" },
  { 2, "PINCodeAdded" },
  { 3, "PINCodeDeleted" },
  { 4, "PINCodeChanged" },
  { 5, "RFIDCodeAdded" },
  { 6, "RFIDCodeDeleted" },
};

// String to enum map for ProgrammingEventNotificationProgramEventCode
const std::map<std::string, uint32_t> programming_event_notification_program_event_code_enum_string_to_id_map {
  { "UnknownOrMS", 0 },
  { "MasterCodeChanged", 1 },
  { "PINCodeAdded", 2 },
  { "PINCodeDeleted", 3 },
  { "PINCodeChanged", 4 },
  { "RFIDCodeAdded", 5 },
  { "RFIDCodeDeleted", 6 },
};

std::string programming_event_notification_program_event_code_get_enum_value_name(
  uint32_t value)
{
  auto it = programming_event_notification_program_event_code_enum_id_to_string_map.find(value);
  if (it != programming_event_notification_program_event_code_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t programming_event_notification_program_event_code_get_enum_value_number(const std::string &str)
{
  auto it = programming_event_notification_program_event_code_enum_string_to_id_map.find(str);
  if (it != programming_event_notification_program_event_code_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ProgrammingEventNotificationProgramEventSource
const std::map<uint32_t, std::string> programming_event_notification_program_event_source_enum_id_to_string_map {
  { 0, "Keypad" },
  { 1, "RF" },
  { 3, "RFID" },
  { 255, "Indeterminate" },
};

// String to enum map for ProgrammingEventNotificationProgramEventSource
const std::map<std::string, uint32_t> programming_event_notification_program_event_source_enum_string_to_id_map {
  { "Keypad", 0 },
  { "RF", 1 },
  { "RFID", 3 },
  { "Indeterminate", 255 },
};

std::string programming_event_notification_program_event_source_get_enum_value_name(
  uint32_t value)
{
  auto it = programming_event_notification_program_event_source_enum_id_to_string_map.find(value);
  if (it != programming_event_notification_program_event_source_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t programming_event_notification_program_event_source_get_enum_value_number(const std::string &str)
{
  auto it = programming_event_notification_program_event_source_enum_string_to_id_map.find(str);
  if (it != programming_event_notification_program_event_source_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for PumpControlMode
const std::map<uint32_t, std::string> pump_control_mode_enum_id_to_string_map {
  { 0, "ConstantSpeed" },
  { 1, "ConstantPressure" },
  { 2, "ProportionalPressure" },
  { 3, "ConstantFlow" },
  { 5, "ConstantTemperature" },
  { 7, "Automatic" },
};

// String to enum map for PumpControlMode
const std::map<std::string, uint32_t> pump_control_mode_enum_string_to_id_map {
  { "ConstantSpeed", 0 },
  { "ConstantPressure", 1 },
  { "ProportionalPressure", 2 },
  { "ConstantFlow", 3 },
  { "ConstantTemperature", 5 },
  { "Automatic", 7 },
};

std::string pump_control_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = pump_control_mode_enum_id_to_string_map.find(value);
  if (it != pump_control_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t pump_control_mode_get_enum_value_number(const std::string &str)
{
  auto it = pump_control_mode_enum_string_to_id_map.find(str);
  if (it != pump_control_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for PumpOperationMode
const std::map<uint32_t, std::string> pump_operation_mode_enum_id_to_string_map {
  { 0, "Normal" },
  { 1, "Minimum" },
  { 2, "Maximum" },
  { 3, "Local" },
};

// String to enum map for PumpOperationMode
const std::map<std::string, uint32_t> pump_operation_mode_enum_string_to_id_map {
  { "Normal", 0 },
  { "Minimum", 1 },
  { "Maximum", 2 },
  { "Local", 3 },
};

std::string pump_operation_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = pump_operation_mode_enum_id_to_string_map.find(value);
  if (it != pump_operation_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t pump_operation_mode_get_enum_value_number(const std::string &str)
{
  auto it = pump_operation_mode_enum_string_to_id_map.find(str);
  if (it != pump_operation_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for SHDCFGDirection
const std::map<uint32_t, std::string> shdcfg_direction_enum_id_to_string_map {
  { 0, "Closing" },
  { 1, "Opening" },
};

// String to enum map for SHDCFGDirection
const std::map<std::string, uint32_t> shdcfg_direction_enum_string_to_id_map {
  { "Closing", 0 },
  { "Opening", 1 },
};

std::string shdcfg_direction_get_enum_value_name(
  uint32_t value)
{
  auto it = shdcfg_direction_enum_id_to_string_map.find(value);
  if (it != shdcfg_direction_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t shdcfg_direction_get_enum_value_number(const std::string &str)
{
  auto it = shdcfg_direction_enum_string_to_id_map.find(str);
  if (it != shdcfg_direction_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ScaleType
const std::map<uint32_t, std::string> scale_type_enum_id_to_string_map {
  { 0, "Percentage" },
  { 1, "Absolute" },
};

// String to enum map for ScaleType
const std::map<std::string, uint32_t> scale_type_enum_string_to_id_map {
  { "Percentage", 0 },
  { "Absolute", 1 },
};

std::string scale_type_get_enum_value_name(
  uint32_t value)
{
  auto it = scale_type_enum_id_to_string_map.find(value);
  if (it != scale_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t scale_type_get_enum_value_number(const std::string &str)
{
  auto it = scale_type_enum_string_to_id_map.find(str);
  if (it != scale_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for SetpointRaiseOrLowerMode
const std::map<uint32_t, std::string> setpoint_raise_or_lower_mode_enum_id_to_string_map {
  { 0, "Heat" },
  { 1, "Cool" },
  { 2, "Both" },
};

// String to enum map for SetpointRaiseOrLowerMode
const std::map<std::string, uint32_t> setpoint_raise_or_lower_mode_enum_string_to_id_map {
  { "Heat", 0 },
  { "Cool", 1 },
  { "Both", 2 },
};

std::string setpoint_raise_or_lower_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = setpoint_raise_or_lower_mode_enum_id_to_string_map.find(value);
  if (it != setpoint_raise_or_lower_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t setpoint_raise_or_lower_mode_get_enum_value_number(const std::string &str)
{
  auto it = setpoint_raise_or_lower_mode_enum_string_to_id_map.find(str);
  if (it != setpoint_raise_or_lower_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for SetpointType
const std::map<uint32_t, std::string> setpoint_type_enum_id_to_string_map {
  { 1, "Humidifier" },
  { 2, "Dehumidifier" },
  { 3, "Auto" },
};

// String to enum map for SetpointType
const std::map<std::string, uint32_t> setpoint_type_enum_string_to_id_map {
  { "Humidifier", 1 },
  { "Dehumidifier", 2 },
  { "Auto", 3 },
};

std::string setpoint_type_get_enum_value_name(
  uint32_t value)
{
  auto it = setpoint_type_enum_id_to_string_map.find(value);
  if (it != setpoint_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t setpoint_type_get_enum_value_number(const std::string &str)
{
  auto it = setpoint_type_enum_string_to_id_map.find(str);
  if (it != setpoint_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ShadeConfigurationMode
const std::map<uint32_t, std::string> shade_configuration_mode_enum_id_to_string_map {
  { 0, "Normal" },
  { 1, "Configure" },
};

// String to enum map for ShadeConfigurationMode
const std::map<std::string, uint32_t> shade_configuration_mode_enum_string_to_id_map {
  { "Normal", 0 },
  { "Configure", 1 },
};

std::string shade_configuration_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = shade_configuration_mode_enum_id_to_string_map.find(value);
  if (it != shade_configuration_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t shade_configuration_mode_get_enum_value_number(const std::string &str)
{
  auto it = shade_configuration_mode_enum_string_to_id_map.find(str);
  if (it != shade_configuration_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for SirenConfigurationStrobe
const std::map<uint32_t, std::string> siren_configuration_strobe_enum_id_to_string_map {
  { 0, "NoStrobe" },
  { 1, "UseStrobe" },
};

// String to enum map for SirenConfigurationStrobe
const std::map<std::string, uint32_t> siren_configuration_strobe_enum_string_to_id_map {
  { "NoStrobe", 0 },
  { "UseStrobe", 1 },
};

std::string siren_configuration_strobe_get_enum_value_name(
  uint32_t value)
{
  auto it = siren_configuration_strobe_enum_id_to_string_map.find(value);
  if (it != siren_configuration_strobe_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t siren_configuration_strobe_get_enum_value_number(const std::string &str)
{
  auto it = siren_configuration_strobe_enum_string_to_id_map.find(str);
  if (it != siren_configuration_strobe_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for SirenConfigurationWarningMode
const std::map<uint32_t, std::string> siren_configuration_warning_mode_enum_id_to_string_map {
  { 0, "Stop" },
  { 1, "Burgler" },
  { 2, "Fire" },
  { 3, "Emergency" },
  { 4, "PolicePanic" },
  { 5, "FirePanic" },
  { 6, "EmergencyPanic" },
};

// String to enum map for SirenConfigurationWarningMode
const std::map<std::string, uint32_t> siren_configuration_warning_mode_enum_string_to_id_map {
  { "Stop", 0 },
  { "Burgler", 1 },
  { "Fire", 2 },
  { "Emergency", 3 },
  { "PolicePanic", 4 },
  { "FirePanic", 5 },
  { "EmergencyPanic", 6 },
};

std::string siren_configuration_warning_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = siren_configuration_warning_mode_enum_id_to_string_map.find(value);
  if (it != siren_configuration_warning_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t siren_configuration_warning_mode_get_enum_value_number(const std::string &str)
{
  auto it = siren_configuration_warning_mode_enum_string_to_id_map.find(str);
  if (it != siren_configuration_warning_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for SquawkConfigurationSquawkMode
const std::map<uint32_t, std::string> squawk_configuration_squawk_mode_enum_id_to_string_map {
  { 0, "SoundForSystemIsArmed" },
  { 1, "SoundForSystemIsDisarmed" },
};

// String to enum map for SquawkConfigurationSquawkMode
const std::map<std::string, uint32_t> squawk_configuration_squawk_mode_enum_string_to_id_map {
  { "SoundForSystemIsArmed", 0 },
  { "SoundForSystemIsDisarmed", 1 },
};

std::string squawk_configuration_squawk_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = squawk_configuration_squawk_mode_enum_id_to_string_map.find(value);
  if (it != squawk_configuration_squawk_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t squawk_configuration_squawk_mode_get_enum_value_number(const std::string &str)
{
  auto it = squawk_configuration_squawk_mode_enum_string_to_id_map.find(str);
  if (it != squawk_configuration_squawk_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatACCapacityFormat
const std::map<uint32_t, std::string> thermostat_ac_capacity_format_enum_id_to_string_map {
  { 0, "BTUh" },
};

// String to enum map for ThermostatACCapacityFormat
const std::map<std::string, uint32_t> thermostat_ac_capacity_format_enum_string_to_id_map {
  { "BTUh", 0 },
};

std::string thermostat_ac_capacity_format_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_ac_capacity_format_enum_id_to_string_map.find(value);
  if (it != thermostat_ac_capacity_format_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_ac_capacity_format_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_ac_capacity_format_enum_string_to_id_map.find(str);
  if (it != thermostat_ac_capacity_format_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatACCompressorType
const std::map<uint32_t, std::string> thermostat_ac_compressor_type_enum_id_to_string_map {
  { 1, "T1" },
  { 2, "T2" },
  { 3, "T3" },
};

// String to enum map for ThermostatACCompressorType
const std::map<std::string, uint32_t> thermostat_ac_compressor_type_enum_string_to_id_map {
  { "T1", 1 },
  { "T2", 2 },
  { "T3", 3 },
};

std::string thermostat_ac_compressor_type_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_ac_compressor_type_enum_id_to_string_map.find(value);
  if (it != thermostat_ac_compressor_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_ac_compressor_type_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_ac_compressor_type_enum_string_to_id_map.find(str);
  if (it != thermostat_ac_compressor_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatACLouverPosition
const std::map<uint32_t, std::string> thermostat_ac_louver_position_enum_id_to_string_map {
  { 1, "FullyClosed" },
  { 2, "FullyOpen" },
  { 3, "QuarterOpen" },
  { 4, "HalfOpen" },
  { 5, "ThreeQuartersOpen" },
};

// String to enum map for ThermostatACLouverPosition
const std::map<std::string, uint32_t> thermostat_ac_louver_position_enum_string_to_id_map {
  { "FullyClosed", 1 },
  { "FullyOpen", 2 },
  { "QuarterOpen", 3 },
  { "HalfOpen", 4 },
  { "ThreeQuartersOpen", 5 },
};

std::string thermostat_ac_louver_position_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_ac_louver_position_enum_id_to_string_map.find(value);
  if (it != thermostat_ac_louver_position_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_ac_louver_position_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_ac_louver_position_enum_string_to_id_map.find(str);
  if (it != thermostat_ac_louver_position_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatACRefrigerantType
const std::map<uint32_t, std::string> thermostat_ac_refrigerant_type_enum_id_to_string_map {
  { 1, "R22" },
  { 2, "R410a" },
  { 3, "R407c" },
};

// String to enum map for ThermostatACRefrigerantType
const std::map<std::string, uint32_t> thermostat_ac_refrigerant_type_enum_string_to_id_map {
  { "R22", 1 },
  { "R410a", 2 },
  { "R407c", 3 },
};

std::string thermostat_ac_refrigerant_type_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_ac_refrigerant_type_enum_id_to_string_map.find(value);
  if (it != thermostat_ac_refrigerant_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_ac_refrigerant_type_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_ac_refrigerant_type_enum_string_to_id_map.find(str);
  if (it != thermostat_ac_refrigerant_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatACType
const std::map<uint32_t, std::string> thermostat_ac_type_enum_id_to_string_map {
  { 1, "CoolingAndFixedSpeed" },
  { 2, "HeatPumpAndFixedSpeed" },
  { 3, "CoolingAndInverter" },
  { 4, "HeatPumpAndInverter" },
};

// String to enum map for ThermostatACType
const std::map<std::string, uint32_t> thermostat_ac_type_enum_string_to_id_map {
  { "CoolingAndFixedSpeed", 1 },
  { "HeatPumpAndFixedSpeed", 2 },
  { "CoolingAndInverter", 3 },
  { "HeatPumpAndInverter", 4 },
};

std::string thermostat_ac_type_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_ac_type_enum_id_to_string_map.find(value);
  if (it != thermostat_ac_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_ac_type_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_ac_type_enum_string_to_id_map.find(str);
  if (it != thermostat_ac_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatControlSequenceOfOperation
const std::map<uint32_t, std::string> thermostat_control_sequence_of_operation_enum_id_to_string_map {
  { 0, "CoolingOnly" },
  { 1, "CoolingWithReheat" },
  { 2, "HeatingOnly" },
  { 3, "HeatingWithReheat" },
  { 4, "CoolingAndHeating4Pipes" },
  { 5, "CoolingAndHeating4PipesWithReheat" },
};

// String to enum map for ThermostatControlSequenceOfOperation
const std::map<std::string, uint32_t> thermostat_control_sequence_of_operation_enum_string_to_id_map {
  { "CoolingOnly", 0 },
  { "CoolingWithReheat", 1 },
  { "HeatingOnly", 2 },
  { "HeatingWithReheat", 3 },
  { "CoolingAndHeating4Pipes", 4 },
  { "CoolingAndHeating4PipesWithReheat", 5 },
};

std::string thermostat_control_sequence_of_operation_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_control_sequence_of_operation_enum_id_to_string_map.find(value);
  if (it != thermostat_control_sequence_of_operation_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_control_sequence_of_operation_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_control_sequence_of_operation_enum_string_to_id_map.find(str);
  if (it != thermostat_control_sequence_of_operation_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatProgrammingOperationModeProgrammingMode
const std::map<uint32_t, std::string> thermostat_programming_operation_mode_programming_mode_enum_id_to_string_map {
  { 0, "SimpleOrSetpoint" },
  { 1, "Schedule" },
};

// String to enum map for ThermostatProgrammingOperationModeProgrammingMode
const std::map<std::string, uint32_t> thermostat_programming_operation_mode_programming_mode_enum_string_to_id_map {
  { "SimpleOrSetpoint", 0 },
  { "Schedule", 1 },
};

std::string thermostat_programming_operation_mode_programming_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_programming_operation_mode_programming_mode_enum_id_to_string_map.find(value);
  if (it != thermostat_programming_operation_mode_programming_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_programming_operation_mode_programming_mode_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_programming_operation_mode_programming_mode_enum_string_to_id_map.find(str);
  if (it != thermostat_programming_operation_mode_programming_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatSetpointChangeSource
const std::map<uint32_t, std::string> thermostat_setpoint_change_source_enum_id_to_string_map {
  { 0, "Manual" },
  { 1, "ScheduleOrInternalProgramming" },
  { 2, "External" },
};

// String to enum map for ThermostatSetpointChangeSource
const std::map<std::string, uint32_t> thermostat_setpoint_change_source_enum_string_to_id_map {
  { "Manual", 0 },
  { "ScheduleOrInternalProgramming", 1 },
  { "External", 2 },
};

std::string thermostat_setpoint_change_source_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_setpoint_change_source_enum_id_to_string_map.find(value);
  if (it != thermostat_setpoint_change_source_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_setpoint_change_source_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_setpoint_change_source_enum_string_to_id_map.find(str);
  if (it != thermostat_setpoint_change_source_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatStartOfWeek
const std::map<uint32_t, std::string> thermostat_start_of_week_enum_id_to_string_map {
  { 0, "Sunday" },
  { 1, "Monday" },
  { 2, "Tuesday" },
  { 3, "Wednesday" },
  { 4, "Thursday" },
  { 5, "Friday" },
  { 6, "Saturday" },
};

// String to enum map for ThermostatStartOfWeek
const std::map<std::string, uint32_t> thermostat_start_of_week_enum_string_to_id_map {
  { "Sunday", 0 },
  { "Monday", 1 },
  { "Tuesday", 2 },
  { "Wednesday", 3 },
  { "Thursday", 4 },
  { "Friday", 5 },
  { "Saturday", 6 },
};

std::string thermostat_start_of_week_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_start_of_week_enum_id_to_string_map.find(value);
  if (it != thermostat_start_of_week_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_start_of_week_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_start_of_week_enum_string_to_id_map.find(str);
  if (it != thermostat_start_of_week_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatSystemMode
const std::map<uint32_t, std::string> thermostat_system_mode_enum_id_to_string_map {
  { 0, "Off" },
  { 1, "Auto" },
  { 3, "Cool" },
  { 4, "Heat" },
  { 5, "EmergencyHeating" },
  { 6, "Precooling" },
  { 7, "FanOnly" },
  { 8, "Dry" },
  { 9, "Sleep" },
};

// String to enum map for ThermostatSystemMode
const std::map<std::string, uint32_t> thermostat_system_mode_enum_string_to_id_map {
  { "Off", 0 },
  { "Auto", 1 },
  { "Cool", 3 },
  { "Heat", 4 },
  { "EmergencyHeating", 5 },
  { "Precooling", 6 },
  { "FanOnly", 7 },
  { "Dry", 8 },
  { "Sleep", 9 },
};

std::string thermostat_system_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_system_mode_enum_id_to_string_map.find(value);
  if (it != thermostat_system_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_system_mode_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_system_mode_enum_string_to_id_map.find(str);
  if (it != thermostat_system_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatTemperatureSetpointHold
const std::map<uint32_t, std::string> thermostat_temperature_setpoint_hold_enum_id_to_string_map {
  { 0, "SetpointHoldOff" },
  { 1, "SetpointHoldOn" },
};

// String to enum map for ThermostatTemperatureSetpointHold
const std::map<std::string, uint32_t> thermostat_temperature_setpoint_hold_enum_string_to_id_map {
  { "SetpointHoldOff", 0 },
  { "SetpointHoldOn", 1 },
};

std::string thermostat_temperature_setpoint_hold_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_temperature_setpoint_hold_enum_id_to_string_map.find(value);
  if (it != thermostat_temperature_setpoint_hold_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_temperature_setpoint_hold_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_temperature_setpoint_hold_enum_string_to_id_map.find(str);
  if (it != thermostat_temperature_setpoint_hold_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatThermostatRunningMode
const std::map<uint32_t, std::string> thermostat_thermostat_running_mode_enum_id_to_string_map {
  { 0, "Off" },
  { 3, "Cool" },
  { 4, "Heat" },
};

// String to enum map for ThermostatThermostatRunningMode
const std::map<std::string, uint32_t> thermostat_thermostat_running_mode_enum_string_to_id_map {
  { "Off", 0 },
  { "Cool", 3 },
  { "Heat", 4 },
};

std::string thermostat_thermostat_running_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_thermostat_running_mode_enum_id_to_string_map.find(value);
  if (it != thermostat_thermostat_running_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_thermostat_running_mode_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_thermostat_running_mode_enum_string_to_id_map.find(str);
  if (it != thermostat_thermostat_running_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatUserInterfaceConfigurationKeypadLockout
const std::map<uint32_t, std::string> thermostat_user_interface_configuration_keypad_lockout_enum_id_to_string_map {
  { 0, "None" },
  { 1, "Level1" },
  { 2, "Level2" },
  { 3, "Level3" },
  { 4, "Level4" },
  { 5, "Level5" },
};

// String to enum map for ThermostatUserInterfaceConfigurationKeypadLockout
const std::map<std::string, uint32_t> thermostat_user_interface_configuration_keypad_lockout_enum_string_to_id_map {
  { "None", 0 },
  { "Level1", 1 },
  { "Level2", 2 },
  { "Level3", 3 },
  { "Level4", 4 },
  { "Level5", 5 },
};

std::string thermostat_user_interface_configuration_keypad_lockout_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_user_interface_configuration_keypad_lockout_enum_id_to_string_map.find(value);
  if (it != thermostat_user_interface_configuration_keypad_lockout_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_user_interface_configuration_keypad_lockout_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_user_interface_configuration_keypad_lockout_enum_string_to_id_map.find(str);
  if (it != thermostat_user_interface_configuration_keypad_lockout_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatUserInterfaceConfigurationScheduleProgrammingVisibility
const std::map<uint32_t, std::string> thermostat_user_interface_configuration_schedule_programming_visibility_enum_id_to_string_map {
  { 0, "LocalEnabled" },
  { 1, "LocalDisabled" },
};

// String to enum map for ThermostatUserInterfaceConfigurationScheduleProgrammingVisibility
const std::map<std::string, uint32_t> thermostat_user_interface_configuration_schedule_programming_visibility_enum_string_to_id_map {
  { "LocalEnabled", 0 },
  { "LocalDisabled", 1 },
};

std::string thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_user_interface_configuration_schedule_programming_visibility_enum_id_to_string_map.find(value);
  if (it != thermostat_user_interface_configuration_schedule_programming_visibility_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_user_interface_configuration_schedule_programming_visibility_enum_string_to_id_map.find(str);
  if (it != thermostat_user_interface_configuration_schedule_programming_visibility_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ThermostatUserInterfaceConfigurationTemperatureDisplayMode
const std::map<uint32_t, std::string> thermostat_user_interface_configuration_temperature_display_mode_enum_id_to_string_map {
  { 0, "Celsius" },
  { 1, "Fahrenheit" },
};

// String to enum map for ThermostatUserInterfaceConfigurationTemperatureDisplayMode
const std::map<std::string, uint32_t> thermostat_user_interface_configuration_temperature_display_mode_enum_string_to_id_map {
  { "Celsius", 0 },
  { "Fahrenheit", 1 },
};

std::string thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = thermostat_user_interface_configuration_temperature_display_mode_enum_id_to_string_map.find(value);
  if (it != thermostat_user_interface_configuration_temperature_display_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_number(const std::string &str)
{
  auto it = thermostat_user_interface_configuration_temperature_display_mode_enum_string_to_id_map.find(str);
  if (it != thermostat_user_interface_configuration_temperature_display_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for TriggerEffectEffectIdentifier
const std::map<uint32_t, std::string> trigger_effect_effect_identifier_enum_id_to_string_map {
  { 0, "Blink" },
  { 1, "Breathe" },
  { 2, "Okay" },
  { 11, "ChannelChange" },
  { 254, "FinishEffect" },
  { 255, "StopEffect" },
};

// String to enum map for TriggerEffectEffectIdentifier
const std::map<std::string, uint32_t> trigger_effect_effect_identifier_enum_string_to_id_map {
  { "Blink", 0 },
  { "Breathe", 1 },
  { "Okay", 2 },
  { "ChannelChange", 11 },
  { "FinishEffect", 254 },
  { "StopEffect", 255 },
};

std::string trigger_effect_effect_identifier_get_enum_value_name(
  uint32_t value)
{
  auto it = trigger_effect_effect_identifier_enum_id_to_string_map.find(value);
  if (it != trigger_effect_effect_identifier_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t trigger_effect_effect_identifier_get_enum_value_number(const std::string &str)
{
  auto it = trigger_effect_effect_identifier_enum_string_to_id_map.find(str);
  if (it != trigger_effect_effect_identifier_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for TriggerEffectEffectVariant
const std::map<uint32_t, std::string> trigger_effect_effect_variant_enum_id_to_string_map {
  { 0, "Default" },
};

// String to enum map for TriggerEffectEffectVariant
const std::map<std::string, uint32_t> trigger_effect_effect_variant_enum_string_to_id_map {
  { "Default", 0 },
};

std::string trigger_effect_effect_variant_get_enum_value_name(
  uint32_t value)
{
  auto it = trigger_effect_effect_variant_enum_id_to_string_map.find(value);
  if (it != trigger_effect_effect_variant_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t trigger_effect_effect_variant_get_enum_value_number(const std::string &str)
{
  auto it = trigger_effect_effect_variant_enum_string_to_id_map.find(str);
  if (it != trigger_effect_effect_variant_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for TxReportTransmissionSpeed
const std::map<uint32_t, std::string> tx_report_transmission_speed_enum_id_to_string_map {
  { 0, "Z-Wave-9600-bits-per-second" },
  { 1, "Z-Wave-40-kbits-per-second" },
  { 2, "Z-Wave-100-kbits-per-second" },
  { 3, "Z-WaveLongRange-100-kbits-per-second" },
  { 254, "Other" },
  { 255, "Unknown" },
};

// String to enum map for TxReportTransmissionSpeed
const std::map<std::string, uint32_t> tx_report_transmission_speed_enum_string_to_id_map {
  { "Z-Wave-9600-bits-per-second", 0 },
  { "Z-Wave-40-kbits-per-second", 1 },
  { "Z-Wave-100-kbits-per-second", 2 },
  { "Z-WaveLongRange-100-kbits-per-second", 3 },
  { "Other", 254 },
  { "Unknown", 255 },
};

std::string tx_report_transmission_speed_get_enum_value_name(
  uint32_t value)
{
  auto it = tx_report_transmission_speed_enum_id_to_string_map.find(value);
  if (it != tx_report_transmission_speed_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t tx_report_transmission_speed_get_enum_value_number(const std::string &str)
{
  auto it = tx_report_transmission_speed_enum_string_to_id_map.find(str);
  if (it != tx_report_transmission_speed_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for UnifyHumidityControlCurrentState
const std::map<uint32_t, std::string> unify_humidity_control_current_state_enum_id_to_string_map {
  { 0, "Idle" },
  { 1, "Humidifying" },
  { 2, "Dehumidifying" },
};

// String to enum map for UnifyHumidityControlCurrentState
const std::map<std::string, uint32_t> unify_humidity_control_current_state_enum_string_to_id_map {
  { "Idle", 0 },
  { "Humidifying", 1 },
  { "Dehumidifying", 2 },
};

std::string unify_humidity_control_current_state_get_enum_value_name(
  uint32_t value)
{
  auto it = unify_humidity_control_current_state_enum_id_to_string_map.find(value);
  if (it != unify_humidity_control_current_state_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t unify_humidity_control_current_state_get_enum_value_number(const std::string &str)
{
  auto it = unify_humidity_control_current_state_enum_string_to_id_map.find(str);
  if (it != unify_humidity_control_current_state_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for UnifyThermostatOperatingState
const std::map<uint32_t, std::string> unify_thermostat_operating_state_enum_id_to_string_map {
  { 0, "Off" },
  { 1, "Heating" },
  { 2, "Cooling" },
  { 3, "FanOnly" },
  { 4, "PendingHeat" },
  { 5, "PendingCool" },
  { 6, "Vent/Economizer" },
  { 7, "AuxHeating" },
  { 8, "2ndStageHeating" },
  { 9, "2ndStageCooling" },
  { 10, "2ndStageAuxHeat" },
  { 11, "3rdStageAuxHeat" },
};

// String to enum map for UnifyThermostatOperatingState
const std::map<std::string, uint32_t> unify_thermostat_operating_state_enum_string_to_id_map {
  { "Off", 0 },
  { "Heating", 1 },
  { "Cooling", 2 },
  { "FanOnly", 3 },
  { "PendingHeat", 4 },
  { "PendingCool", 5 },
  { "Vent/Economizer", 6 },
  { "AuxHeating", 7 },
  { "2ndStageHeating", 8 },
  { "2ndStageCooling", 9 },
  { "2ndStageAuxHeat", 10 },
  { "3rdStageAuxHeat", 11 },
};

std::string unify_thermostat_operating_state_get_enum_value_name(
  uint32_t value)
{
  auto it = unify_thermostat_operating_state_enum_id_to_string_map.find(value);
  if (it != unify_thermostat_operating_state_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t unify_thermostat_operating_state_get_enum_value_number(const std::string &str)
{
  auto it = unify_thermostat_operating_state_enum_string_to_id_map.find(str);
  if (it != unify_thermostat_operating_state_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for UnifyThermostatThermostatMode
const std::map<uint32_t, std::string> unify_thermostat_thermostat_mode_enum_id_to_string_map {
  { 0, "Off" },
  { 1, "Heat" },
  { 2, "Cool" },
  { 3, "Auto" },
  { 4, "Auxiliary" },
  { 5, "Resume" },
  { 6, "Fan" },
  { 7, "Furnace" },
  { 8, "Dry" },
  { 9, "Moist" },
  { 10, "AutoChangeover" },
  { 11, "EnergyHeat" },
  { 12, "EnergyCool" },
  { 13, "Away" },
  { 15, "FullPower" },
  { 31, "ManufacturerSpecific" },
};

// String to enum map for UnifyThermostatThermostatMode
const std::map<std::string, uint32_t> unify_thermostat_thermostat_mode_enum_string_to_id_map {
  { "Off", 0 },
  { "Heat", 1 },
  { "Cool", 2 },
  { "Auto", 3 },
  { "Auxiliary", 4 },
  { "Resume", 5 },
  { "Fan", 6 },
  { "Furnace", 7 },
  { "Dry", 8 },
  { "Moist", 9 },
  { "AutoChangeover", 10 },
  { "EnergyHeat", 11 },
  { "EnergyCool", 12 },
  { "Away", 13 },
  { "FullPower", 15 },
  { "ManufacturerSpecific", 31 },
};

std::string unify_thermostat_thermostat_mode_get_enum_value_name(
  uint32_t value)
{
  auto it = unify_thermostat_thermostat_mode_enum_id_to_string_map.find(value);
  if (it != unify_thermostat_thermostat_mode_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t unify_thermostat_thermostat_mode_get_enum_value_number(const std::string &str)
{
  auto it = unify_thermostat_thermostat_mode_enum_string_to_id_map.find(str);
  if (it != unify_thermostat_thermostat_mode_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for UserModifierType
const std::map<uint32_t, std::string> user_modifier_type_enum_id_to_string_map {
  { 0, "DNE" },
  { 1, "Unknown" },
  { 2, "Z-Wave" },
  { 3, "Locally" },
  { 4, "MobileAppOrOtherIoT" },
};

// String to enum map for UserModifierType
const std::map<std::string, uint32_t> user_modifier_type_enum_string_to_id_map {
  { "DNE", 0 },
  { "Unknown", 1 },
  { "Z-Wave", 2 },
  { "Locally", 3 },
  { "MobileAppOrOtherIoT", 4 },
};

std::string user_modifier_type_get_enum_value_name(
  uint32_t value)
{
  auto it = user_modifier_type_enum_id_to_string_map.find(value);
  if (it != user_modifier_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t user_modifier_type_get_enum_value_number(const std::string &str)
{
  auto it = user_modifier_type_enum_string_to_id_map.find(str);
  if (it != user_modifier_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for UserNameEncodingType
const std::map<uint32_t, std::string> user_name_encoding_type_enum_id_to_string_map {
  { 0, "ASCII" },
  { 1, "OEMExtendedASCII" },
  { 2, "UTF-16" },
};

// String to enum map for UserNameEncodingType
const std::map<std::string, uint32_t> user_name_encoding_type_enum_string_to_id_map {
  { "ASCII", 0 },
  { "OEMExtendedASCII", 1 },
  { "UTF-16", 2 },
};

std::string user_name_encoding_type_get_enum_value_name(
  uint32_t value)
{
  auto it = user_name_encoding_type_enum_id_to_string_map.find(value);
  if (it != user_name_encoding_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t user_name_encoding_type_get_enum_value_number(const std::string &str)
{
  auto it = user_name_encoding_type_enum_string_to_id_map.find(str);
  if (it != user_name_encoding_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for UserTypeEnum
const std::map<uint32_t, std::string> user_type_enum_enum_id_to_string_map {
  { 0, "GeneralUser" },
  { 3, "ProgrammingUser" },
  { 4, "NonAccessUser" },
  { 5, "DuressUser" },
  { 6, "DisposableUser" },
  { 7, "ExpiringUser" },
  { 9, "RemoteOnlyUser" },
};

// String to enum map for UserTypeEnum
const std::map<std::string, uint32_t> user_type_enum_enum_string_to_id_map {
  { "GeneralUser", 0 },
  { "ProgrammingUser", 3 },
  { "NonAccessUser", 4 },
  { "DuressUser", 5 },
  { "DisposableUser", 6 },
  { "ExpiringUser", 7 },
  { "RemoteOnlyUser", 9 },
};

std::string user_type_enum_get_enum_value_name(
  uint32_t value)
{
  auto it = user_type_enum_enum_id_to_string_map.find(value);
  if (it != user_type_enum_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t user_type_enum_get_enum_value_number(const std::string &str)
{
  auto it = user_type_enum_enum_string_to_id_map.find(str);
  if (it != user_type_enum_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for WindowCoveringWindowCoveringType
const std::map<uint32_t, std::string> window_covering_window_covering_type_enum_id_to_string_map {
  { 0, "Rollershade" },
  { 1, "Rollershade2Motor" },
  { 2, "RollershadeExterior" },
  { 3, "RollershadeExterior2Motor" },
  { 4, "Drapery" },
  { 5, "Awning" },
  { 6, "Shutter" },
  { 7, "TiltBlindTiltOnly" },
  { 8, "TiltBlindLiftAndTilt" },
  { 9, "ProjectorScreen" },
};

// String to enum map for WindowCoveringWindowCoveringType
const std::map<std::string, uint32_t> window_covering_window_covering_type_enum_string_to_id_map {
  { "Rollershade", 0 },
  { "Rollershade2Motor", 1 },
  { "RollershadeExterior", 2 },
  { "RollershadeExterior2Motor", 3 },
  { "Drapery", 4 },
  { "Awning", 5 },
  { "Shutter", 6 },
  { "TiltBlindTiltOnly", 7 },
  { "TiltBlindLiftAndTilt", 8 },
  { "ProjectorScreen", 9 },
};

std::string window_covering_window_covering_type_get_enum_value_name(
  uint32_t value)
{
  auto it = window_covering_window_covering_type_enum_id_to_string_map.find(value);
  if (it != window_covering_window_covering_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t window_covering_window_covering_type_get_enum_value_number(const std::string &str)
{
  auto it = window_covering_window_covering_type_enum_string_to_id_map.find(str);
  if (it != window_covering_window_covering_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ZWaveFanModeEnum
const std::map<uint32_t, std::string> z_wave_fan_mode_enum_enum_id_to_string_map {
  { 0, "Auto" },
  { 1, "Low" },
  { 2, "AutoHigh" },
  { 3, "High" },
  { 4, "AutoMedium" },
  { 5, "Medium" },
  { 6, "Circulation" },
  { 7, "HumidityCirculation" },
  { 8, "LeftRight" },
  { 9, "UpDown" },
  { 10, "Quiet" },
  { 11, "ExternalCirculation" },
};

// String to enum map for ZWaveFanModeEnum
const std::map<std::string, uint32_t> z_wave_fan_mode_enum_enum_string_to_id_map {
  { "Auto", 0 },
  { "Low", 1 },
  { "AutoHigh", 2 },
  { "High", 3 },
  { "AutoMedium", 4 },
  { "Medium", 5 },
  { "Circulation", 6 },
  { "HumidityCirculation", 7 },
  { "LeftRight", 8 },
  { "UpDown", 9 },
  { "Quiet", 10 },
  { "ExternalCirculation", 11 },
};

std::string z_wave_fan_mode_enum_get_enum_value_name(
  uint32_t value)
{
  auto it = z_wave_fan_mode_enum_enum_id_to_string_map.find(value);
  if (it != z_wave_fan_mode_enum_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t z_wave_fan_mode_enum_get_enum_value_number(const std::string &str)
{
  auto it = z_wave_fan_mode_enum_enum_string_to_id_map.find(str);
  if (it != z_wave_fan_mode_enum_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ZWaveFanStateEnum
const std::map<uint32_t, std::string> z_wave_fan_state_enum_enum_id_to_string_map {
  { 0, "Idle" },
  { 1, "Running" },
  { 2, "RunningHigh" },
  { 3, "RunningMedium" },
  { 4, "Circulation" },
  { 5, "HumidityCirculation" },
  { 6, "RightLeftCirculation" },
  { 7, "UpDownCirculation" },
  { 8, "QuietCirculation" },
};

// String to enum map for ZWaveFanStateEnum
const std::map<std::string, uint32_t> z_wave_fan_state_enum_enum_string_to_id_map {
  { "Idle", 0 },
  { "Running", 1 },
  { "RunningHigh", 2 },
  { "RunningMedium", 3 },
  { "Circulation", 4 },
  { "HumidityCirculation", 5 },
  { "RightLeftCirculation", 6 },
  { "UpDownCirculation", 7 },
  { "QuietCirculation", 8 },
};

std::string z_wave_fan_state_enum_get_enum_value_name(
  uint32_t value)
{
  auto it = z_wave_fan_state_enum_enum_id_to_string_map.find(value);
  if (it != z_wave_fan_state_enum_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t z_wave_fan_state_enum_get_enum_value_number(const std::string &str)
{
  auto it = z_wave_fan_state_enum_enum_string_to_id_map.find(str);
  if (it != z_wave_fan_state_enum_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for ZoneEnrollResponseEnrollResponseCode
const std::map<uint32_t, std::string> zone_enroll_response_enroll_response_code_enum_id_to_string_map {
  { 0, "Success" },
  { 1, "NotSupported" },
  { 2, "NoEnrollPermit" },
  { 3, "TooManyZones" },
};

// String to enum map for ZoneEnrollResponseEnrollResponseCode
const std::map<std::string, uint32_t> zone_enroll_response_enroll_response_code_enum_string_to_id_map {
  { "Success", 0 },
  { "NotSupported", 1 },
  { "NoEnrollPermit", 2 },
  { "TooManyZones", 3 },
};

std::string zone_enroll_response_enroll_response_code_get_enum_value_name(
  uint32_t value)
{
  auto it = zone_enroll_response_enroll_response_code_enum_id_to_string_map.find(value);
  if (it != zone_enroll_response_enroll_response_code_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t zone_enroll_response_enroll_response_code_get_enum_value_number(const std::string &str)
{
  auto it = zone_enroll_response_enroll_response_code_enum_string_to_id_map.find(str);
  if (it != zone_enroll_response_enroll_response_code_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for attributeReportingStatus
const std::map<uint32_t, std::string> attribute_reporting_status_enum_id_to_string_map {
  { 0, "Pending" },
  { 1, "Complete" },
};

// String to enum map for attributeReportingStatus
const std::map<std::string, uint32_t> attribute_reporting_status_enum_string_to_id_map {
  { "Pending", 0 },
  { "Complete", 1 },
};

std::string attribute_reporting_status_get_enum_value_name(
  uint32_t value)
{
  auto it = attribute_reporting_status_enum_id_to_string_map.find(value);
  if (it != attribute_reporting_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t attribute_reporting_status_get_enum_value_number(const std::string &str)
{
  auto it = attribute_reporting_status_enum_string_to_id_map.find(str);
  if (it != attribute_reporting_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for zclStatus
const std::map<uint32_t, std::string> zcl_status_enum_id_to_string_map {
  { 0, "SUCCESS" },
  { 1, "FAILURE" },
  { 126, "NOT_AUTHORIZED" },
  { 128, "MALFORMED_COMMAND" },
  { 129, "UNSUP_CLUSTER_COMMAND" },
  { 130, "UNSUP_GENERAL_COMMAND" },
  { 131, "UNSUP_MANUF_CLUSTER_COMMAND" },
  { 132, "UNSUP_MANUF_GENERAL_COMMAND" },
  { 133, "INVALID_FIELD" },
  { 134, "UNSUPPORTED_ATTRIBUTE" },
  { 135, "INVALID_VALUE" },
  { 136, "READ_ONLY" },
  { 137, "INSUFFICIENT_SPACE" },
  { 138, "DUPLICATE_EXISTS" },
  { 139, "NOT_FOUND" },
  { 140, "UNREPORTABLE_ATTRIBUTE" },
  { 141, "INVALID_DATA_TYPE" },
  { 142, "INVALID_SELECTOR" },
  { 143, "WRITE_ONLY" },
  { 144, "INCONSISTENT_STARTUP_STATE" },
  { 145, "DEFINED_OUT_OF_BAND" },
  { 146, "INCONSISTENT" },
  { 147, "ACTION_DENIED" },
  { 148, "TIMEOUT" },
  { 149, "ABORT" },
  { 150, "INVALID_IMAGE" },
  { 151, "WAIT_FOR_DATA" },
  { 152, "NO_IMAGE_AVAILABLE" },
  { 153, "REQUIRE_MORE_IMAGE" },
  { 154, "NOTIFICATION_PENDING" },
  { 192, "HARDWARE_FAILURE" },
  { 193, "SOFTWARE_FAILURE" },
  { 194, "CALIBRATION_ERROR" },
  { 195, "UNSUPPORTED_CLUSTER" },
  { 196, "LIMIT_REACHED" },
};

// String to enum map for zclStatus
const std::map<std::string, uint32_t> zcl_status_enum_string_to_id_map {
  { "SUCCESS", 0 },
  { "FAILURE", 1 },
  { "NOT_AUTHORIZED", 126 },
  { "MALFORMED_COMMAND", 128 },
  { "UNSUP_CLUSTER_COMMAND", 129 },
  { "UNSUP_GENERAL_COMMAND", 130 },
  { "UNSUP_MANUF_CLUSTER_COMMAND", 131 },
  { "UNSUP_MANUF_GENERAL_COMMAND", 132 },
  { "INVALID_FIELD", 133 },
  { "UNSUPPORTED_ATTRIBUTE", 134 },
  { "INVALID_VALUE", 135 },
  { "READ_ONLY", 136 },
  { "INSUFFICIENT_SPACE", 137 },
  { "DUPLICATE_EXISTS", 138 },
  { "NOT_FOUND", 139 },
  { "UNREPORTABLE_ATTRIBUTE", 140 },
  { "INVALID_DATA_TYPE", 141 },
  { "INVALID_SELECTOR", 142 },
  { "WRITE_ONLY", 143 },
  { "INCONSISTENT_STARTUP_STATE", 144 },
  { "DEFINED_OUT_OF_BAND", 145 },
  { "INCONSISTENT", 146 },
  { "ACTION_DENIED", 147 },
  { "TIMEOUT", 148 },
  { "ABORT", 149 },
  { "INVALID_IMAGE", 150 },
  { "WAIT_FOR_DATA", 151 },
  { "NO_IMAGE_AVAILABLE", 152 },
  { "REQUIRE_MORE_IMAGE", 153 },
  { "NOTIFICATION_PENDING", 154 },
  { "HARDWARE_FAILURE", 192 },
  { "SOFTWARE_FAILURE", 193 },
  { "CALIBRATION_ERROR", 194 },
  { "UNSUPPORTED_CLUSTER", 195 },
  { "LIMIT_REACHED", 196 },
};

std::string zcl_status_get_enum_value_name(
  uint32_t value)
{
  auto it = zcl_status_enum_id_to_string_map.find(value);
  if (it != zcl_status_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t zcl_status_get_enum_value_number(const std::string &str)
{
  auto it = zcl_status_enum_string_to_id_map.find(str);
  if (it != zcl_status_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// Enum to string map for zclType
const std::map<uint32_t, std::string> zcl_type_enum_id_to_string_map {
  { 0, "nodata" },
  { 8, "data8" },
  { 9, "data16" },
  { 10, "data24" },
  { 11, "data32" },
  { 12, "data40" },
  { 13, "data48" },
  { 14, "data56" },
  { 15, "data64" },
  { 16, "bool" },
  { 24, "map8" },
  { 25, "map16" },
  { 26, "map24" },
  { 27, "map32" },
  { 28, "map40" },
  { 29, "map48" },
  { 30, "map56" },
  { 31, "map64" },
  { 32, "uint8" },
  { 33, "uint16" },
  { 34, "uint24" },
  { 35, "uint32" },
  { 36, "uint40" },
  { 37, "uint48" },
  { 38, "uint56" },
  { 39, "uint64" },
  { 40, "int8" },
  { 41, "int16" },
  { 42, "int24" },
  { 43, "int32" },
  { 44, "int40" },
  { 45, "int48" },
  { 46, "int56" },
  { 47, "int64" },
  { 48, "enum8" },
  { 49, "enum16" },
  { 56, "semi" },
  { 57, "single" },
  { 58, "double" },
  { 65, "octstr" },
  { 66, "string" },
  { 67, "octstr16" },
  { 68, "string16" },
  { 72, "array" },
  { 76, "struct" },
  { 80, "set" },
  { 81, "bag" },
  { 197, "fabric_idx" },
  { 224, "ToD" },
  { 225, "date" },
  { 226, "UTC" },
  { 232, "clusterId" },
  { 233, "attribId" },
  { 234, "bacOID" },
  { 240, "EUI64" },
  { 241, "key128" },
  { 255, "unk" },
};

// String to enum map for zclType
const std::map<std::string, uint32_t> zcl_type_enum_string_to_id_map {
  { "nodata", 0 },
  { "data8", 8 },
  { "data16", 9 },
  { "data24", 10 },
  { "data32", 11 },
  { "data40", 12 },
  { "data48", 13 },
  { "data56", 14 },
  { "data64", 15 },
  { "bool", 16 },
  { "map8", 24 },
  { "map16", 25 },
  { "map24", 26 },
  { "map32", 27 },
  { "map40", 28 },
  { "map48", 29 },
  { "map56", 30 },
  { "map64", 31 },
  { "uint8", 32 },
  { "uint16", 33 },
  { "uint24", 34 },
  { "uint32", 35 },
  { "uint40", 36 },
  { "uint48", 37 },
  { "uint56", 38 },
  { "uint64", 39 },
  { "int8", 40 },
  { "int16", 41 },
  { "int24", 42 },
  { "int32", 43 },
  { "int40", 44 },
  { "int48", 45 },
  { "int56", 46 },
  { "int64", 47 },
  { "enum8", 48 },
  { "enum16", 49 },
  { "semi", 56 },
  { "single", 57 },
  { "double", 58 },
  { "octstr", 65 },
  { "string", 66 },
  { "octstr16", 67 },
  { "string16", 68 },
  { "array", 72 },
  { "struct", 76 },
  { "set", 80 },
  { "bag", 81 },
  { "fabric_idx", 197 },
  { "ToD", 224 },
  { "date", 225 },
  { "UTC", 226 },
  { "clusterId", 232 },
  { "attribId", 233 },
  { "bacOID", 234 },
  { "EUI64", 240 },
  { "key128", 241 },
  { "unk", 255 },
};

std::string zcl_type_get_enum_value_name(
  uint32_t value)
{
  auto it = zcl_type_enum_id_to_string_map.find(value);
  if (it != zcl_type_enum_id_to_string_map.end()){
    return it->second;
  }

  // No known name value is set for this field.
  // Set it to a string version of the value.
  return std::to_string(value);
}

uint32_t zcl_type_get_enum_value_number(const std::string &str)
{
  auto it = zcl_type_enum_string_to_id_map.find(str);
  if (it != zcl_type_enum_string_to_id_map.end()){
    return it->second;
  }

  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

std::string get_enum_value_name(
  dotdot_cluster_id_t cluster_id,
  dotdot_attribute_id_t attribute_id,
  uint32_t value)
{
  if (0 == cluster_id) {
  #ifdef BASIC_ZCL_VERSION_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basiczcl_version instead of this: basic_zcl_version
      return basic_zcl_version_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_APPLICATION_VERSION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicapplication_version instead of this: basic_application_version
      return basic_application_version_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_STACK_VERSION_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicstack_version instead of this: basic_stack_version
      return basic_stack_version_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_HW_VERSION_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basichw_version instead of this: basic_hw_version
      return basic_hw_version_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_MANUFACTURER_NAME_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicmanufacturer_name instead of this: basic_manufacturer_name
      return basic_manufacturer_name_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_MODEL_IDENTIFIER_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicmodel_identifier instead of this: basic_model_identifier
      return basic_model_identifier_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_DATE_CODE_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicdate_code instead of this: basic_date_code
      return basic_date_code_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_POWER_SOURCE_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicpower_source instead of this: basic_power_source
      return basic_power_source_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_GENERIC_DEVICE_CLASS_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicgeneric_device_class instead of this: basic_generic_device_class
      return basic_generic_device_class_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_GENERIC_DEVICE_TYPE_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicgeneric_device_type instead of this: basic_generic_device_type
      return basic_generic_device_type_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_PRODUCT_CODE_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicproduct_code instead of this: basic_product_code
      return basic_product_code_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_PRODUCTURL_ENUM_NAME_AVAILABLE
    if (11 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicproducturl instead of this: basic_producturl
      return basic_producturl_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_MANUFACTURER_VERSION_DETAILS_ENUM_NAME_AVAILABLE
    if (12 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicmanufacturer_version_details instead of this: basic_manufacturer_version_details
      return basic_manufacturer_version_details_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_SERIAL_NUMBER_ENUM_NAME_AVAILABLE
    if (13 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicserial_number instead of this: basic_serial_number
      return basic_serial_number_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_PRODUCT_LABEL_ENUM_NAME_AVAILABLE
    if (14 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicproduct_label instead of this: basic_product_label
      return basic_product_label_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_LOCATION_DESCRIPTION_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basiclocation_description instead of this: basic_location_description
      return basic_location_description_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_PHYSICAL_ENVIRONMENT_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicphysical_environment instead of this: basic_physical_environment
      return basic_physical_environment_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_DEVICE_ENABLED_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicdevice_enabled instead of this: basic_device_enabled
      return basic_device_enabled_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicalarm_mask instead of this: basic_alarm_mask
      return basic_alarm_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_DISABLE_LOCAL_CONFIG_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicdisable_local_config instead of this: basic_disable_local_config
      return basic_disable_local_config_get_enum_value_name(value);
    }
  #endif
  #ifdef BASIC_SW_BUILDID_ENUM_NAME_AVAILABLE
    if (16384 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicsw_buildid instead of this: basic_sw_buildid
      return basic_sw_buildid_get_enum_value_name(value);
    }
  #endif
  }

  if (1 == cluster_id) {
  #ifdef POWER_CONFIGURATION_MAINS_VOLTAGE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_voltage instead of this: power_configuration_mains_voltage
      return power_configuration_mains_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_FREQUENCY_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_frequency instead of this: power_configuration_mains_frequency
      return power_configuration_mains_frequency_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_alarm_mask instead of this: power_configuration_mains_alarm_mask
      return power_configuration_mains_alarm_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_voltage_min_threshold instead of this: power_configuration_mains_voltage_min_threshold
      return power_configuration_mains_voltage_min_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_voltage_max_threshold instead of this: power_configuration_mains_voltage_max_threshold
      return power_configuration_mains_voltage_max_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_voltage_dwell_trip_point instead of this: power_configuration_mains_voltage_dwell_trip_point
      return power_configuration_mains_voltage_dwell_trip_point_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage instead of this: power_configuration_battery_voltage
      return power_configuration_battery_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_remaining instead of this: power_configuration_battery_percentage_remaining
      return power_configuration_battery_percentage_remaining_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_MANUFACTURER_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_manufacturer instead of this: power_configuration_battery_manufacturer
      return power_configuration_battery_manufacturer_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_SIZE_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_size instead of this: power_configuration_battery_size
      return power_configuration_battery_size_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERYA_HR_RATING_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbatterya_hr_rating instead of this: power_configuration_batterya_hr_rating
      return power_configuration_batterya_hr_rating_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_QUANTITY_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_quantity instead of this: power_configuration_battery_quantity
      return power_configuration_battery_quantity_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_rated_voltage instead of this: power_configuration_battery_rated_voltage
      return power_configuration_battery_rated_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_alarm_mask instead of this: power_configuration_battery_alarm_mask
      return power_configuration_battery_alarm_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (54 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage_min_threshold instead of this: power_configuration_battery_voltage_min_threshold
      return power_configuration_battery_voltage_min_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (55 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage_threshold1 instead of this: power_configuration_battery_voltage_threshold1
      return power_configuration_battery_voltage_threshold1_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (56 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage_threshold2 instead of this: power_configuration_battery_voltage_threshold2
      return power_configuration_battery_voltage_threshold2_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (57 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage_threshold3 instead of this: power_configuration_battery_voltage_threshold3
      return power_configuration_battery_voltage_threshold3_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (58 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_min_threshold instead of this: power_configuration_battery_percentage_min_threshold
      return power_configuration_battery_percentage_min_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (59 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_threshold1 instead of this: power_configuration_battery_percentage_threshold1
      return power_configuration_battery_percentage_threshold1_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (60 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_threshold2 instead of this: power_configuration_battery_percentage_threshold2
      return power_configuration_battery_percentage_threshold2_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (61 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_threshold3 instead of this: power_configuration_battery_percentage_threshold3
      return power_configuration_battery_percentage_threshold3_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_ALARM_STATE_ENUM_NAME_AVAILABLE
    if (62 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_alarm_state instead of this: power_configuration_battery_alarm_state
      return power_configuration_battery_alarm_state_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage instead of this: power_configuration_battery2_voltage
      return power_configuration_battery2_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING_ENUM_NAME_AVAILABLE
    if (65 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_remaining instead of this: power_configuration_battery2_percentage_remaining
      return power_configuration_battery2_percentage_remaining_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_MANUFACTURER_ENUM_NAME_AVAILABLE
    if (80 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_manufacturer instead of this: power_configuration_battery2_manufacturer
      return power_configuration_battery2_manufacturer_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_SIZE_ENUM_NAME_AVAILABLE
    if (81 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_size instead of this: power_configuration_battery2_size
      return power_configuration_battery2_size_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2A_HR_RATING_ENUM_NAME_AVAILABLE
    if (82 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2a_hr_rating instead of this: power_configuration_battery2a_hr_rating
      return power_configuration_battery2a_hr_rating_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_QUANTITY_ENUM_NAME_AVAILABLE
    if (83 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_quantity instead of this: power_configuration_battery2_quantity
      return power_configuration_battery2_quantity_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE_ENUM_NAME_AVAILABLE
    if (84 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_rated_voltage instead of this: power_configuration_battery2_rated_voltage
      return power_configuration_battery2_rated_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (85 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_alarm_mask instead of this: power_configuration_battery2_alarm_mask
      return power_configuration_battery2_alarm_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (86 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage_min_threshold instead of this: power_configuration_battery2_voltage_min_threshold
      return power_configuration_battery2_voltage_min_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (87 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage_threshold1 instead of this: power_configuration_battery2_voltage_threshold1
      return power_configuration_battery2_voltage_threshold1_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (88 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage_threshold2 instead of this: power_configuration_battery2_voltage_threshold2
      return power_configuration_battery2_voltage_threshold2_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (89 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage_threshold3 instead of this: power_configuration_battery2_voltage_threshold3
      return power_configuration_battery2_voltage_threshold3_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (90 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_min_threshold instead of this: power_configuration_battery2_percentage_min_threshold
      return power_configuration_battery2_percentage_min_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (91 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_threshold1 instead of this: power_configuration_battery2_percentage_threshold1
      return power_configuration_battery2_percentage_threshold1_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (92 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_threshold2 instead of this: power_configuration_battery2_percentage_threshold2
      return power_configuration_battery2_percentage_threshold2_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (93 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_threshold3 instead of this: power_configuration_battery2_percentage_threshold3
      return power_configuration_battery2_percentage_threshold3_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_ALARM_STATE_ENUM_NAME_AVAILABLE
    if (94 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_alarm_state instead of this: power_configuration_battery2_alarm_state
      return power_configuration_battery2_alarm_state_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_ENUM_NAME_AVAILABLE
    if (96 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage instead of this: power_configuration_battery3_voltage
      return power_configuration_battery3_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING_ENUM_NAME_AVAILABLE
    if (97 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_remaining instead of this: power_configuration_battery3_percentage_remaining
      return power_configuration_battery3_percentage_remaining_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_MANUFACTURER_ENUM_NAME_AVAILABLE
    if (112 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_manufacturer instead of this: power_configuration_battery3_manufacturer
      return power_configuration_battery3_manufacturer_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_SIZE_ENUM_NAME_AVAILABLE
    if (113 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_size instead of this: power_configuration_battery3_size
      return power_configuration_battery3_size_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3A_HR_RATING_ENUM_NAME_AVAILABLE
    if (114 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3a_hr_rating instead of this: power_configuration_battery3a_hr_rating
      return power_configuration_battery3a_hr_rating_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_QUANTITY_ENUM_NAME_AVAILABLE
    if (115 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_quantity instead of this: power_configuration_battery3_quantity
      return power_configuration_battery3_quantity_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE_ENUM_NAME_AVAILABLE
    if (116 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_rated_voltage instead of this: power_configuration_battery3_rated_voltage
      return power_configuration_battery3_rated_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (117 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_alarm_mask instead of this: power_configuration_battery3_alarm_mask
      return power_configuration_battery3_alarm_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (118 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage_min_threshold instead of this: power_configuration_battery3_voltage_min_threshold
      return power_configuration_battery3_voltage_min_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (119 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage_threshold1 instead of this: power_configuration_battery3_voltage_threshold1
      return power_configuration_battery3_voltage_threshold1_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (120 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage_threshold2 instead of this: power_configuration_battery3_voltage_threshold2
      return power_configuration_battery3_voltage_threshold2_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (121 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage_threshold3 instead of this: power_configuration_battery3_voltage_threshold3
      return power_configuration_battery3_voltage_threshold3_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (122 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_min_threshold instead of this: power_configuration_battery3_percentage_min_threshold
      return power_configuration_battery3_percentage_min_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (123 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_threshold1 instead of this: power_configuration_battery3_percentage_threshold1
      return power_configuration_battery3_percentage_threshold1_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (124 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_threshold2 instead of this: power_configuration_battery3_percentage_threshold2
      return power_configuration_battery3_percentage_threshold2_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (125 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_threshold3 instead of this: power_configuration_battery3_percentage_threshold3
      return power_configuration_battery3_percentage_threshold3_get_enum_value_name(value);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_ALARM_STATE_ENUM_NAME_AVAILABLE
    if (126 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_alarm_state instead of this: power_configuration_battery3_alarm_state
      return power_configuration_battery3_alarm_state_get_enum_value_name(value);
    }
  #endif
  }

  if (2 == cluster_id) {
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationcurrent_temperature instead of this: device_temperature_configuration_current_temperature
      return device_temperature_configuration_current_temperature_get_enum_value_name(value);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationmin_temp_experienced instead of this: device_temperature_configuration_min_temp_experienced
      return device_temperature_configuration_min_temp_experienced_get_enum_value_name(value);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationmax_temp_experienced instead of this: device_temperature_configuration_max_temp_experienced
      return device_temperature_configuration_max_temp_experienced_get_enum_value_name(value);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationover_temp_total_dwell instead of this: device_temperature_configuration_over_temp_total_dwell
      return device_temperature_configuration_over_temp_total_dwell_get_enum_value_name(value);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationdevice_temp_alarm_mask instead of this: device_temperature_configuration_device_temp_alarm_mask
      return device_temperature_configuration_device_temp_alarm_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationlow_temp_threshold instead of this: device_temperature_configuration_low_temp_threshold
      return device_temperature_configuration_low_temp_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationhigh_temp_threshold instead of this: device_temperature_configuration_high_temp_threshold
      return device_temperature_configuration_high_temp_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationlow_temp_dwell_trip_point instead of this: device_temperature_configuration_low_temp_dwell_trip_point
      return device_temperature_configuration_low_temp_dwell_trip_point_get_enum_value_name(value);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationhigh_temp_dwell_trip_point instead of this: device_temperature_configuration_high_temp_dwell_trip_point
      return device_temperature_configuration_high_temp_dwell_trip_point_get_enum_value_name(value);
    }
  #endif
  }

  if (3 == cluster_id) {
  #ifdef IDENTIFY_IDENTIFY_TIME_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: identifyidentify_time instead of this: identify_identify_time
      return identify_identify_time_get_enum_value_name(value);
    }
  #endif
  }

  if (4 == cluster_id) {
  #ifdef GROUPS_NAME_SUPPORT_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: groupsname_support instead of this: groups_name_support
      return groups_name_support_get_enum_value_name(value);
    }
  #endif
  }

  if (5 == cluster_id) {
  #ifdef SCENES_SCENE_COUNT_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenesscene_count instead of this: scenes_scene_count
      return scenes_scene_count_get_enum_value_name(value);
    }
  #endif
  #ifdef SCENES_CURRENT_SCENE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenescurrent_scene instead of this: scenes_current_scene
      return scenes_current_scene_get_enum_value_name(value);
    }
  #endif
  #ifdef SCENES_CURRENT_GROUP_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenescurrent_group instead of this: scenes_current_group
      return scenes_current_group_get_enum_value_name(value);
    }
  #endif
  #ifdef SCENES_SCENE_VALID_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenesscene_valid instead of this: scenes_scene_valid
      return scenes_scene_valid_get_enum_value_name(value);
    }
  #endif
  #ifdef SCENES_NAME_SUPPORT_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenesname_support instead of this: scenes_name_support
      return scenes_name_support_get_enum_value_name(value);
    }
  #endif
  #ifdef SCENES_LAST_CONFIGURED_BY_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: sceneslast_configured_by instead of this: scenes_last_configured_by
      return scenes_last_configured_by_get_enum_value_name(value);
    }
  #endif
  #ifdef SCENES_SCENE_TABLE_ENUM_NAME_AVAILABLE
    if (3841 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenesscene_table instead of this: scenes_scene_table
      return scenes_scene_table_get_enum_value_name(value);
    }
  #endif
  }

  if (6 == cluster_id) {
  #ifdef ON_OFF_ON_OFF_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offon_off instead of this: on_off_on_off
      return on_off_on_off_get_enum_value_name(value);
    }
  #endif
  #ifdef ON_OFF_GLOBAL_SCENE_CONTROL_ENUM_NAME_AVAILABLE
    if (16384 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offglobal_scene_control instead of this: on_off_global_scene_control
      return on_off_global_scene_control_get_enum_value_name(value);
    }
  #endif
  #ifdef ON_OFF_ON_TIME_ENUM_NAME_AVAILABLE
    if (16385 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offon_time instead of this: on_off_on_time
      return on_off_on_time_get_enum_value_name(value);
    }
  #endif
  #ifdef ON_OFF_OFF_WAIT_TIME_ENUM_NAME_AVAILABLE
    if (16386 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offoff_wait_time instead of this: on_off_off_wait_time
      return on_off_off_wait_time_get_enum_value_name(value);
    }
  #endif
  #ifdef ON_OFF_START_UP_ON_OFF_ENUM_NAME_AVAILABLE
    if (16387 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offstart_up_on_off instead of this: on_off_start_up_on_off
      return on_off_start_up_on_off_get_enum_value_name(value);
    }
  #endif
  }

  if (8 == cluster_id) {
  #ifdef LEVEL_CURRENT_LEVEL_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelcurrent_level instead of this: level_current_level
      return level_current_level_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_REMAINING_TIME_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelremaining_time instead of this: level_remaining_time
      return level_remaining_time_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_MIN_LEVEL_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelmin_level instead of this: level_min_level
      return level_min_level_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_MAX_LEVEL_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelmax_level instead of this: level_max_level
      return level_max_level_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_CURRENT_FREQUENCY_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelcurrent_frequency instead of this: level_current_frequency
      return level_current_frequency_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_MIN_FREQUENCY_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelmin_frequency instead of this: level_min_frequency
      return level_min_frequency_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_MAX_FREQUENCY_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelmax_frequency instead of this: level_max_frequency
      return level_max_frequency_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_OPTIONS_ENUM_NAME_AVAILABLE
    if (15 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: leveloptions instead of this: level_options
      return level_options_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_ON_OFF_TRANSITION_TIME_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelon_off_transition_time instead of this: level_on_off_transition_time
      return level_on_off_transition_time_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_ON_LEVEL_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelon_level instead of this: level_on_level
      return level_on_level_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_ON_TRANSITION_TIME_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelon_transition_time instead of this: level_on_transition_time
      return level_on_transition_time_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_OFF_TRANSITION_TIME_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: leveloff_transition_time instead of this: level_off_transition_time
      return level_off_transition_time_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_DEFAULT_MOVE_RATE_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: leveldefault_move_rate instead of this: level_default_move_rate
      return level_default_move_rate_get_enum_value_name(value);
    }
  #endif
  #ifdef LEVEL_START_UP_CURRENT_LEVEL_ENUM_NAME_AVAILABLE
    if (16384 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelstart_up_current_level instead of this: level_start_up_current_level
      return level_start_up_current_level_get_enum_value_name(value);
    }
  #endif
  }

  if (9 == cluster_id) {
  #ifdef ALARMS_ALARM_COUNT_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: alarmsalarm_count instead of this: alarms_alarm_count
      return alarms_alarm_count_get_enum_value_name(value);
    }
  #endif
  }

  if (10 == cluster_id) {
  #ifdef TIME_TIME_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timetime instead of this: time_time
      return time_time_get_enum_value_name(value);
    }
  #endif
  #ifdef TIME_TIME_STATUS_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timetime_status instead of this: time_time_status
      return time_time_status_get_enum_value_name(value);
    }
  #endif
  #ifdef TIME_TIME_ZONE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timetime_zone instead of this: time_time_zone
      return time_time_zone_get_enum_value_name(value);
    }
  #endif
  #ifdef TIME_DST_START_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timedst_start instead of this: time_dst_start
      return time_dst_start_get_enum_value_name(value);
    }
  #endif
  #ifdef TIME_DST_END_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timedst_end instead of this: time_dst_end
      return time_dst_end_get_enum_value_name(value);
    }
  #endif
  #ifdef TIME_DST_SHIFT_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timedst_shift instead of this: time_dst_shift
      return time_dst_shift_get_enum_value_name(value);
    }
  #endif
  #ifdef TIME_STANDARD_TIME_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timestandard_time instead of this: time_standard_time
      return time_standard_time_get_enum_value_name(value);
    }
  #endif
  #ifdef TIME_LOCAL_TIME_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timelocal_time instead of this: time_local_time
      return time_local_time_get_enum_value_name(value);
    }
  #endif
  #ifdef TIME_LAST_SET_TIME_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timelast_set_time instead of this: time_last_set_time
      return time_last_set_time_get_enum_value_name(value);
    }
  #endif
  #ifdef TIME_VALID_UNTIL_TIME_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timevalid_until_time instead of this: time_valid_until_time
      return time_valid_until_time_get_enum_value_name(value);
    }
  #endif
  }

  if (32 == cluster_id) {
  #ifdef POLL_CONTROL_CHECK_IN_INTERVAL_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlcheck_in_interval instead of this: poll_control_check_in_interval
      return poll_control_check_in_interval_get_enum_value_name(value);
    }
  #endif
  #ifdef POLL_CONTROL_LONG_POLL_INTERVAL_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controllong_poll_interval instead of this: poll_control_long_poll_interval
      return poll_control_long_poll_interval_get_enum_value_name(value);
    }
  #endif
  #ifdef POLL_CONTROL_SHORT_POLL_INTERVAL_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlshort_poll_interval instead of this: poll_control_short_poll_interval
      return poll_control_short_poll_interval_get_enum_value_name(value);
    }
  #endif
  #ifdef POLL_CONTROL_FAST_POLL_TIMEOUT_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlfast_poll_timeout instead of this: poll_control_fast_poll_timeout
      return poll_control_fast_poll_timeout_get_enum_value_name(value);
    }
  #endif
  #ifdef POLL_CONTROL_CHECK_IN_INTERVAL_MIN_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlcheck_in_interval_min instead of this: poll_control_check_in_interval_min
      return poll_control_check_in_interval_min_get_enum_value_name(value);
    }
  #endif
  #ifdef POLL_CONTROL_LONG_POLL_INTERVAL_MIN_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controllong_poll_interval_min instead of this: poll_control_long_poll_interval_min
      return poll_control_long_poll_interval_min_get_enum_value_name(value);
    }
  #endif
  #ifdef POLL_CONTROL_FAST_POLL_TIMEOUT_MAX_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlfast_poll_timeout_max instead of this: poll_control_fast_poll_timeout_max
      return poll_control_fast_poll_timeout_max_get_enum_value_name(value);
    }
  #endif
  }

  if (256 == cluster_id) {
  #ifdef SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationphysical_closed_limit instead of this: shade_configuration_physical_closed_limit
      return shade_configuration_physical_closed_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef SHADE_CONFIGURATION_MOTOR_STEP_SIZE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationmotor_step_size instead of this: shade_configuration_motor_step_size
      return shade_configuration_motor_step_size_get_enum_value_name(value);
    }
  #endif
  #ifdef SHADE_CONFIGURATION_STATUS_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationstatus instead of this: shade_configuration_status
      return shade_configuration_status_get_enum_value_name(value);
    }
  #endif
  #ifdef SHADE_CONFIGURATION_CLOSED_LIMIT_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationclosed_limit instead of this: shade_configuration_closed_limit
      return shade_configuration_closed_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef SHADE_CONFIGURATION_MODE_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationmode instead of this: shade_configuration_mode
      return shade_configuration_mode_get_enum_value_name(value);
    }
  #endif
  }

  if (257 == cluster_id) {
  #ifdef DOOR_LOCK_LOCK_STATE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locklock_state instead of this: door_lock_lock_state
      return door_lock_lock_state_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_LOCK_TYPE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locklock_type instead of this: door_lock_lock_type
      return door_lock_lock_type_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_ACTUATOR_ENABLED_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockactuator_enabled instead of this: door_lock_actuator_enabled
      return door_lock_actuator_enabled_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_DOOR_STATE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockdoor_state instead of this: door_lock_door_state
      return door_lock_door_state_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_DOOR_OPEN_EVENTS_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockdoor_open_events instead of this: door_lock_door_open_events
      return door_lock_door_open_events_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_DOOR_CLOSED_EVENTS_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockdoor_closed_events instead of this: door_lock_door_closed_events
      return door_lock_door_closed_events_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_OPEN_PERIOD_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockopen_period instead of this: door_lock_open_period
      return door_lock_open_period_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_log_records_supported instead of this: door_lock_number_of_log_records_supported
      return door_lock_number_of_log_records_supported_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_total_users_supported instead of this: door_lock_number_of_total_users_supported
      return door_lock_number_of_total_users_supported_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_pin_users_supported instead of this: door_lock_number_of_pin_users_supported
      return door_lock_number_of_pin_users_supported_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_rfid_users_supported instead of this: door_lock_number_of_rfid_users_supported
      return door_lock_number_of_rfid_users_supported_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_week_day_schedules_supported_per_user instead of this: door_lock_number_of_week_day_schedules_supported_per_user
      return door_lock_number_of_week_day_schedules_supported_per_user_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_year_day_schedules_supported_per_user instead of this: door_lock_number_of_year_day_schedules_supported_per_user
      return door_lock_number_of_year_day_schedules_supported_per_user_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_holiday_schedules_supported instead of this: door_lock_number_of_holiday_schedules_supported
      return door_lock_number_of_holiday_schedules_supported_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_MAX_PIN_CODE_LENGTH_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmax_pin_code_length instead of this: door_lock_max_pin_code_length
      return door_lock_max_pin_code_length_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_MIN_PIN_CODE_LENGTH_ENUM_NAME_AVAILABLE
    if (24 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmin_pin_code_length instead of this: door_lock_min_pin_code_length
      return door_lock_min_pin_code_length_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_MAX_RFID_CODE_LENGTH_ENUM_NAME_AVAILABLE
    if (25 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmax_rfid_code_length instead of this: door_lock_max_rfid_code_length
      return door_lock_max_rfid_code_length_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_MIN_RFID_CODE_LENGTH_ENUM_NAME_AVAILABLE
    if (26 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmin_rfid_code_length instead of this: door_lock_min_rfid_code_length
      return door_lock_min_rfid_code_length_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_CREDENTIAL_RULES_SUPPORT_ENUM_NAME_AVAILABLE
    if (27 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockcredential_rules_support instead of this: door_lock_credential_rules_support
      return door_lock_credential_rules_support_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER_ENUM_NAME_AVAILABLE
    if (28 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_credentials_supported_per_user instead of this: door_lock_number_of_credentials_supported_per_user
      return door_lock_number_of_credentials_supported_per_user_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_LOGGING_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_logging instead of this: door_lock_enable_logging
      return door_lock_enable_logging_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_LANGUAGE_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locklanguage instead of this: door_lock_language
      return door_lock_language_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_LED_SETTINGS_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockled_settings instead of this: door_lock_led_settings
      return door_lock_led_settings_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_AUTO_RELOCK_TIME_ENUM_NAME_AVAILABLE
    if (35 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockauto_relock_time instead of this: door_lock_auto_relock_time
      return door_lock_auto_relock_time_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_SOUND_VOLUME_ENUM_NAME_AVAILABLE
    if (36 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locksound_volume instead of this: door_lock_sound_volume
      return door_lock_sound_volume_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_OPERATING_MODE_ENUM_NAME_AVAILABLE
    if (37 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockoperating_mode instead of this: door_lock_operating_mode
      return door_lock_operating_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_SUPPORTED_OPERATING_MODES_ENUM_NAME_AVAILABLE
    if (38 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locksupported_operating_modes instead of this: door_lock_supported_operating_modes
      return door_lock_supported_operating_modes_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_ENUM_NAME_AVAILABLE
    if (39 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockdefault_configuration_register instead of this: door_lock_default_configuration_register
      return door_lock_default_configuration_register_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING_ENUM_NAME_AVAILABLE
    if (40 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_local_programming instead of this: door_lock_enable_local_programming
      return door_lock_enable_local_programming_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING_ENUM_NAME_AVAILABLE
    if (41 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_one_touch_locking instead of this: door_lock_enable_one_touch_locking
      return door_lock_enable_one_touch_locking_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_INSIDE_STATUSLED_ENUM_NAME_AVAILABLE
    if (42 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_inside_statusled instead of this: door_lock_enable_inside_statusled
      return door_lock_enable_inside_statusled_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON_ENUM_NAME_AVAILABLE
    if (43 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_privacy_mode_button instead of this: door_lock_enable_privacy_mode_button
      return door_lock_enable_privacy_mode_button_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_ENUM_NAME_AVAILABLE
    if (44 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locklocal_programming_features instead of this: door_lock_local_programming_features
      return door_lock_local_programming_features_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockwrong_code_entry_limit instead of this: door_lock_wrong_code_entry_limit
      return door_lock_wrong_code_entry_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockuser_code_temporary_disable_time instead of this: door_lock_user_code_temporary_disable_time
      return door_lock_user_code_temporary_disable_time_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_SEND_PIN_OVER_THE_AIR_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locksend_pin_over_the_air instead of this: door_lock_send_pin_over_the_air
      return door_lock_send_pin_over_the_air_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrequire_pi_nfor_rf_operation instead of this: door_lock_require_pi_nfor_rf_operation
      return door_lock_require_pi_nfor_rf_operation_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_SECURITY_LEVEL_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locksecurity_level instead of this: door_lock_security_level
      return door_lock_security_level_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_EXPIRING_USER_TIMEOUT_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockexpiring_user_timeout instead of this: door_lock_expiring_user_timeout
      return door_lock_expiring_user_timeout_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockalarm_mask instead of this: door_lock_alarm_mask
      return door_lock_alarm_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (65 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockkeypad_operation_event_mask instead of this: door_lock_keypad_operation_event_mask
      return door_lock_keypad_operation_event_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_RF_OPERATION_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (66 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrf_operation_event_mask instead of this: door_lock_rf_operation_event_mask
      return door_lock_rf_operation_event_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (67 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmanual_operation_event_mask instead of this: door_lock_manual_operation_event_mask
      return door_lock_manual_operation_event_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_RFID_OPERATION_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (68 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrfid_operation_event_mask instead of this: door_lock_rfid_operation_event_mask
      return door_lock_rfid_operation_event_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (69 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockkeypad_programming_event_mask instead of this: door_lock_keypad_programming_event_mask
      return door_lock_keypad_programming_event_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (70 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrf_programming_event_mask instead of this: door_lock_rf_programming_event_mask
      return door_lock_rf_programming_event_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (71 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrfid_programming_event_mask instead of this: door_lock_rfid_programming_event_mask
      return door_lock_rfid_programming_event_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef DOOR_LOCK_FEATURE_MAP_ENUM_NAME_AVAILABLE
    if (65532 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockfeature_map instead of this: door_lock_feature_map
      return door_lock_feature_map_get_enum_value_name(value);
    }
  #endif
  }

  if (258 == cluster_id) {
  #ifdef WINDOW_COVERING_WINDOW_COVERING_TYPE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringwindow_covering_type instead of this: window_covering_window_covering_type
      return window_covering_window_covering_type_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringphysical_closed_limit_lift instead of this: window_covering_physical_closed_limit_lift
      return window_covering_physical_closed_limit_lift_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringphysical_closed_limit_tilt instead of this: window_covering_physical_closed_limit_tilt
      return window_covering_physical_closed_limit_tilt_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_CURRENT_POSITION_LIFT_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringcurrent_position_lift instead of this: window_covering_current_position_lift
      return window_covering_current_position_lift_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_CURRENT_POSITION_TILT_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringcurrent_position_tilt instead of this: window_covering_current_position_tilt
      return window_covering_current_position_tilt_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringnumber_of_actuations_lift instead of this: window_covering_number_of_actuations_lift
      return window_covering_number_of_actuations_lift_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringnumber_of_actuations_tilt instead of this: window_covering_number_of_actuations_tilt
      return window_covering_number_of_actuations_tilt_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_CONFIG_OR_STATUS_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringconfig_or_status instead of this: window_covering_config_or_status
      return window_covering_config_or_status_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringcurrent_position_lift_percentage instead of this: window_covering_current_position_lift_percentage
      return window_covering_current_position_lift_percentage_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringcurrent_position_tilt_percentage instead of this: window_covering_current_position_tilt_percentage
      return window_covering_current_position_tilt_percentage_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT_ENUM_NAME_AVAILABLE
    if (256 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringinstalled_open_limit_lift instead of this: window_covering_installed_open_limit_lift
      return window_covering_installed_open_limit_lift_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT_ENUM_NAME_AVAILABLE
    if (257 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringinstalled_closed_limit_lift instead of this: window_covering_installed_closed_limit_lift
      return window_covering_installed_closed_limit_lift_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT_ENUM_NAME_AVAILABLE
    if (258 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringinstalled_open_limit_tilt instead of this: window_covering_installed_open_limit_tilt
      return window_covering_installed_open_limit_tilt_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT_ENUM_NAME_AVAILABLE
    if (259 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringinstalled_closed_limit_tilt instead of this: window_covering_installed_closed_limit_tilt
      return window_covering_installed_closed_limit_tilt_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_VELOCITY_LIFT_ENUM_NAME_AVAILABLE
    if (260 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringvelocity_lift instead of this: window_covering_velocity_lift
      return window_covering_velocity_lift_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_ACCELERATION_TIME_LIFT_ENUM_NAME_AVAILABLE
    if (261 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringacceleration_time_lift instead of this: window_covering_acceleration_time_lift
      return window_covering_acceleration_time_lift_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_DECELERATION_TIME_LIFT_ENUM_NAME_AVAILABLE
    if (262 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringdeceleration_time_lift instead of this: window_covering_deceleration_time_lift
      return window_covering_deceleration_time_lift_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_MODE_ENUM_NAME_AVAILABLE
    if (263 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringmode instead of this: window_covering_mode
      return window_covering_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT_ENUM_NAME_AVAILABLE
    if (264 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringintermediate_setpoints_lift instead of this: window_covering_intermediate_setpoints_lift
      return window_covering_intermediate_setpoints_lift_get_enum_value_name(value);
    }
  #endif
  #ifdef WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT_ENUM_NAME_AVAILABLE
    if (265 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringintermediate_setpoints_tilt instead of this: window_covering_intermediate_setpoints_tilt
      return window_covering_intermediate_setpoints_tilt_get_enum_value_name(value);
    }
  #endif
  }

  if (259 == cluster_id) {
  #ifdef BARRIER_CONTROL_MOVING_STATE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlmoving_state instead of this: barrier_control_moving_state
      return barrier_control_moving_state_get_enum_value_name(value);
    }
  #endif
  #ifdef BARRIER_CONTROL_SAFETY_STATUS_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlsafety_status instead of this: barrier_control_safety_status
      return barrier_control_safety_status_get_enum_value_name(value);
    }
  #endif
  #ifdef BARRIER_CONTROL_CAPABILITIES_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlcapabilities instead of this: barrier_control_capabilities
      return barrier_control_capabilities_get_enum_value_name(value);
    }
  #endif
  #ifdef BARRIER_CONTROL_OPEN_EVENTS_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlopen_events instead of this: barrier_control_open_events
      return barrier_control_open_events_get_enum_value_name(value);
    }
  #endif
  #ifdef BARRIER_CONTROL_CLOSE_EVENTS_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlclose_events instead of this: barrier_control_close_events
      return barrier_control_close_events_get_enum_value_name(value);
    }
  #endif
  #ifdef BARRIER_CONTROL_COMMAND_OPEN_EVENTS_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlcommand_open_events instead of this: barrier_control_command_open_events
      return barrier_control_command_open_events_get_enum_value_name(value);
    }
  #endif
  #ifdef BARRIER_CONTROL_COMMAND_CLOSE_EVENTS_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlcommand_close_events instead of this: barrier_control_command_close_events
      return barrier_control_command_close_events_get_enum_value_name(value);
    }
  #endif
  #ifdef BARRIER_CONTROL_OPEN_PERIOD_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlopen_period instead of this: barrier_control_open_period
      return barrier_control_open_period_get_enum_value_name(value);
    }
  #endif
  #ifdef BARRIER_CONTROL_CLOSE_PERIOD_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlclose_period instead of this: barrier_control_close_period
      return barrier_control_close_period_get_enum_value_name(value);
    }
  #endif
  #ifdef BARRIER_CONTROL_BARRIER_POSITION_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlbarrier_position instead of this: barrier_control_barrier_position
      return barrier_control_barrier_position_get_enum_value_name(value);
    }
  #endif
  }

  if (512 == cluster_id) {
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_pressure instead of this: pump_configuration_and_control_max_pressure
      return pump_configuration_and_control_max_pressure_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_speed instead of this: pump_configuration_and_control_max_speed
      return pump_configuration_and_control_max_speed_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_flow instead of this: pump_configuration_and_control_max_flow
      return pump_configuration_and_control_max_flow_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_const_pressure instead of this: pump_configuration_and_control_min_const_pressure
      return pump_configuration_and_control_min_const_pressure_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_const_pressure instead of this: pump_configuration_and_control_max_const_pressure
      return pump_configuration_and_control_max_const_pressure_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_comp_pressure instead of this: pump_configuration_and_control_min_comp_pressure
      return pump_configuration_and_control_min_comp_pressure_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_comp_pressure instead of this: pump_configuration_and_control_max_comp_pressure
      return pump_configuration_and_control_max_comp_pressure_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_const_speed instead of this: pump_configuration_and_control_min_const_speed
      return pump_configuration_and_control_min_const_speed_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_const_speed instead of this: pump_configuration_and_control_max_const_speed
      return pump_configuration_and_control_max_const_speed_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_const_flow instead of this: pump_configuration_and_control_min_const_flow
      return pump_configuration_and_control_min_const_flow_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_const_flow instead of this: pump_configuration_and_control_max_const_flow
      return pump_configuration_and_control_max_const_flow_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP_ENUM_NAME_AVAILABLE
    if (11 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_const_temp instead of this: pump_configuration_and_control_min_const_temp
      return pump_configuration_and_control_min_const_temp_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP_ENUM_NAME_AVAILABLE
    if (12 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_const_temp instead of this: pump_configuration_and_control_max_const_temp
      return pump_configuration_and_control_max_const_temp_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlpump_status instead of this: pump_configuration_and_control_pump_status
      return pump_configuration_and_control_pump_status_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controleffective_operation_mode instead of this: pump_configuration_and_control_effective_operation_mode
      return pump_configuration_and_control_effective_operation_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controleffective_control_mode instead of this: pump_configuration_and_control_effective_control_mode
      return pump_configuration_and_control_effective_control_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_CAPACITY_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlcapacity instead of this: pump_configuration_and_control_capacity
      return pump_configuration_and_control_capacity_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_SPEED_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlspeed instead of this: pump_configuration_and_control_speed
      return pump_configuration_and_control_speed_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controllifetime_running_hours instead of this: pump_configuration_and_control_lifetime_running_hours
      return pump_configuration_and_control_lifetime_running_hours_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_POWER_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlpower instead of this: pump_configuration_and_control_power
      return pump_configuration_and_control_power_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controllifetime_energy_consumed instead of this: pump_configuration_and_control_lifetime_energy_consumed
      return pump_configuration_and_control_lifetime_energy_consumed_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controloperation_mode instead of this: pump_configuration_and_control_operation_mode
      return pump_configuration_and_control_operation_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlcontrol_mode instead of this: pump_configuration_and_control_control_mode
      return pump_configuration_and_control_control_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlalarm_mask instead of this: pump_configuration_and_control_alarm_mask
      return pump_configuration_and_control_alarm_mask_get_enum_value_name(value);
    }
  #endif
  }

  if (513 == cluster_id) {
  #ifdef THERMOSTAT_LOCAL_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatlocal_temperature instead of this: thermostat_local_temperature
      return thermostat_local_temperature_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_OUTDOOR_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoutdoor_temperature instead of this: thermostat_outdoor_temperature
      return thermostat_outdoor_temperature_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPANCY_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupancy instead of this: thermostat_occupancy
      return thermostat_occupancy_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatabs_min_heat_setpoint_limit instead of this: thermostat_abs_min_heat_setpoint_limit
      return thermostat_abs_min_heat_setpoint_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatabs_max_heat_setpoint_limit instead of this: thermostat_abs_max_heat_setpoint_limit
      return thermostat_abs_max_heat_setpoint_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatabs_min_cool_setpoint_limit instead of this: thermostat_abs_min_cool_setpoint_limit
      return thermostat_abs_min_cool_setpoint_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatabs_max_cool_setpoint_limit instead of this: thermostat_abs_max_cool_setpoint_limit
      return thermostat_abs_max_cool_setpoint_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_PI_COOLING_DEMAND_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatpi_cooling_demand instead of this: thermostat_pi_cooling_demand
      return thermostat_pi_cooling_demand_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_PI_HEATING_DEMAND_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatpi_heating_demand instead of this: thermostat_pi_heating_demand
      return thermostat_pi_heating_demand_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostathvac_system_type_configuration instead of this: thermostat_hvac_system_type_configuration
      return thermostat_hvac_system_type_configuration_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatlocal_temperature_calibration instead of this: thermostat_local_temperature_calibration
      return thermostat_local_temperature_calibration_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_COOLING_SETPOINT_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_cooling_setpoint instead of this: thermostat_occupied_cooling_setpoint
      return thermostat_occupied_cooling_setpoint_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_HEATING_SETPOINT_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_heating_setpoint instead of this: thermostat_occupied_heating_setpoint
      return thermostat_occupied_heating_setpoint_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_cooling_setpoint instead of this: thermostat_unoccupied_cooling_setpoint
      return thermostat_unoccupied_cooling_setpoint_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_heating_setpoint instead of this: thermostat_unoccupied_heating_setpoint
      return thermostat_unoccupied_heating_setpoint_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmin_heat_setpoint_limit instead of this: thermostat_min_heat_setpoint_limit
      return thermostat_min_heat_setpoint_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmax_heat_setpoint_limit instead of this: thermostat_max_heat_setpoint_limit
      return thermostat_max_heat_setpoint_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_MIN_COOL_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmin_cool_setpoint_limit instead of this: thermostat_min_cool_setpoint_limit
      return thermostat_min_cool_setpoint_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_MAX_COOL_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (24 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmax_cool_setpoint_limit instead of this: thermostat_max_cool_setpoint_limit
      return thermostat_max_cool_setpoint_limit_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_MIN_SETPOINT_DEAD_BAND_ENUM_NAME_AVAILABLE
    if (25 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmin_setpoint_dead_band instead of this: thermostat_min_setpoint_dead_band
      return thermostat_min_setpoint_dead_band_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_REMOTE_SENSING_ENUM_NAME_AVAILABLE
    if (26 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatremote_sensing instead of this: thermostat_remote_sensing
      return thermostat_remote_sensing_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_ENUM_NAME_AVAILABLE
    if (27 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatcontrol_sequence_of_operation instead of this: thermostat_control_sequence_of_operation
      return thermostat_control_sequence_of_operation_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_SYSTEM_MODE_ENUM_NAME_AVAILABLE
    if (28 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatsystem_mode instead of this: thermostat_system_mode
      return thermostat_system_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (29 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatalarm_mask instead of this: thermostat_alarm_mask
      return thermostat_alarm_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_THERMOSTAT_RUNNING_MODE_ENUM_NAME_AVAILABLE
    if (30 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatthermostat_running_mode instead of this: thermostat_thermostat_running_mode
      return thermostat_thermostat_running_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_START_OF_WEEK_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatstart_of_week instead of this: thermostat_start_of_week
      return thermostat_start_of_week_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatnumber_of_weekly_transitions instead of this: thermostat_number_of_weekly_transitions
      return thermostat_number_of_weekly_transitions_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatnumber_of_daily_transitions instead of this: thermostat_number_of_daily_transitions
      return thermostat_number_of_daily_transitions_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_ENUM_NAME_AVAILABLE
    if (35 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostattemperature_setpoint_hold instead of this: thermostat_temperature_setpoint_hold
      return thermostat_temperature_setpoint_hold_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION_ENUM_NAME_AVAILABLE
    if (36 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostattemperature_setpoint_hold_duration instead of this: thermostat_temperature_setpoint_hold_duration
      return thermostat_temperature_setpoint_hold_duration_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE_ENUM_NAME_AVAILABLE
    if (37 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatthermostat_programming_operation_mode instead of this: thermostat_thermostat_programming_operation_mode
      return thermostat_thermostat_programming_operation_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_THERMOSTAT_RUNNING_STATE_ENUM_NAME_AVAILABLE
    if (41 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatthermostat_running_state instead of this: thermostat_thermostat_running_state
      return thermostat_thermostat_running_state_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_SETPOINT_CHANGE_SOURCE_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatsetpoint_change_source instead of this: thermostat_setpoint_change_source
      return thermostat_setpoint_change_source_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_SETPOINT_CHANGE_AMOUNT_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatsetpoint_change_amount instead of this: thermostat_setpoint_change_amount
      return thermostat_setpoint_change_amount_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatsetpoint_change_source_timestamp instead of this: thermostat_setpoint_change_source_timestamp
      return thermostat_setpoint_change_source_timestamp_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_SETBACK_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_setback instead of this: thermostat_occupied_setback
      return thermostat_occupied_setback_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_SETBACK_MIN_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_setback_min instead of this: thermostat_occupied_setback_min
      return thermostat_occupied_setback_min_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_SETBACK_MAX_ENUM_NAME_AVAILABLE
    if (54 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_setback_max instead of this: thermostat_occupied_setback_max
      return thermostat_occupied_setback_max_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_SETBACK_ENUM_NAME_AVAILABLE
    if (55 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_setback instead of this: thermostat_unoccupied_setback
      return thermostat_unoccupied_setback_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_SETBACK_MIN_ENUM_NAME_AVAILABLE
    if (56 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_setback_min instead of this: thermostat_unoccupied_setback_min
      return thermostat_unoccupied_setback_min_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_SETBACK_MAX_ENUM_NAME_AVAILABLE
    if (57 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_setback_max instead of this: thermostat_unoccupied_setback_max
      return thermostat_unoccupied_setback_max_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_EMERGENCY_HEAT_DELTA_ENUM_NAME_AVAILABLE
    if (58 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatemergency_heat_delta instead of this: thermostat_emergency_heat_delta
      return thermostat_emergency_heat_delta_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_AC_TYPE_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_type instead of this: thermostat_ac_type
      return thermostat_ac_type_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_AC_CAPACITY_ENUM_NAME_AVAILABLE
    if (65 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_capacity instead of this: thermostat_ac_capacity
      return thermostat_ac_capacity_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_AC_REFRIGERANT_TYPE_ENUM_NAME_AVAILABLE
    if (66 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_refrigerant_type instead of this: thermostat_ac_refrigerant_type
      return thermostat_ac_refrigerant_type_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_AC_COMPRESSOR_TYPE_ENUM_NAME_AVAILABLE
    if (67 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_compressor_type instead of this: thermostat_ac_compressor_type
      return thermostat_ac_compressor_type_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_AC_ERROR_CODE_ENUM_NAME_AVAILABLE
    if (68 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_error_code instead of this: thermostat_ac_error_code
      return thermostat_ac_error_code_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_AC_LOUVER_POSITION_ENUM_NAME_AVAILABLE
    if (69 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_louver_position instead of this: thermostat_ac_louver_position
      return thermostat_ac_louver_position_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_AC_COIL_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (70 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_coil_temperature instead of this: thermostat_ac_coil_temperature
      return thermostat_ac_coil_temperature_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_AC_CAPACITY_FORMAT_ENUM_NAME_AVAILABLE
    if (71 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_capacity_format instead of this: thermostat_ac_capacity_format
      return thermostat_ac_capacity_format_get_enum_value_name(value);
    }
  #endif
  }

  if (514 == cluster_id) {
  #ifdef FAN_CONTROL_FAN_MODE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: fan_controlfan_mode instead of this: fan_control_fan_mode
      return fan_control_fan_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef FAN_CONTROL_FAN_MODE_SEQUENCE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: fan_controlfan_mode_sequence instead of this: fan_control_fan_mode_sequence
      return fan_control_fan_mode_sequence_get_enum_value_name(value);
    }
  #endif
  }

  if (515 == cluster_id) {
  #ifdef DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controlrelative_humidity instead of this: dehumidification_control_relative_humidity
      return dehumidification_control_relative_humidity_get_enum_value_name(value);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controldehumidification_cooling instead of this: dehumidification_control_dehumidification_cooling
      return dehumidification_control_dehumidification_cooling_get_enum_value_name(value);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controlrh_dehumidification_setpoint instead of this: dehumidification_control_rh_dehumidification_setpoint
      return dehumidification_control_rh_dehumidification_setpoint_get_enum_value_name(value);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controlrelative_humidity_mode instead of this: dehumidification_control_relative_humidity_mode
      return dehumidification_control_relative_humidity_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controldehumidification_lockout instead of this: dehumidification_control_dehumidification_lockout
      return dehumidification_control_dehumidification_lockout_get_enum_value_name(value);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controldehumidification_hysteresis instead of this: dehumidification_control_dehumidification_hysteresis
      return dehumidification_control_dehumidification_hysteresis_get_enum_value_name(value);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controldehumidification_max_cool instead of this: dehumidification_control_dehumidification_max_cool
      return dehumidification_control_dehumidification_max_cool_get_enum_value_name(value);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controlrelative_humidity_display instead of this: dehumidification_control_relative_humidity_display
      return dehumidification_control_relative_humidity_display_get_enum_value_name(value);
    }
  #endif
  }

  if (516 == cluster_id) {
  #ifdef THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostat_user_interface_configurationtemperature_display_mode instead of this: thermostat_user_interface_configuration_temperature_display_mode
      return thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostat_user_interface_configurationkeypad_lockout instead of this: thermostat_user_interface_configuration_keypad_lockout
      return thermostat_user_interface_configuration_keypad_lockout_get_enum_value_name(value);
    }
  #endif
  #ifdef THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostat_user_interface_configurationschedule_programming_visibility instead of this: thermostat_user_interface_configuration_schedule_programming_visibility
      return thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_name(value);
    }
  #endif
  }

  if (768 == cluster_id) {
  #ifdef COLOR_CONTROL_CURRENT_HUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcurrent_hue instead of this: color_control_current_hue
      return color_control_current_hue_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_CURRENT_SATURATION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcurrent_saturation instead of this: color_control_current_saturation
      return color_control_current_saturation_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_REMAINING_TIME_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlremaining_time instead of this: color_control_remaining_time
      return color_control_remaining_time_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_CURRENTX_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcurrentx instead of this: color_control_currentx
      return color_control_currentx_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_CURRENTY_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcurrenty instead of this: color_control_currenty
      return color_control_currenty_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_DRIFT_COMPENSATION_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controldrift_compensation instead of this: color_control_drift_compensation
      return color_control_drift_compensation_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COMPENSATION_TEXT_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcompensation_text instead of this: color_control_compensation_text
      return color_control_compensation_text_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_temperature_mireds instead of this: color_control_color_temperature_mireds
      return color_control_color_temperature_mireds_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_MODE_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_mode instead of this: color_control_color_mode
      return color_control_color_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_OPTIONS_ENUM_NAME_AVAILABLE
    if (15 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controloptions instead of this: color_control_options
      return color_control_options_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_NUMBER_OF_PRIMARIES_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlnumber_of_primaries instead of this: color_control_number_of_primaries
      return color_control_number_of_primaries_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY1X_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary1x instead of this: color_control_primary1x
      return color_control_primary1x_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY1Y_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary1y instead of this: color_control_primary1y
      return color_control_primary1y_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY1_INTENSITY_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary1_intensity instead of this: color_control_primary1_intensity
      return color_control_primary1_intensity_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY2X_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary2x instead of this: color_control_primary2x
      return color_control_primary2x_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY2Y_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary2y instead of this: color_control_primary2y
      return color_control_primary2y_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY2_INTENSITY_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary2_intensity instead of this: color_control_primary2_intensity
      return color_control_primary2_intensity_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY3X_ENUM_NAME_AVAILABLE
    if (25 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary3x instead of this: color_control_primary3x
      return color_control_primary3x_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY3Y_ENUM_NAME_AVAILABLE
    if (26 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary3y instead of this: color_control_primary3y
      return color_control_primary3y_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY3_INTENSITY_ENUM_NAME_AVAILABLE
    if (27 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary3_intensity instead of this: color_control_primary3_intensity
      return color_control_primary3_intensity_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY4X_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary4x instead of this: color_control_primary4x
      return color_control_primary4x_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY4Y_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary4y instead of this: color_control_primary4y
      return color_control_primary4y_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY4_INTENSITY_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary4_intensity instead of this: color_control_primary4_intensity
      return color_control_primary4_intensity_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY5X_ENUM_NAME_AVAILABLE
    if (36 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary5x instead of this: color_control_primary5x
      return color_control_primary5x_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY5Y_ENUM_NAME_AVAILABLE
    if (37 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary5y instead of this: color_control_primary5y
      return color_control_primary5y_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY5_INTENSITY_ENUM_NAME_AVAILABLE
    if (38 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary5_intensity instead of this: color_control_primary5_intensity
      return color_control_primary5_intensity_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY6X_ENUM_NAME_AVAILABLE
    if (40 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary6x instead of this: color_control_primary6x
      return color_control_primary6x_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY6Y_ENUM_NAME_AVAILABLE
    if (41 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary6y instead of this: color_control_primary6y
      return color_control_primary6y_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY6_INTENSITY_ENUM_NAME_AVAILABLE
    if (42 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary6_intensity instead of this: color_control_primary6_intensity
      return color_control_primary6_intensity_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_WHITE_POINTX_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlwhite_pointx instead of this: color_control_white_pointx
      return color_control_white_pointx_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_WHITE_POINTY_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlwhite_pointy instead of this: color_control_white_pointy
      return color_control_white_pointy_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTRX_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointrx instead of this: color_control_color_pointrx
      return color_control_color_pointrx_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTRY_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointry instead of this: color_control_color_pointry
      return color_control_color_pointry_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTR_INTENSITY_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointr_intensity instead of this: color_control_color_pointr_intensity
      return color_control_color_pointr_intensity_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTGX_ENUM_NAME_AVAILABLE
    if (54 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointgx instead of this: color_control_color_pointgx
      return color_control_color_pointgx_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTGY_ENUM_NAME_AVAILABLE
    if (55 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointgy instead of this: color_control_color_pointgy
      return color_control_color_pointgy_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTG_INTENSITY_ENUM_NAME_AVAILABLE
    if (56 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointg_intensity instead of this: color_control_color_pointg_intensity
      return color_control_color_pointg_intensity_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTBX_ENUM_NAME_AVAILABLE
    if (58 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointbx instead of this: color_control_color_pointbx
      return color_control_color_pointbx_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTBY_ENUM_NAME_AVAILABLE
    if (59 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointby instead of this: color_control_color_pointby
      return color_control_color_pointby_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTB_INTENSITY_ENUM_NAME_AVAILABLE
    if (60 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointb_intensity instead of this: color_control_color_pointb_intensity
      return color_control_color_pointb_intensity_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_ENHANCED_CURRENT_HUE_ENUM_NAME_AVAILABLE
    if (16384 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlenhanced_current_hue instead of this: color_control_enhanced_current_hue
      return color_control_enhanced_current_hue_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_ENHANCED_COLOR_MODE_ENUM_NAME_AVAILABLE
    if (16385 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlenhanced_color_mode instead of this: color_control_enhanced_color_mode
      return color_control_enhanced_color_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_ACTIVE_ENUM_NAME_AVAILABLE
    if (16386 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_active instead of this: color_control_color_loop_active
      return color_control_color_loop_active_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_DIRECTION_ENUM_NAME_AVAILABLE
    if (16387 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_direction instead of this: color_control_color_loop_direction
      return color_control_color_loop_direction_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_TIME_ENUM_NAME_AVAILABLE
    if (16388 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_time instead of this: color_control_color_loop_time
      return color_control_color_loop_time_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE_ENUM_NAME_AVAILABLE
    if (16389 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_start_enhanced_hue instead of this: color_control_color_loop_start_enhanced_hue
      return color_control_color_loop_start_enhanced_hue_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE_ENUM_NAME_AVAILABLE
    if (16390 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_stored_enhanced_hue instead of this: color_control_color_loop_stored_enhanced_hue
      return color_control_color_loop_stored_enhanced_hue_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_CAPABILITIES_ENUM_NAME_AVAILABLE
    if (16394 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_capabilities instead of this: color_control_color_capabilities
      return color_control_color_capabilities_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS_ENUM_NAME_AVAILABLE
    if (16395 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_temp_physical_min_mireds instead of this: color_control_color_temp_physical_min_mireds
      return color_control_color_temp_physical_min_mireds_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS_ENUM_NAME_AVAILABLE
    if (16396 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_temp_physical_max_mireds instead of this: color_control_color_temp_physical_max_mireds
      return color_control_color_temp_physical_max_mireds_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS_ENUM_NAME_AVAILABLE
    if (16397 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcouple_color_temp_to_level_min_mireds instead of this: color_control_couple_color_temp_to_level_min_mireds
      return color_control_couple_color_temp_to_level_min_mireds_get_enum_value_name(value);
    }
  #endif
  #ifdef COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS_ENUM_NAME_AVAILABLE
    if (16400 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlstart_up_color_temperature_mireds instead of this: color_control_start_up_color_temperature_mireds
      return color_control_start_up_color_temperature_mireds_get_enum_value_name(value);
    }
  #endif
  }

  if (769 == cluster_id) {
  #ifdef BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationphysical_min_level instead of this: ballast_configuration_physical_min_level
      return ballast_configuration_physical_min_level_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationphysical_max_level instead of this: ballast_configuration_physical_max_level
      return ballast_configuration_physical_max_level_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_BALLAST_STATUS_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationballast_status instead of this: ballast_configuration_ballast_status
      return ballast_configuration_ballast_status_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_MIN_LEVEL_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationmin_level instead of this: ballast_configuration_min_level
      return ballast_configuration_min_level_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_MAX_LEVEL_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationmax_level instead of this: ballast_configuration_max_level
      return ballast_configuration_max_level_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_POWER_ON_LEVEL_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationpower_on_level instead of this: ballast_configuration_power_on_level
      return ballast_configuration_power_on_level_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_POWER_ON_FADE_TIME_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationpower_on_fade_time instead of this: ballast_configuration_power_on_fade_time
      return ballast_configuration_power_on_fade_time_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationintrinsic_ballast_factor instead of this: ballast_configuration_intrinsic_ballast_factor
      return ballast_configuration_intrinsic_ballast_factor_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationballast_factor_adjustment instead of this: ballast_configuration_ballast_factor_adjustment
      return ballast_configuration_ballast_factor_adjustment_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_QUANTITY_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_quantity instead of this: ballast_configuration_lamp_quantity
      return ballast_configuration_lamp_quantity_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_TYPE_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_type instead of this: ballast_configuration_lamp_type
      return ballast_configuration_lamp_type_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_MANUFACTURER_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_manufacturer instead of this: ballast_configuration_lamp_manufacturer
      return ballast_configuration_lamp_manufacturer_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_RATED_HOURS_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_rated_hours instead of this: ballast_configuration_lamp_rated_hours
      return ballast_configuration_lamp_rated_hours_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_BURN_HOURS_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_burn_hours instead of this: ballast_configuration_lamp_burn_hours
      return ballast_configuration_lamp_burn_hours_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_ALARM_MODE_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_alarm_mode instead of this: ballast_configuration_lamp_alarm_mode
      return ballast_configuration_lamp_alarm_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_burn_hours_trip_point instead of this: ballast_configuration_lamp_burn_hours_trip_point
      return ballast_configuration_lamp_burn_hours_trip_point_get_enum_value_name(value);
    }
  #endif
  }

  if (1024 == cluster_id) {
  #ifdef ILLUMINANCE_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementmeasured_value instead of this: illuminance_measurement_measured_value
      return illuminance_measurement_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementmin_measured_value instead of this: illuminance_measurement_min_measured_value
      return illuminance_measurement_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementmax_measured_value instead of this: illuminance_measurement_max_measured_value
      return illuminance_measurement_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef ILLUMINANCE_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementtolerance instead of this: illuminance_measurement_tolerance
      return illuminance_measurement_tolerance_get_enum_value_name(value);
    }
  #endif
  #ifdef ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementlight_sensor_type instead of this: illuminance_measurement_light_sensor_type
      return illuminance_measurement_light_sensor_type_get_enum_value_name(value);
    }
  #endif
  }

  if (1025 == cluster_id) {
  #ifdef ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_level_sensinglevel_status instead of this: illuminance_level_sensing_level_status
      return illuminance_level_sensing_level_status_get_enum_value_name(value);
    }
  #endif
  #ifdef ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_level_sensinglight_sensor_type instead of this: illuminance_level_sensing_light_sensor_type
      return illuminance_level_sensing_light_sensor_type_get_enum_value_name(value);
    }
  #endif
  #ifdef ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_level_sensingilluminance_target_level instead of this: illuminance_level_sensing_illuminance_target_level
      return illuminance_level_sensing_illuminance_target_level_get_enum_value_name(value);
    }
  #endif
  }

  if (1026 == cluster_id) {
  #ifdef TEMPERATURE_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: temperature_measurementmeasured_value instead of this: temperature_measurement_measured_value
      return temperature_measurement_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: temperature_measurementmin_measured_value instead of this: temperature_measurement_min_measured_value
      return temperature_measurement_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: temperature_measurementmax_measured_value instead of this: temperature_measurement_max_measured_value
      return temperature_measurement_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef TEMPERATURE_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: temperature_measurementtolerance instead of this: temperature_measurement_tolerance
      return temperature_measurement_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1027 == cluster_id) {
  #ifdef PRESSURE_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmeasured_value instead of this: pressure_measurement_measured_value
      return pressure_measurement_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmin_measured_value instead of this: pressure_measurement_min_measured_value
      return pressure_measurement_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmax_measured_value instead of this: pressure_measurement_max_measured_value
      return pressure_measurement_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementtolerance instead of this: pressure_measurement_tolerance
      return pressure_measurement_tolerance_get_enum_value_name(value);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_SCALED_VALUE_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementscaled_value instead of this: pressure_measurement_scaled_value
      return pressure_measurement_scaled_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_MIN_SCALED_VALUE_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmin_scaled_value instead of this: pressure_measurement_min_scaled_value
      return pressure_measurement_min_scaled_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_MAX_SCALED_VALUE_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmax_scaled_value instead of this: pressure_measurement_max_scaled_value
      return pressure_measurement_max_scaled_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_SCALED_TOLERANCE_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementscaled_tolerance instead of this: pressure_measurement_scaled_tolerance
      return pressure_measurement_scaled_tolerance_get_enum_value_name(value);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_SCALE_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementscale instead of this: pressure_measurement_scale
      return pressure_measurement_scale_get_enum_value_name(value);
    }
  #endif
  }

  if (1028 == cluster_id) {
  #ifdef FLOW_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: flow_measurementmeasured_value instead of this: flow_measurement_measured_value
      return flow_measurement_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef FLOW_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: flow_measurementmin_measured_value instead of this: flow_measurement_min_measured_value
      return flow_measurement_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef FLOW_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: flow_measurementmax_measured_value instead of this: flow_measurement_max_measured_value
      return flow_measurement_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef FLOW_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: flow_measurementtolerance instead of this: flow_measurement_tolerance
      return flow_measurement_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1029 == cluster_id) {
  #ifdef RELATIVITY_HUMIDITY_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: relativity_humiditymeasured_value instead of this: relativity_humidity_measured_value
      return relativity_humidity_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: relativity_humiditymin_measured_value instead of this: relativity_humidity_min_measured_value
      return relativity_humidity_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: relativity_humiditymax_measured_value instead of this: relativity_humidity_max_measured_value
      return relativity_humidity_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef RELATIVITY_HUMIDITY_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: relativity_humiditytolerance instead of this: relativity_humidity_tolerance
      return relativity_humidity_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1030 == cluster_id) {
  #ifdef OCCUPANCY_SENSING_OCCUPANCY_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingoccupancy instead of this: occupancy_sensing_occupancy
      return occupancy_sensing_occupancy_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingoccupancy_sensor_type instead of this: occupancy_sensing_occupancy_sensor_type
      return occupancy_sensing_occupancy_sensor_type_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingoccupancy_sensor_type_bitmap instead of this: occupancy_sensing_occupancy_sensor_type_bitmap
      return occupancy_sensing_occupancy_sensor_type_bitmap_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingpir_occupied_to_unoccupied_delay instead of this: occupancy_sensing_pir_occupied_to_unoccupied_delay
      return occupancy_sensing_pir_occupied_to_unoccupied_delay_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingpir_unoccupied_to_occupied_delay instead of this: occupancy_sensing_pir_unoccupied_to_occupied_delay
      return occupancy_sensing_pir_unoccupied_to_occupied_delay_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingpir_unoccupied_to_occupied_threshold instead of this: occupancy_sensing_pir_unoccupied_to_occupied_threshold
      return occupancy_sensing_pir_unoccupied_to_occupied_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingultrasonic_occupied_to_unoccupied_delay instead of this: occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay
      return occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingultrasonic_unoccupied_to_occupied_delay instead of this: occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay
      return occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingultrasonic_unoccupied_to_occupied_threshold instead of this: occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold
      return occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingphysical_contact_occupied_to_unoccupied_delay instead of this: occupancy_sensing_physical_contact_occupied_to_unoccupied_delay
      return occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingphysical_contact_unoccupied_to_occupied_delay instead of this: occupancy_sensing_physical_contact_unoccupied_to_occupied_delay
      return occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_get_enum_value_name(value);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingphysical_contact_unoccupied_to_occupied_threshold instead of this: occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold
      return occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_get_enum_value_name(value);
    }
  #endif
  }

  if (1032 == cluster_id) {
  #ifdef SOIL_MOISTURE_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: soil_moisturemeasured_value instead of this: soil_moisture_measured_value
      return soil_moisture_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef SOIL_MOISTURE_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: soil_moisturemin_measured_value instead of this: soil_moisture_min_measured_value
      return soil_moisture_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef SOIL_MOISTURE_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: soil_moisturemax_measured_value instead of this: soil_moisture_max_measured_value
      return soil_moisture_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef SOIL_MOISTURE_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: soil_moisturetolerance instead of this: soil_moisture_tolerance
      return soil_moisture_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1033 == cluster_id) {
  #ifdef PH_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ph_measurementmeasured_value instead of this: ph_measurement_measured_value
      return ph_measurement_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PH_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ph_measurementmin_measured_value instead of this: ph_measurement_min_measured_value
      return ph_measurement_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PH_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ph_measurementmax_measured_value instead of this: ph_measurement_max_measured_value
      return ph_measurement_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PH_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ph_measurementtolerance instead of this: ph_measurement_tolerance
      return ph_measurement_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1034 == cluster_id) {
  #ifdef ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_conductivity_measurementmeasured_value instead of this: electrical_conductivity_measurement_measured_value
      return electrical_conductivity_measurement_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_conductivity_measurementmin_measured_value instead of this: electrical_conductivity_measurement_min_measured_value
      return electrical_conductivity_measurement_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_conductivity_measurementmax_measured_value instead of this: electrical_conductivity_measurement_max_measured_value
      return electrical_conductivity_measurement_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_conductivity_measurementtolerance instead of this: electrical_conductivity_measurement_tolerance
      return electrical_conductivity_measurement_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1035 == cluster_id) {
  #ifdef WIND_SPEED_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: wind_speed_measurementmeasured_value instead of this: wind_speed_measurement_measured_value
      return wind_speed_measurement_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: wind_speed_measurementmin_measured_value instead of this: wind_speed_measurement_min_measured_value
      return wind_speed_measurement_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: wind_speed_measurementmax_measured_value instead of this: wind_speed_measurement_max_measured_value
      return wind_speed_measurement_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef WIND_SPEED_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: wind_speed_measurementtolerance instead of this: wind_speed_measurement_tolerance
      return wind_speed_measurement_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1036 == cluster_id) {
  #ifdef CARBON_MONOXIDE_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_monoxidemeasured_value instead of this: carbon_monoxide_measured_value
      return carbon_monoxide_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef CARBON_MONOXIDE_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_monoxidemin_measured_value instead of this: carbon_monoxide_min_measured_value
      return carbon_monoxide_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef CARBON_MONOXIDE_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_monoxidemax_measured_value instead of this: carbon_monoxide_max_measured_value
      return carbon_monoxide_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef CARBON_MONOXIDE_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_monoxidetolerance instead of this: carbon_monoxide_tolerance
      return carbon_monoxide_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1037 == cluster_id) {
  #ifdef CARBON_DIOXIDE_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_dioxidemeasured_value instead of this: carbon_dioxide_measured_value
      return carbon_dioxide_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef CARBON_DIOXIDE_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_dioxidemin_measured_value instead of this: carbon_dioxide_min_measured_value
      return carbon_dioxide_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef CARBON_DIOXIDE_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_dioxidemax_measured_value instead of this: carbon_dioxide_max_measured_value
      return carbon_dioxide_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef CARBON_DIOXIDE_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_dioxidetolerance instead of this: carbon_dioxide_tolerance
      return carbon_dioxide_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1066 == cluster_id) {
  #ifdef PM25_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pm25measured_value instead of this: pm25_measured_value
      return pm25_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PM25_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pm25min_measured_value instead of this: pm25_min_measured_value
      return pm25_min_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PM25_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pm25max_measured_value instead of this: pm25_max_measured_value
      return pm25_max_measured_value_get_enum_value_name(value);
    }
  #endif
  #ifdef PM25_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pm25tolerance instead of this: pm25_tolerance
      return pm25_tolerance_get_enum_value_name(value);
    }
  #endif
  }

  if (1280 == cluster_id) {
  #ifdef IAS_ZONE_ZONE_STATE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonezone_state instead of this: ias_zone_zone_state
      return ias_zone_zone_state_get_enum_value_name(value);
    }
  #endif
  #ifdef IAS_ZONE_ZONE_TYPE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonezone_type instead of this: ias_zone_zone_type
      return ias_zone_zone_type_get_enum_value_name(value);
    }
  #endif
  #ifdef IAS_ZONE_ZONE_STATUS_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonezone_status instead of this: ias_zone_zone_status
      return ias_zone_zone_status_get_enum_value_name(value);
    }
  #endif
  #ifdef IAS_ZONE_IASCIE_ADDRESS_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zoneiascie_address instead of this: ias_zone_iascie_address
      return ias_zone_iascie_address_get_enum_value_name(value);
    }
  #endif
  #ifdef IAS_ZONE_ZONEID_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonezoneid instead of this: ias_zone_zoneid
      return ias_zone_zoneid_get_enum_value_name(value);
    }
  #endif
  #ifdef IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonenumber_of_zone_sensitivity_levels_supported instead of this: ias_zone_number_of_zone_sensitivity_levels_supported
      return ias_zone_number_of_zone_sensitivity_levels_supported_get_enum_value_name(value);
    }
  #endif
  #ifdef IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonecurrent_zone_sensitivity_level instead of this: ias_zone_current_zone_sensitivity_level
      return ias_zone_current_zone_sensitivity_level_get_enum_value_name(value);
    }
  #endif
  }

  if (1282 == cluster_id) {
  #ifdef IASWD_MAX_DURATION_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: iaswdmax_duration instead of this: iaswd_max_duration
      return iaswd_max_duration_get_enum_value_name(value);
    }
  #endif
  }

  if (1794 == cluster_id) {
  #ifdef METERING_CURRENT_SUMMATION_DELIVERED_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_summation_delivered instead of this: metering_current_summation_delivered
      return metering_current_summation_delivered_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_CURRENT_SUMMATION_RECEIVED_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_summation_received instead of this: metering_current_summation_received
      return metering_current_summation_received_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_CURRENT_MAX_DEMAND_DELIVERED_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_max_demand_delivered instead of this: metering_current_max_demand_delivered
      return metering_current_max_demand_delivered_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_CURRENT_MAX_DEMAND_RECEIVED_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_max_demand_received instead of this: metering_current_max_demand_received
      return metering_current_max_demand_received_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_POWER_FACTOR_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringpower_factor instead of this: metering_power_factor
      return metering_power_factor_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_READING_SNAP_SHOT_TIME_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringreading_snap_shot_time instead of this: metering_reading_snap_shot_time
      return metering_reading_snap_shot_time_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_max_demand_delivered_time instead of this: metering_current_max_demand_delivered_time
      return metering_current_max_demand_delivered_time_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_max_demand_received_time instead of this: metering_current_max_demand_received_time
      return metering_current_max_demand_received_time_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_DEFAULT_UPDATE_PERIOD_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringdefault_update_period instead of this: metering_default_update_period
      return metering_default_update_period_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_SUPPLY_STATUS_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringsupply_status instead of this: metering_supply_status
      return metering_supply_status_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_inlet_energy_carrier_summation instead of this: metering_current_inlet_energy_carrier_summation
      return metering_current_inlet_energy_carrier_summation_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_outlet_energy_carrier_summation instead of this: metering_current_outlet_energy_carrier_summation
      return metering_current_outlet_energy_carrier_summation_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_INLET_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringinlet_temperature instead of this: metering_inlet_temperature
      return metering_inlet_temperature_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_OUTLET_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (24 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringoutlet_temperature instead of this: metering_outlet_temperature
      return metering_outlet_temperature_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_UNITOF_MEASURE_ENUM_NAME_AVAILABLE
    if (768 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringunitof_measure instead of this: metering_unitof_measure
      return metering_unitof_measure_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (769 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringmultiplier instead of this: metering_multiplier
      return metering_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_DIVISOR_ENUM_NAME_AVAILABLE
    if (770 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringdivisor instead of this: metering_divisor
      return metering_divisor_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_SUMMATION_FORMATTING_ENUM_NAME_AVAILABLE
    if (771 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringsummation_formatting instead of this: metering_summation_formatting
      return metering_summation_formatting_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_DEMAND_FORMATTING_ENUM_NAME_AVAILABLE
    if (772 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringdemand_formatting instead of this: metering_demand_formatting
      return metering_demand_formatting_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_HISTORICAL_CONSUMPTION_FORMATTING_ENUM_NAME_AVAILABLE
    if (773 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringhistorical_consumption_formatting instead of this: metering_historical_consumption_formatting
      return metering_historical_consumption_formatting_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_METERING_DEVICE_TYPE_ENUM_NAME_AVAILABLE
    if (774 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringmetering_device_type instead of this: metering_metering_device_type
      return metering_metering_device_type_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_ENUM_NAME_AVAILABLE
    if (777 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringenergy_carrier_unit_of_measure instead of this: metering_energy_carrier_unit_of_measure
      return metering_energy_carrier_unit_of_measure_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_ENERGY_CARRIER_SUMMATION_FORMATTING_ENUM_NAME_AVAILABLE
    if (778 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringenergy_carrier_summation_formatting instead of this: metering_energy_carrier_summation_formatting
      return metering_energy_carrier_summation_formatting_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_ENERGY_CARRIER_DEMAND_FORMATTING_ENUM_NAME_AVAILABLE
    if (779 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringenergy_carrier_demand_formatting instead of this: metering_energy_carrier_demand_formatting
      return metering_energy_carrier_demand_formatting_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_TEMPERATURE_UNIT_OF_MEASURE_ENUM_NAME_AVAILABLE
    if (780 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringtemperature_unit_of_measure instead of this: metering_temperature_unit_of_measure
      return metering_temperature_unit_of_measure_get_enum_value_name(value);
    }
  #endif
  #ifdef METERING_TEMPERATURE_FORMATTING_ENUM_NAME_AVAILABLE
    if (781 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringtemperature_formatting instead of this: metering_temperature_formatting
      return metering_temperature_formatting_get_enum_value_name(value);
    }
  #endif
  }

  if (2820 == cluster_id) {
  #ifdef ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasurement_type instead of this: electrical_measurement_measurement_type
      return electrical_measurement_measurement_type_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_ENUM_NAME_AVAILABLE
    if (256 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage instead of this: electrical_measurement_dc_voltage
      return electrical_measurement_dc_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN_ENUM_NAME_AVAILABLE
    if (257 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_min instead of this: electrical_measurement_dc_voltage_min
      return electrical_measurement_dc_voltage_min_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX_ENUM_NAME_AVAILABLE
    if (258 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_max instead of this: electrical_measurement_dc_voltage_max
      return electrical_measurement_dc_voltage_max_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_ENUM_NAME_AVAILABLE
    if (259 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current instead of this: electrical_measurement_dc_current
      return electrical_measurement_dc_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN_ENUM_NAME_AVAILABLE
    if (260 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_min instead of this: electrical_measurement_dc_current_min
      return electrical_measurement_dc_current_min_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX_ENUM_NAME_AVAILABLE
    if (261 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_max instead of this: electrical_measurement_dc_current_max
      return electrical_measurement_dc_current_max_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_ENUM_NAME_AVAILABLE
    if (262 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power instead of this: electrical_measurement_dc_power
      return electrical_measurement_dc_power_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_MIN_ENUM_NAME_AVAILABLE
    if (263 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power_min instead of this: electrical_measurement_dc_power_min
      return electrical_measurement_dc_power_min_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_MAX_ENUM_NAME_AVAILABLE
    if (264 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power_max instead of this: electrical_measurement_dc_power_max
      return electrical_measurement_dc_power_max_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (512 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_multiplier instead of this: electrical_measurement_dc_voltage_multiplier
      return electrical_measurement_dc_voltage_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR_ENUM_NAME_AVAILABLE
    if (513 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_divisor instead of this: electrical_measurement_dc_voltage_divisor
      return electrical_measurement_dc_voltage_divisor_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (514 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_multiplier instead of this: electrical_measurement_dc_current_multiplier
      return electrical_measurement_dc_current_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR_ENUM_NAME_AVAILABLE
    if (515 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_divisor instead of this: electrical_measurement_dc_current_divisor
      return electrical_measurement_dc_current_divisor_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (516 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power_multiplier instead of this: electrical_measurement_dc_power_multiplier
      return electrical_measurement_dc_power_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR_ENUM_NAME_AVAILABLE
    if (517 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power_divisor instead of this: electrical_measurement_dc_power_divisor
      return electrical_measurement_dc_power_divisor_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_ENUM_NAME_AVAILABLE
    if (768 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency instead of this: electrical_measurement_ac_frequency
      return electrical_measurement_ac_frequency_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN_ENUM_NAME_AVAILABLE
    if (769 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency_min instead of this: electrical_measurement_ac_frequency_min
      return electrical_measurement_ac_frequency_min_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX_ENUM_NAME_AVAILABLE
    if (770 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency_max instead of this: electrical_measurement_ac_frequency_max
      return electrical_measurement_ac_frequency_max_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT_ENUM_NAME_AVAILABLE
    if (771 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementneutral_current instead of this: electrical_measurement_neutral_current
      return electrical_measurement_neutral_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER_ENUM_NAME_AVAILABLE
    if (772 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementtotal_active_power instead of this: electrical_measurement_total_active_power
      return electrical_measurement_total_active_power_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER_ENUM_NAME_AVAILABLE
    if (773 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementtotal_reactive_power instead of this: electrical_measurement_total_reactive_power
      return electrical_measurement_total_reactive_power_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER_ENUM_NAME_AVAILABLE
    if (774 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementtotal_apparent_power instead of this: electrical_measurement_total_apparent_power
      return electrical_measurement_total_apparent_power_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (775 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured1st_harmonic_current instead of this: electrical_measurement_measured1st_harmonic_current
      return electrical_measurement_measured1st_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (776 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured3rd_harmonic_current instead of this: electrical_measurement_measured3rd_harmonic_current
      return electrical_measurement_measured3rd_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (777 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured5th_harmonic_current instead of this: electrical_measurement_measured5th_harmonic_current
      return electrical_measurement_measured5th_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (778 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured7th_harmonic_current instead of this: electrical_measurement_measured7th_harmonic_current
      return electrical_measurement_measured7th_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (779 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured9th_harmonic_current instead of this: electrical_measurement_measured9th_harmonic_current
      return electrical_measurement_measured9th_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (780 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured11th_harmonic_current instead of this: electrical_measurement_measured11th_harmonic_current
      return electrical_measurement_measured11th_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (781 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase1st_harmonic_current instead of this: electrical_measurement_measured_phase1st_harmonic_current
      return electrical_measurement_measured_phase1st_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (782 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase3rd_harmonic_current instead of this: electrical_measurement_measured_phase3rd_harmonic_current
      return electrical_measurement_measured_phase3rd_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (783 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase5th_harmonic_current instead of this: electrical_measurement_measured_phase5th_harmonic_current
      return electrical_measurement_measured_phase5th_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (784 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase7th_harmonic_current instead of this: electrical_measurement_measured_phase7th_harmonic_current
      return electrical_measurement_measured_phase7th_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (785 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase9th_harmonic_current instead of this: electrical_measurement_measured_phase9th_harmonic_current
      return electrical_measurement_measured_phase9th_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (786 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase11th_harmonic_current instead of this: electrical_measurement_measured_phase11th_harmonic_current
      return electrical_measurement_measured_phase11th_harmonic_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1024 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency_multiplier instead of this: electrical_measurement_ac_frequency_multiplier
      return electrical_measurement_ac_frequency_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR_ENUM_NAME_AVAILABLE
    if (1025 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency_divisor instead of this: electrical_measurement_ac_frequency_divisor
      return electrical_measurement_ac_frequency_divisor_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1026 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_multiplier instead of this: electrical_measurement_power_multiplier
      return electrical_measurement_power_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_DIVISOR_ENUM_NAME_AVAILABLE
    if (1027 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_divisor instead of this: electrical_measurement_power_divisor
      return electrical_measurement_power_divisor_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1028 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementharmonic_current_multiplier instead of this: electrical_measurement_harmonic_current_multiplier
      return electrical_measurement_harmonic_current_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1029 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementphase_harmonic_current_multiplier instead of this: electrical_measurement_phase_harmonic_current_multiplier
      return electrical_measurement_phase_harmonic_current_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_LINE_CURRENT_ENUM_NAME_AVAILABLE
    if (1281 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementline_current instead of this: electrical_measurement_line_current
      return electrical_measurement_line_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_ENUM_NAME_AVAILABLE
    if (1282 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_current instead of this: electrical_measurement_active_current
      return electrical_measurement_active_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_ENUM_NAME_AVAILABLE
    if (1283 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_current instead of this: electrical_measurement_reactive_current
      return electrical_measurement_reactive_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_ENUM_NAME_AVAILABLE
    if (1285 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage instead of this: electrical_measurement_rms_voltage
      return electrical_measurement_rms_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_ENUM_NAME_AVAILABLE
    if (1286 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_min instead of this: electrical_measurement_rms_voltage_min
      return electrical_measurement_rms_voltage_min_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_ENUM_NAME_AVAILABLE
    if (1287 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_max instead of this: electrical_measurement_rms_voltage_max
      return electrical_measurement_rms_voltage_max_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_ENUM_NAME_AVAILABLE
    if (1288 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current instead of this: electrical_measurement_rms_current
      return electrical_measurement_rms_current_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_ENUM_NAME_AVAILABLE
    if (1289 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_min instead of this: electrical_measurement_rms_current_min
      return electrical_measurement_rms_current_min_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_ENUM_NAME_AVAILABLE
    if (1290 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_max instead of this: electrical_measurement_rms_current_max
      return electrical_measurement_rms_current_max_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_ENUM_NAME_AVAILABLE
    if (1291 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power instead of this: electrical_measurement_active_power
      return electrical_measurement_active_power_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_ENUM_NAME_AVAILABLE
    if (1292 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_min instead of this: electrical_measurement_active_power_min
      return electrical_measurement_active_power_min_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_ENUM_NAME_AVAILABLE
    if (1293 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_max instead of this: electrical_measurement_active_power_max
      return electrical_measurement_active_power_max_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_POWER_ENUM_NAME_AVAILABLE
    if (1294 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_power instead of this: electrical_measurement_reactive_power
      return electrical_measurement_reactive_power_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_APPARENT_POWER_ENUM_NAME_AVAILABLE
    if (1295 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementapparent_power instead of this: electrical_measurement_apparent_power
      return electrical_measurement_apparent_power_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_FACTOR_ENUM_NAME_AVAILABLE
    if (1296 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_factor instead of this: electrical_measurement_power_factor
      return electrical_measurement_power_factor_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_ENUM_NAME_AVAILABLE
    if (1297 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_voltage_measurement_period instead of this: electrical_measurement_average_rms_voltage_measurement_period
      return electrical_measurement_average_rms_voltage_measurement_period_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_ENUM_NAME_AVAILABLE
    if (1298 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_over_voltage_counter instead of this: electrical_measurement_average_rms_over_voltage_counter
      return electrical_measurement_average_rms_over_voltage_counter_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_ENUM_NAME_AVAILABLE
    if (1299 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_under_voltage_counter instead of this: electrical_measurement_average_rms_under_voltage_counter
      return electrical_measurement_average_rms_under_voltage_counter_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_ENUM_NAME_AVAILABLE
    if (1300 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_over_voltage_period instead of this: electrical_measurement_rms_extreme_over_voltage_period
      return electrical_measurement_rms_extreme_over_voltage_period_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_ENUM_NAME_AVAILABLE
    if (1301 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_under_voltage_period instead of this: electrical_measurement_rms_extreme_under_voltage_period
      return electrical_measurement_rms_extreme_under_voltage_period_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_ENUM_NAME_AVAILABLE
    if (1302 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_sag_period instead of this: electrical_measurement_rms_voltage_sag_period
      return electrical_measurement_rms_voltage_sag_period_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_ENUM_NAME_AVAILABLE
    if (1303 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_swell_period instead of this: electrical_measurement_rms_voltage_swell_period
      return electrical_measurement_rms_voltage_swell_period_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1536 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_voltage_multiplier instead of this: electrical_measurement_ac_voltage_multiplier
      return electrical_measurement_ac_voltage_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR_ENUM_NAME_AVAILABLE
    if (1537 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_voltage_divisor instead of this: electrical_measurement_ac_voltage_divisor
      return electrical_measurement_ac_voltage_divisor_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1538 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_current_multiplier instead of this: electrical_measurement_ac_current_multiplier
      return electrical_measurement_ac_current_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR_ENUM_NAME_AVAILABLE
    if (1539 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_current_divisor instead of this: electrical_measurement_ac_current_divisor
      return electrical_measurement_ac_current_divisor_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1540 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_power_multiplier instead of this: electrical_measurement_ac_power_multiplier
      return electrical_measurement_ac_power_multiplier_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR_ENUM_NAME_AVAILABLE
    if (1541 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_power_divisor instead of this: electrical_measurement_ac_power_divisor
      return electrical_measurement_ac_power_divisor_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK_ENUM_NAME_AVAILABLE
    if (1792 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_overload_alarms_mask instead of this: electrical_measurement_dc_overload_alarms_mask
      return electrical_measurement_dc_overload_alarms_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD_ENUM_NAME_AVAILABLE
    if (1793 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_overload instead of this: electrical_measurement_dc_voltage_overload
      return electrical_measurement_dc_voltage_overload_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD_ENUM_NAME_AVAILABLE
    if (1794 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_overload instead of this: electrical_measurement_dc_current_overload
      return electrical_measurement_dc_current_overload_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_ENUM_NAME_AVAILABLE
    if (2048 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_alarms_mask instead of this: electrical_measurement_ac_alarms_mask
      return electrical_measurement_ac_alarms_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD_ENUM_NAME_AVAILABLE
    if (2049 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_voltage_overload instead of this: electrical_measurement_ac_voltage_overload
      return electrical_measurement_ac_voltage_overload_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD_ENUM_NAME_AVAILABLE
    if (2050 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_current_overload instead of this: electrical_measurement_ac_current_overload
      return electrical_measurement_ac_current_overload_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD_ENUM_NAME_AVAILABLE
    if (2051 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_active_power_overload instead of this: electrical_measurement_ac_active_power_overload
      return electrical_measurement_ac_active_power_overload_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD_ENUM_NAME_AVAILABLE
    if (2052 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_reactive_power_overload instead of this: electrical_measurement_ac_reactive_power_overload
      return electrical_measurement_ac_reactive_power_overload_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_ENUM_NAME_AVAILABLE
    if (2053 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_over_voltage instead of this: electrical_measurement_average_rms_over_voltage
      return electrical_measurement_average_rms_over_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_ENUM_NAME_AVAILABLE
    if (2054 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_under_voltage instead of this: electrical_measurement_average_rms_under_voltage
      return electrical_measurement_average_rms_under_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_ENUM_NAME_AVAILABLE
    if (2055 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_over_voltage instead of this: electrical_measurement_rms_extreme_over_voltage
      return electrical_measurement_rms_extreme_over_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_ENUM_NAME_AVAILABLE
    if (2056 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_under_voltage instead of this: electrical_measurement_rms_extreme_under_voltage
      return electrical_measurement_rms_extreme_under_voltage_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_ENUM_NAME_AVAILABLE
    if (2057 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_sag instead of this: electrical_measurement_rms_voltage_sag
      return electrical_measurement_rms_voltage_sag_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_ENUM_NAME_AVAILABLE
    if (2058 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_swell instead of this: electrical_measurement_rms_voltage_swell
      return electrical_measurement_rms_voltage_swell_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB_ENUM_NAME_AVAILABLE
    if (2305 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementline_current_phb instead of this: electrical_measurement_line_current_phb
      return electrical_measurement_line_current_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB_ENUM_NAME_AVAILABLE
    if (2306 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_current_phb instead of this: electrical_measurement_active_current_phb
      return electrical_measurement_active_current_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB_ENUM_NAME_AVAILABLE
    if (2307 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_current_phb instead of this: electrical_measurement_reactive_current_phb
      return electrical_measurement_reactive_current_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB_ENUM_NAME_AVAILABLE
    if (2309 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_phb instead of this: electrical_measurement_rms_voltage_phb
      return electrical_measurement_rms_voltage_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB_ENUM_NAME_AVAILABLE
    if (2310 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_min_phb instead of this: electrical_measurement_rms_voltage_min_phb
      return electrical_measurement_rms_voltage_min_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB_ENUM_NAME_AVAILABLE
    if (2311 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_max_phb instead of this: electrical_measurement_rms_voltage_max_phb
      return electrical_measurement_rms_voltage_max_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB_ENUM_NAME_AVAILABLE
    if (2312 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_phb instead of this: electrical_measurement_rms_current_phb
      return electrical_measurement_rms_current_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB_ENUM_NAME_AVAILABLE
    if (2313 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_min_phb instead of this: electrical_measurement_rms_current_min_phb
      return electrical_measurement_rms_current_min_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB_ENUM_NAME_AVAILABLE
    if (2314 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_max_phb instead of this: electrical_measurement_rms_current_max_phb
      return electrical_measurement_rms_current_max_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB_ENUM_NAME_AVAILABLE
    if (2315 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_phb instead of this: electrical_measurement_active_power_phb
      return electrical_measurement_active_power_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB_ENUM_NAME_AVAILABLE
    if (2316 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_min_phb instead of this: electrical_measurement_active_power_min_phb
      return electrical_measurement_active_power_min_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB_ENUM_NAME_AVAILABLE
    if (2317 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_max_phb instead of this: electrical_measurement_active_power_max_phb
      return electrical_measurement_active_power_max_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB_ENUM_NAME_AVAILABLE
    if (2318 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_power_phb instead of this: electrical_measurement_reactive_power_phb
      return electrical_measurement_reactive_power_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB_ENUM_NAME_AVAILABLE
    if (2319 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementapparent_power_phb instead of this: electrical_measurement_apparent_power_phb
      return electrical_measurement_apparent_power_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB_ENUM_NAME_AVAILABLE
    if (2320 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_factor_phb instead of this: electrical_measurement_power_factor_phb
      return electrical_measurement_power_factor_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2321 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_voltage_measurement_period_phb instead of this: electrical_measurement_average_rms_voltage_measurement_period_phb
      return electrical_measurement_average_rms_voltage_measurement_period_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB_ENUM_NAME_AVAILABLE
    if (2322 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_over_voltage_counter_phb instead of this: electrical_measurement_average_rms_over_voltage_counter_phb
      return electrical_measurement_average_rms_over_voltage_counter_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB_ENUM_NAME_AVAILABLE
    if (2323 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_under_voltage_counter_phb instead of this: electrical_measurement_average_rms_under_voltage_counter_phb
      return electrical_measurement_average_rms_under_voltage_counter_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2324 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_over_voltage_period_phb instead of this: electrical_measurement_rms_extreme_over_voltage_period_phb
      return electrical_measurement_rms_extreme_over_voltage_period_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2325 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_under_voltage_period_phb instead of this: electrical_measurement_rms_extreme_under_voltage_period_phb
      return electrical_measurement_rms_extreme_under_voltage_period_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2326 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_sag_period_phb instead of this: electrical_measurement_rms_voltage_sag_period_phb
      return electrical_measurement_rms_voltage_sag_period_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2327 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_swell_period_phb instead of this: electrical_measurement_rms_voltage_swell_period_phb
      return electrical_measurement_rms_voltage_swell_period_phb_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC_ENUM_NAME_AVAILABLE
    if (2561 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementline_current_phc instead of this: electrical_measurement_line_current_phc
      return electrical_measurement_line_current_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC_ENUM_NAME_AVAILABLE
    if (2562 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_current_phc instead of this: electrical_measurement_active_current_phc
      return electrical_measurement_active_current_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC_ENUM_NAME_AVAILABLE
    if (2563 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_current_phc instead of this: electrical_measurement_reactive_current_phc
      return electrical_measurement_reactive_current_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC_ENUM_NAME_AVAILABLE
    if (2565 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_phc instead of this: electrical_measurement_rms_voltage_phc
      return electrical_measurement_rms_voltage_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC_ENUM_NAME_AVAILABLE
    if (2566 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_min_phc instead of this: electrical_measurement_rms_voltage_min_phc
      return electrical_measurement_rms_voltage_min_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC_ENUM_NAME_AVAILABLE
    if (2567 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_max_phc instead of this: electrical_measurement_rms_voltage_max_phc
      return electrical_measurement_rms_voltage_max_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC_ENUM_NAME_AVAILABLE
    if (2568 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_phc instead of this: electrical_measurement_rms_current_phc
      return electrical_measurement_rms_current_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC_ENUM_NAME_AVAILABLE
    if (2569 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_min_phc instead of this: electrical_measurement_rms_current_min_phc
      return electrical_measurement_rms_current_min_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC_ENUM_NAME_AVAILABLE
    if (2570 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_max_phc instead of this: electrical_measurement_rms_current_max_phc
      return electrical_measurement_rms_current_max_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC_ENUM_NAME_AVAILABLE
    if (2571 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_phc instead of this: electrical_measurement_active_power_phc
      return electrical_measurement_active_power_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC_ENUM_NAME_AVAILABLE
    if (2572 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_min_phc instead of this: electrical_measurement_active_power_min_phc
      return electrical_measurement_active_power_min_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC_ENUM_NAME_AVAILABLE
    if (2573 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_max_phc instead of this: electrical_measurement_active_power_max_phc
      return electrical_measurement_active_power_max_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC_ENUM_NAME_AVAILABLE
    if (2574 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_power_phc instead of this: electrical_measurement_reactive_power_phc
      return electrical_measurement_reactive_power_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC_ENUM_NAME_AVAILABLE
    if (2575 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementapparent_power_phc instead of this: electrical_measurement_apparent_power_phc
      return electrical_measurement_apparent_power_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC_ENUM_NAME_AVAILABLE
    if (2576 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_factor_phc instead of this: electrical_measurement_power_factor_phc
      return electrical_measurement_power_factor_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2577 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_voltage_measurement_period_phc instead of this: electrical_measurement_average_rms_voltage_measurement_period_phc
      return electrical_measurement_average_rms_voltage_measurement_period_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC_ENUM_NAME_AVAILABLE
    if (2578 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_over_voltage_counter_phc instead of this: electrical_measurement_average_rms_over_voltage_counter_phc
      return electrical_measurement_average_rms_over_voltage_counter_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC_ENUM_NAME_AVAILABLE
    if (2579 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_under_voltage_counter_phc instead of this: electrical_measurement_average_rms_under_voltage_counter_phc
      return electrical_measurement_average_rms_under_voltage_counter_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2580 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_over_voltage_period_phc instead of this: electrical_measurement_rms_extreme_over_voltage_period_phc
      return electrical_measurement_rms_extreme_over_voltage_period_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2581 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_under_voltage_period_phc instead of this: electrical_measurement_rms_extreme_under_voltage_period_phc
      return electrical_measurement_rms_extreme_under_voltage_period_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2582 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_sag_period_phc instead of this: electrical_measurement_rms_voltage_sag_period_phc
      return electrical_measurement_rms_voltage_sag_period_phc_get_enum_value_name(value);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2583 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_swell_period_phc instead of this: electrical_measurement_rms_voltage_swell_period_phc
      return electrical_measurement_rms_voltage_swell_period_phc_get_enum_value_name(value);
    }
  #endif
  }

  if (2821 == cluster_id) {
  #ifdef DIAGNOSTICS_NUMBER_OF_RESETS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsnumber_of_resets instead of this: diagnostics_number_of_resets
      return diagnostics_number_of_resets_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_PERSISTENT_MEMORY_WRITES_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticspersistent_memory_writes instead of this: diagnostics_persistent_memory_writes
      return diagnostics_persistent_memory_writes_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_RX_BCAST_ENUM_NAME_AVAILABLE
    if (256 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_rx_bcast instead of this: diagnostics_mac_rx_bcast
      return diagnostics_mac_rx_bcast_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_TX_BCAST_ENUM_NAME_AVAILABLE
    if (257 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_tx_bcast instead of this: diagnostics_mac_tx_bcast
      return diagnostics_mac_tx_bcast_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_RX_UCAST_ENUM_NAME_AVAILABLE
    if (258 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_rx_ucast instead of this: diagnostics_mac_rx_ucast
      return diagnostics_mac_rx_ucast_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_TX_UCAST_ENUM_NAME_AVAILABLE
    if (259 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_tx_ucast instead of this: diagnostics_mac_tx_ucast
      return diagnostics_mac_tx_ucast_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_TX_UCAST_RETRY_ENUM_NAME_AVAILABLE
    if (260 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_tx_ucast_retry instead of this: diagnostics_mac_tx_ucast_retry
      return diagnostics_mac_tx_ucast_retry_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_TX_UCAST_FAIL_ENUM_NAME_AVAILABLE
    if (261 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_tx_ucast_fail instead of this: diagnostics_mac_tx_ucast_fail
      return diagnostics_mac_tx_ucast_fail_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_RX_BCAST_ENUM_NAME_AVAILABLE
    if (262 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_rx_bcast instead of this: diagnostics_aps_rx_bcast
      return diagnostics_aps_rx_bcast_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_TX_BCAST_ENUM_NAME_AVAILABLE
    if (263 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_tx_bcast instead of this: diagnostics_aps_tx_bcast
      return diagnostics_aps_tx_bcast_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_RX_UCAST_ENUM_NAME_AVAILABLE
    if (264 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_rx_ucast instead of this: diagnostics_aps_rx_ucast
      return diagnostics_aps_rx_ucast_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_TX_UCAST_SUCCESS_ENUM_NAME_AVAILABLE
    if (265 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_tx_ucast_success instead of this: diagnostics_aps_tx_ucast_success
      return diagnostics_aps_tx_ucast_success_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_TX_UCAST_RETRY_ENUM_NAME_AVAILABLE
    if (266 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_tx_ucast_retry instead of this: diagnostics_aps_tx_ucast_retry
      return diagnostics_aps_tx_ucast_retry_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_TX_UCAST_FAIL_ENUM_NAME_AVAILABLE
    if (267 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_tx_ucast_fail instead of this: diagnostics_aps_tx_ucast_fail
      return diagnostics_aps_tx_ucast_fail_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_ROUTE_DISC_INITIATED_ENUM_NAME_AVAILABLE
    if (268 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsroute_disc_initiated instead of this: diagnostics_route_disc_initiated
      return diagnostics_route_disc_initiated_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_NEIGHBOR_ADDED_ENUM_NAME_AVAILABLE
    if (269 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsneighbor_added instead of this: diagnostics_neighbor_added
      return diagnostics_neighbor_added_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_NEIGHBOR_REMOVED_ENUM_NAME_AVAILABLE
    if (270 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsneighbor_removed instead of this: diagnostics_neighbor_removed
      return diagnostics_neighbor_removed_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_NEIGHBOR_STALE_ENUM_NAME_AVAILABLE
    if (271 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsneighbor_stale instead of this: diagnostics_neighbor_stale
      return diagnostics_neighbor_stale_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_JOIN_INDICATION_ENUM_NAME_AVAILABLE
    if (272 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsjoin_indication instead of this: diagnostics_join_indication
      return diagnostics_join_indication_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_CHILD_MOVED_ENUM_NAME_AVAILABLE
    if (273 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticschild_moved instead of this: diagnostics_child_moved
      return diagnostics_child_moved_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_NWKFC_FAILURE_ENUM_NAME_AVAILABLE
    if (274 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsnwkfc_failure instead of this: diagnostics_nwkfc_failure
      return diagnostics_nwkfc_failure_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_APSFC_FAILURE_ENUM_NAME_AVAILABLE
    if (275 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsapsfc_failure instead of this: diagnostics_apsfc_failure
      return diagnostics_apsfc_failure_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_UNAUTHORIZED_KEY_ENUM_NAME_AVAILABLE
    if (276 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_unauthorized_key instead of this: diagnostics_aps_unauthorized_key
      return diagnostics_aps_unauthorized_key_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_NWK_DECRYPT_FAILURES_ENUM_NAME_AVAILABLE
    if (277 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsnwk_decrypt_failures instead of this: diagnostics_nwk_decrypt_failures
      return diagnostics_nwk_decrypt_failures_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_DECRYPT_FAILURES_ENUM_NAME_AVAILABLE
    if (278 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_decrypt_failures instead of this: diagnostics_aps_decrypt_failures
      return diagnostics_aps_decrypt_failures_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES_ENUM_NAME_AVAILABLE
    if (279 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticspacket_buffer_allocate_failures instead of this: diagnostics_packet_buffer_allocate_failures
      return diagnostics_packet_buffer_allocate_failures_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_RELAYED_UCAST_ENUM_NAME_AVAILABLE
    if (280 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsrelayed_ucast instead of this: diagnostics_relayed_ucast
      return diagnostics_relayed_ucast_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED_ENUM_NAME_AVAILABLE
    if (281 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsphy_to_mac_queue_limit_reached instead of this: diagnostics_phy_to_mac_queue_limit_reached
      return diagnostics_phy_to_mac_queue_limit_reached_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT_ENUM_NAME_AVAILABLE
    if (282 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticspacket_validate_drop_count instead of this: diagnostics_packet_validate_drop_count
      return diagnostics_packet_validate_drop_count_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT_ENUM_NAME_AVAILABLE
    if (283 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaverage_mac_retry_per_aps_message_sent instead of this: diagnostics_average_mac_retry_per_aps_message_sent
      return diagnostics_average_mac_retry_per_aps_message_sent_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_LAST_MESSAGELQI_ENUM_NAME_AVAILABLE
    if (284 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticslast_messagelqi instead of this: diagnostics_last_messagelqi
      return diagnostics_last_messagelqi_get_enum_value_name(value);
    }
  #endif
  #ifdef DIAGNOSTICS_LAST_MESSAGERSSI_ENUM_NAME_AVAILABLE
    if (285 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticslast_messagerssi instead of this: diagnostics_last_messagerssi
      return diagnostics_last_messagerssi_get_enum_value_name(value);
    }
  #endif
  }

  if (64769 == cluster_id) {
  #ifdef PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: protocol_controller_rf_telemetrytx_report_enabled instead of this: protocol_controller_rf_telemetry_tx_report_enabled
      return protocol_controller_rf_telemetry_tx_report_enabled_get_enum_value_name(value);
    }
  #endif
  #ifdef PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: protocol_controller_rf_telemetrypti_enabled instead of this: protocol_controller_rf_telemetry_pti_enabled
      return protocol_controller_rf_telemetry_pti_enabled_get_enum_value_name(value);
    }
  #endif
  }

  if (64770 == cluster_id) {
  #ifdef STATE_ENDPOINT_ID_LIST_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: stateendpoint_id_list instead of this: state_endpoint_id_list
      return state_endpoint_id_list_get_enum_value_name(value);
    }
  #endif
  #ifdef STATE_NETWORK_STATUS_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: statenetwork_status instead of this: state_network_status
      return state_network_status_get_enum_value_name(value);
    }
  #endif
  #ifdef STATE_SECURITY_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: statesecurity instead of this: state_security
      return state_security_get_enum_value_name(value);
    }
  #endif
  #ifdef STATE_MAXIMUM_COMMAND_DELAY_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: statemaximum_command_delay instead of this: state_maximum_command_delay
      return state_maximum_command_delay_get_enum_value_name(value);
    }
  #endif
  #ifdef STATE_NETWORK_LIST_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: statenetwork_list instead of this: state_network_list
      return state_network_list_get_enum_value_name(value);
    }
  #endif
  }

  if (64771 == cluster_id) {
  #ifdef BINDING_BINDING_TABLE_FULL_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: bindingbinding_table_full instead of this: binding_binding_table_full
      return binding_binding_table_full_get_enum_value_name(value);
    }
  #endif
  #ifdef BINDING_BINDABLE_CLUSTER_LIST_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: bindingbindable_cluster_list instead of this: binding_bindable_cluster_list
      return binding_bindable_cluster_list_get_enum_value_name(value);
    }
  #endif
  #ifdef BINDING_BINDING_TABLE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: bindingbinding_table instead of this: binding_binding_table
      return binding_binding_table_get_enum_value_name(value);
    }
  #endif
  }

  if (64772 == cluster_id) {
  #ifdef SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsreporting_interval_seconds instead of this: system_metrics_reporting_interval_seconds
      return system_metrics_reporting_interval_seconds_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_usage_percent instead of this: system_metrics_cpu_usage_percent
      return system_metrics_cpu_usage_percent_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_FREQUENCYM_HZ_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_frequencym_hz instead of this: system_metrics_cpu_frequencym_hz
      return system_metrics_cpu_frequencym_hz_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_average_usage_percent instead of this: system_metrics_cpu_average_usage_percent
      return system_metrics_cpu_average_usage_percent_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_min_usage_percent instead of this: system_metrics_cpu_min_usage_percent
      return system_metrics_cpu_min_usage_percent_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_max_usage_percent instead of this: system_metrics_cpu_max_usage_percent
      return system_metrics_cpu_max_usage_percent_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_RAM_TOTALMB_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsram_totalmb instead of this: system_metrics_ram_totalmb
      return system_metrics_ram_totalmb_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_RAM_FREEMB_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsram_freemb instead of this: system_metrics_ram_freemb
      return system_metrics_ram_freemb_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_RAM_AVAILABLEMB_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsram_availablemb instead of this: system_metrics_ram_availablemb
      return system_metrics_ram_availablemb_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_SWAP_MEMORY_TOTALMB_ENUM_NAME_AVAILABLE
    if (35 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsswap_memory_totalmb instead of this: system_metrics_swap_memory_totalmb
      return system_metrics_swap_memory_totalmb_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_SWAP_MEMORY_USEDMB_ENUM_NAME_AVAILABLE
    if (36 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsswap_memory_usedmb instead of this: system_metrics_swap_memory_usedmb
      return system_metrics_swap_memory_usedmb_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB_ENUM_NAME_AVAILABLE
    if (37 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsvirtual_memory_totalmb instead of this: system_metrics_virtual_memory_totalmb
      return system_metrics_virtual_memory_totalmb_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB_ENUM_NAME_AVAILABLE
    if (38 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsvirtual_memory_usedmb instead of this: system_metrics_virtual_memory_usedmb
      return system_metrics_virtual_memory_usedmb_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_DISKS_USAGE_ENUM_NAME_AVAILABLE
    if (39 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsdisks_usage instead of this: system_metrics_disks_usage
      return system_metrics_disks_usage_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_DISKS_COUNTERS_ENUM_NAME_AVAILABLE
    if (40 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsdisks_counters instead of this: system_metrics_disks_counters
      return system_metrics_disks_counters_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_NETWORK_INTERFACES_DATA_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsnetwork_interfaces_data instead of this: system_metrics_network_interfaces_data
      return system_metrics_network_interfaces_data_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricswireless_network_interfaces_data instead of this: system_metrics_wireless_network_interfaces_data
      return system_metrics_wireless_network_interfaces_data_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_HOSTNAME_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricshostname instead of this: system_metrics_hostname
      return system_metrics_hostname_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_FQDN_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsfqdn instead of this: system_metrics_fqdn
      return system_metrics_fqdn_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_UPTIME_MINUTES_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsuptime_minutes instead of this: system_metrics_uptime_minutes
      return system_metrics_uptime_minutes_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS_ENUM_NAME_AVAILABLE
    if (80 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscurrent_temperature_celcius instead of this: system_metrics_current_temperature_celcius
      return system_metrics_current_temperature_celcius_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS_ENUM_NAME_AVAILABLE
    if (81 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsaverage_temperature_celcius instead of this: system_metrics_average_temperature_celcius
      return system_metrics_average_temperature_celcius_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS_ENUM_NAME_AVAILABLE
    if (82 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsmin_temperature_celcius instead of this: system_metrics_min_temperature_celcius
      return system_metrics_min_temperature_celcius_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS_ENUM_NAME_AVAILABLE
    if (83 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsmax_temperature_celcius instead of this: system_metrics_max_temperature_celcius
      return system_metrics_max_temperature_celcius_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_POWER_PLUGGED_ENUM_NAME_AVAILABLE
    if (96 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricspower_plugged instead of this: system_metrics_power_plugged
      return system_metrics_power_plugged_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_BATTERY_PERCENTAGE_ENUM_NAME_AVAILABLE
    if (97 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsbattery_percentage instead of this: system_metrics_battery_percentage
      return system_metrics_battery_percentage_get_enum_value_name(value);
    }
  #endif
  #ifdef SYSTEM_METRICS_SYSTEM_INTERRUPTS_ENUM_NAME_AVAILABLE
    if (112 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricssystem_interrupts instead of this: system_metrics_system_interrupts
      return system_metrics_system_interrupts_get_enum_value_name(value);
    }
  #endif
  }

  if (64773 == cluster_id) {
  #ifdef APPLICATION_MONITORING_APPLICATION_NAME_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_name instead of this: application_monitoring_application_name
      return application_monitoring_application_name_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_VERSION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_version instead of this: application_monitoring_application_version
      return application_monitoring_application_version_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CONNECTED_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_connected instead of this: application_monitoring_application_connected
      return application_monitoring_application_connected_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_mqtt_topics instead of this: application_monitoring_application_mqtt_topics
      return application_monitoring_application_mqtt_topics_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_UPTIME_MINUTES_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringuptime_minutes instead of this: application_monitoring_uptime_minutes
      return application_monitoring_uptime_minutes_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_PROCESS_ID_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringprocess_id instead of this: application_monitoring_process_id
      return application_monitoring_process_id_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_HOSTNAME_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringhostname instead of this: application_monitoring_hostname
      return application_monitoring_hostname_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_FQDN_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringfqdn instead of this: application_monitoring_fqdn
      return application_monitoring_fqdn_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_LOGGING_ENABLED_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_logging_enabled instead of this: application_monitoring_mqtt_logging_enabled
      return application_monitoring_mqtt_logging_enabled_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_LOGGING_LEVEL_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_logging_level instead of this: application_monitoring_mqtt_logging_level
      return application_monitoring_mqtt_logging_level_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_statistics_reporting_interval_seconds instead of this: application_monitoring_mqtt_statistics_reporting_interval_seconds
      return application_monitoring_mqtt_statistics_reporting_interval_seconds_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_MESSAGES_SENT_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_messages_sent instead of this: application_monitoring_mqtt_messages_sent
      return application_monitoring_mqtt_messages_sent_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_messages_received instead of this: application_monitoring_mqtt_messages_received
      return application_monitoring_mqtt_messages_received_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_subscription_count instead of this: application_monitoring_mqtt_subscription_count
      return application_monitoring_mqtt_subscription_count_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_average_delivery_time_seconds instead of this: application_monitoring_mqtt_average_delivery_time_seconds
      return application_monitoring_mqtt_average_delivery_time_seconds_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_min_delivery_time_seconds instead of this: application_monitoring_mqtt_min_delivery_time_seconds
      return application_monitoring_mqtt_min_delivery_time_seconds_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS_ENUM_NAME_AVAILABLE
    if (54 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_max_delivery_time_seconds instead of this: application_monitoring_mqtt_max_delivery_time_seconds
      return application_monitoring_mqtt_max_delivery_time_seconds_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_statistics_reporting_interval_seconds instead of this: application_monitoring_application_statistics_reporting_interval_seconds
      return application_monitoring_application_statistics_reporting_interval_seconds_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (65 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_cpu_usage_percent instead of this: application_monitoring_application_cpu_usage_percent
      return application_monitoring_application_cpu_usage_percent_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (66 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_cpu_average_usage_percent instead of this: application_monitoring_application_cpu_average_usage_percent
      return application_monitoring_application_cpu_average_usage_percent_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (67 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_cpu_min_usage_percent instead of this: application_monitoring_application_cpu_min_usage_percent
      return application_monitoring_application_cpu_min_usage_percent_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (68 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_cpu_max_usage_percent instead of this: application_monitoring_application_cpu_max_usage_percent
      return application_monitoring_application_cpu_max_usage_percent_get_enum_value_name(value);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB_ENUM_NAME_AVAILABLE
    if (69 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_ram_usagemb instead of this: application_monitoring_application_ram_usagemb
      return application_monitoring_application_ram_usagemb_get_enum_value_name(value);
    }
  #endif
  }

  if (64774 == cluster_id) {
  #ifdef NAME_AND_LOCATION_NAME_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: name_and_locationname instead of this: name_and_location_name
      return name_and_location_name_get_enum_value_name(value);
    }
  #endif
  #ifdef NAME_AND_LOCATION_LOCATION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: name_and_locationlocation instead of this: name_and_location_location
      return name_and_location_location_get_enum_value_name(value);
    }
  #endif
  }

  if (64775 == cluster_id) {
  #ifdef CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: configuration_parametersconfiguration_parameters instead of this: configuration_parameters_configuration_parameters
      return configuration_parameters_configuration_parameters_get_enum_value_name(value);
    }
  #endif
  }

  if (64776 == cluster_id) {
  #ifdef USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupported_user_unique_identifiers instead of this: user_credential_supported_user_unique_identifiers
      return user_credential_supported_user_unique_identifiers_get_enum_value_name(value);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupported_credential_rules instead of this: user_credential_supported_credential_rules
      return user_credential_supported_credential_rules_get_enum_value_name(value);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupported_credential_types instead of this: user_credential_supported_credential_types
      return user_credential_supported_credential_types_get_enum_value_name(value);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORTED_USER_TYPES_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupported_user_types instead of this: user_credential_supported_user_types
      return user_credential_supported_user_types_get_enum_value_name(value);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupport_credential_checksum instead of this: user_credential_support_credential_checksum
      return user_credential_support_credential_checksum_get_enum_value_name(value);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupport_admin_pin_code instead of this: user_credential_support_admin_pin_code
      return user_credential_support_admin_pin_code_get_enum_value_name(value);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupport_admin_pin_code_deactivation instead of this: user_credential_support_admin_pin_code_deactivation
      return user_credential_support_admin_pin_code_deactivation_get_enum_value_name(value);
    }
  #endif
  #ifdef USER_CREDENTIAL_ADMIN_PIN_CODE_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialadmin_pin_code instead of this: user_credential_admin_pin_code
      return user_credential_admin_pin_code_get_enum_value_name(value);
    }
  #endif
  }

  if (64784 == cluster_id) {
  #ifdef AOX_LOCATOR_REPORTING_MODE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorreporting_mode instead of this: aox_locator_reporting_mode
      return aox_locator_reporting_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorposition_and_orientation_valid instead of this: aox_locator_position_and_orientation_valid
      return aox_locator_position_and_orientation_valid_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_POSITION_AND_ORIENTATION_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorposition_and_orientation instead of this: aox_locator_position_and_orientation
      return aox_locator_position_and_orientation_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_AZIMUTH_MASK_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorazimuth_mask instead of this: aox_locator_azimuth_mask
      return aox_locator_azimuth_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_ELEVATION_MASK_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorelevation_mask instead of this: aox_locator_elevation_mask
      return aox_locator_elevation_mask_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_ALLOW_LIST_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorallow_list instead of this: aox_locator_allow_list
      return aox_locator_allow_list_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_AOX_MODE_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatoraox_mode instead of this: aox_locator_aox_mode
      return aox_locator_aox_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_ANTENNA_MODE_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorantenna_mode instead of this: aox_locator_antenna_mode
      return aox_locator_antenna_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_ANTENNA_ARRAY_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorantenna_array instead of this: aox_locator_antenna_array
      return aox_locator_antenna_array_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_PERIOD_SAMPLES_ENUM_NAME_AVAILABLE
    if (11 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorperiod_samples instead of this: aox_locator_period_samples
      return aox_locator_period_samples_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_ANGLE_FILTERING_ENUM_NAME_AVAILABLE
    if (12 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorangle_filtering instead of this: aox_locator_angle_filtering
      return aox_locator_angle_filtering_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_ANGLE_FILTERING_WEIGHT_ENUM_NAME_AVAILABLE
    if (13 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorangle_filtering_weight instead of this: aox_locator_angle_filtering_weight
      return aox_locator_angle_filtering_weight_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT_ENUM_NAME_AVAILABLE
    if (14 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorangle_correction_timeout instead of this: aox_locator_angle_correction_timeout
      return aox_locator_angle_correction_timeout_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_ANGLE_CORRECTION_DELAY_ENUM_NAME_AVAILABLE
    if (15 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorangle_correction_delay instead of this: aox_locator_angle_correction_delay
      return aox_locator_angle_correction_delay_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_CTE_MODE_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorcte_mode instead of this: aox_locator_cte_mode
      return aox_locator_cte_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_CTE_SAMPLING_INTERVAL_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorcte_sampling_interval instead of this: aox_locator_cte_sampling_interval
      return aox_locator_cte_sampling_interval_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_CTE_LENGTH_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorcte_length instead of this: aox_locator_cte_length
      return aox_locator_cte_length_get_enum_value_name(value);
    }
  #endif
  #ifdef AOX_LOCATOR_SLOT_DURATION_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorslot_duration instead of this: aox_locator_slot_duration
      return aox_locator_slot_duration_get_enum_value_name(value);
    }
  #endif
  }

  if (64785 == cluster_id) {
  #ifdef AOX_POSITION_ESTIMATION_POSITION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_position_estimationposition instead of this: aox_position_estimation_position
      return aox_position_estimation_position_get_enum_value_name(value);
    }
  #endif
  }

  if (64786 == cluster_id) {
  #ifdef PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: protocol_controller_network_managementnetwork_management_state instead of this: protocol_controller_network_management_network_management_state
      return protocol_controller_network_management_network_management_state_get_enum_value_name(value);
    }
  #endif
  }

  if (64787 == cluster_id) {
  #ifdef DESCRIPTOR_DEVICE_TYPE_LIST_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: descriptordevice_type_list instead of this: descriptor_device_type_list
      return descriptor_device_type_list_get_enum_value_name(value);
    }
  #endif
  }

  if (64788 == cluster_id) {
  #ifdef UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_fan_controlz_wave_fan_mode instead of this: unify_fan_control_z_wave_fan_mode
      return unify_fan_control_z_wave_fan_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_fan_controlz_wave_supported_fan_mode instead of this: unify_fan_control_z_wave_supported_fan_mode
      return unify_fan_control_z_wave_supported_fan_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_fan_controlz_wave_fan_state instead of this: unify_fan_control_z_wave_fan_state
      return unify_fan_control_z_wave_fan_state_get_enum_value_name(value);
    }
  #endif
  }

  if (64789 == cluster_id) {
  #ifdef UNIFY_THERMOSTAT_THERMOSTAT_MODE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_thermostatthermostat_mode instead of this: unify_thermostat_thermostat_mode
      return unify_thermostat_thermostat_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_thermostatsupported_thermostat_mode instead of this: unify_thermostat_supported_thermostat_mode
      return unify_thermostat_supported_thermostat_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_THERMOSTAT_OPERATING_STATE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_thermostatoperating_state instead of this: unify_thermostat_operating_state
      return unify_thermostat_operating_state_get_enum_value_name(value);
    }
  #endif
  }

  if (64928 == cluster_id) {
  #ifdef UNIFY_HUMIDITY_CONTROL_REPORTING_MODE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlreporting_mode instead of this: unify_humidity_control_reporting_mode
      return unify_humidity_control_reporting_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlsupported_reporting_mode instead of this: unify_humidity_control_supported_reporting_mode
      return unify_humidity_control_supported_reporting_mode_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_CURRENT_STATE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlcurrent_state instead of this: unify_humidity_control_current_state
      return unify_humidity_control_current_state_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlsupported_set_points instead of this: unify_humidity_control_supported_set_points
      return unify_humidity_control_supported_set_points_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint_min instead of this: unify_humidity_control_humidifier_setpoint_min
      return unify_humidity_control_humidifier_setpoint_min_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint_max instead of this: unify_humidity_control_humidifier_setpoint_max
      return unify_humidity_control_humidifier_setpoint_max_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint instead of this: unify_humidity_control_humidifier_setpoint
      return unify_humidity_control_humidifier_setpoint_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint_scale instead of this: unify_humidity_control_humidifier_setpoint_scale
      return unify_humidity_control_humidifier_setpoint_scale_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint_precision instead of this: unify_humidity_control_humidifier_setpoint_precision
      return unify_humidity_control_humidifier_setpoint_precision_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint_min instead of this: unify_humidity_control_dehumidifier_setpoint_min
      return unify_humidity_control_dehumidifier_setpoint_min_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX_ENUM_NAME_AVAILABLE
    if (11 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint_max instead of this: unify_humidity_control_dehumidifier_setpoint_max
      return unify_humidity_control_dehumidifier_setpoint_max_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_ENUM_NAME_AVAILABLE
    if (12 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint instead of this: unify_humidity_control_dehumidifier_setpoint
      return unify_humidity_control_dehumidifier_setpoint_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE_ENUM_NAME_AVAILABLE
    if (13 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint_scale instead of this: unify_humidity_control_dehumidifier_setpoint_scale
      return unify_humidity_control_dehumidifier_setpoint_scale_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION_ENUM_NAME_AVAILABLE
    if (14 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint_precision instead of this: unify_humidity_control_dehumidifier_setpoint_precision
      return unify_humidity_control_dehumidifier_setpoint_precision_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN_ENUM_NAME_AVAILABLE
    if (15 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint_min instead of this: unify_humidity_control_auto_setpoint_min
      return unify_humidity_control_auto_setpoint_min_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint_max instead of this: unify_humidity_control_auto_setpoint_max
      return unify_humidity_control_auto_setpoint_max_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint instead of this: unify_humidity_control_auto_setpoint
      return unify_humidity_control_auto_setpoint_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint_scale instead of this: unify_humidity_control_auto_setpoint_scale
      return unify_humidity_control_auto_setpoint_scale_get_enum_value_name(value);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint_precision instead of this: unify_humidity_control_auto_setpoint_precision
      return unify_humidity_control_auto_setpoint_precision_get_enum_value_name(value);
    }
  #endif
  }


  std::string value_name;
  return value_name;
}

uint32_t get_enum_name_value(
  dotdot_cluster_id_t cluster_id,
  dotdot_attribute_id_t attribute_id,
  const std::string &name)
{
  if (0 == cluster_id) {
  #ifdef BASIC_ZCL_VERSION_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basiczcl_version instead of this: basic_zcl_version
      return basic_zcl_version_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_APPLICATION_VERSION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicapplication_version instead of this: basic_application_version
      return basic_application_version_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_STACK_VERSION_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicstack_version instead of this: basic_stack_version
      return basic_stack_version_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_HW_VERSION_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basichw_version instead of this: basic_hw_version
      return basic_hw_version_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_MANUFACTURER_NAME_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicmanufacturer_name instead of this: basic_manufacturer_name
      return basic_manufacturer_name_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_MODEL_IDENTIFIER_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicmodel_identifier instead of this: basic_model_identifier
      return basic_model_identifier_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_DATE_CODE_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicdate_code instead of this: basic_date_code
      return basic_date_code_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_POWER_SOURCE_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicpower_source instead of this: basic_power_source
      return basic_power_source_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_GENERIC_DEVICE_CLASS_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicgeneric_device_class instead of this: basic_generic_device_class
      return basic_generic_device_class_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_GENERIC_DEVICE_TYPE_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicgeneric_device_type instead of this: basic_generic_device_type
      return basic_generic_device_type_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_PRODUCT_CODE_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicproduct_code instead of this: basic_product_code
      return basic_product_code_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_PRODUCTURL_ENUM_NAME_AVAILABLE
    if (11 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicproducturl instead of this: basic_producturl
      return basic_producturl_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_MANUFACTURER_VERSION_DETAILS_ENUM_NAME_AVAILABLE
    if (12 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicmanufacturer_version_details instead of this: basic_manufacturer_version_details
      return basic_manufacturer_version_details_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_SERIAL_NUMBER_ENUM_NAME_AVAILABLE
    if (13 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicserial_number instead of this: basic_serial_number
      return basic_serial_number_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_PRODUCT_LABEL_ENUM_NAME_AVAILABLE
    if (14 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicproduct_label instead of this: basic_product_label
      return basic_product_label_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_LOCATION_DESCRIPTION_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basiclocation_description instead of this: basic_location_description
      return basic_location_description_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_PHYSICAL_ENVIRONMENT_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicphysical_environment instead of this: basic_physical_environment
      return basic_physical_environment_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_DEVICE_ENABLED_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicdevice_enabled instead of this: basic_device_enabled
      return basic_device_enabled_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicalarm_mask instead of this: basic_alarm_mask
      return basic_alarm_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_DISABLE_LOCAL_CONFIG_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicdisable_local_config instead of this: basic_disable_local_config
      return basic_disable_local_config_get_enum_value_number(name);
    }
  #endif
  #ifdef BASIC_SW_BUILDID_ENUM_NAME_AVAILABLE
    if (16384 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: basicsw_buildid instead of this: basic_sw_buildid
      return basic_sw_buildid_get_enum_value_number(name);
    }
  #endif
  }

  if (1 == cluster_id) {
  #ifdef POWER_CONFIGURATION_MAINS_VOLTAGE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_voltage instead of this: power_configuration_mains_voltage
      return power_configuration_mains_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_FREQUENCY_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_frequency instead of this: power_configuration_mains_frequency
      return power_configuration_mains_frequency_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_alarm_mask instead of this: power_configuration_mains_alarm_mask
      return power_configuration_mains_alarm_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_voltage_min_threshold instead of this: power_configuration_mains_voltage_min_threshold
      return power_configuration_mains_voltage_min_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_voltage_max_threshold instead of this: power_configuration_mains_voltage_max_threshold
      return power_configuration_mains_voltage_max_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationmains_voltage_dwell_trip_point instead of this: power_configuration_mains_voltage_dwell_trip_point
      return power_configuration_mains_voltage_dwell_trip_point_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage instead of this: power_configuration_battery_voltage
      return power_configuration_battery_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_remaining instead of this: power_configuration_battery_percentage_remaining
      return power_configuration_battery_percentage_remaining_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_MANUFACTURER_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_manufacturer instead of this: power_configuration_battery_manufacturer
      return power_configuration_battery_manufacturer_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_SIZE_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_size instead of this: power_configuration_battery_size
      return power_configuration_battery_size_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERYA_HR_RATING_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbatterya_hr_rating instead of this: power_configuration_batterya_hr_rating
      return power_configuration_batterya_hr_rating_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_QUANTITY_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_quantity instead of this: power_configuration_battery_quantity
      return power_configuration_battery_quantity_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_rated_voltage instead of this: power_configuration_battery_rated_voltage
      return power_configuration_battery_rated_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_alarm_mask instead of this: power_configuration_battery_alarm_mask
      return power_configuration_battery_alarm_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (54 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage_min_threshold instead of this: power_configuration_battery_voltage_min_threshold
      return power_configuration_battery_voltage_min_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (55 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage_threshold1 instead of this: power_configuration_battery_voltage_threshold1
      return power_configuration_battery_voltage_threshold1_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (56 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage_threshold2 instead of this: power_configuration_battery_voltage_threshold2
      return power_configuration_battery_voltage_threshold2_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (57 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_voltage_threshold3 instead of this: power_configuration_battery_voltage_threshold3
      return power_configuration_battery_voltage_threshold3_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (58 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_min_threshold instead of this: power_configuration_battery_percentage_min_threshold
      return power_configuration_battery_percentage_min_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (59 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_threshold1 instead of this: power_configuration_battery_percentage_threshold1
      return power_configuration_battery_percentage_threshold1_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (60 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_threshold2 instead of this: power_configuration_battery_percentage_threshold2
      return power_configuration_battery_percentage_threshold2_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (61 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_percentage_threshold3 instead of this: power_configuration_battery_percentage_threshold3
      return power_configuration_battery_percentage_threshold3_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY_ALARM_STATE_ENUM_NAME_AVAILABLE
    if (62 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery_alarm_state instead of this: power_configuration_battery_alarm_state
      return power_configuration_battery_alarm_state_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage instead of this: power_configuration_battery2_voltage
      return power_configuration_battery2_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING_ENUM_NAME_AVAILABLE
    if (65 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_remaining instead of this: power_configuration_battery2_percentage_remaining
      return power_configuration_battery2_percentage_remaining_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_MANUFACTURER_ENUM_NAME_AVAILABLE
    if (80 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_manufacturer instead of this: power_configuration_battery2_manufacturer
      return power_configuration_battery2_manufacturer_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_SIZE_ENUM_NAME_AVAILABLE
    if (81 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_size instead of this: power_configuration_battery2_size
      return power_configuration_battery2_size_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2A_HR_RATING_ENUM_NAME_AVAILABLE
    if (82 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2a_hr_rating instead of this: power_configuration_battery2a_hr_rating
      return power_configuration_battery2a_hr_rating_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_QUANTITY_ENUM_NAME_AVAILABLE
    if (83 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_quantity instead of this: power_configuration_battery2_quantity
      return power_configuration_battery2_quantity_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE_ENUM_NAME_AVAILABLE
    if (84 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_rated_voltage instead of this: power_configuration_battery2_rated_voltage
      return power_configuration_battery2_rated_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (85 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_alarm_mask instead of this: power_configuration_battery2_alarm_mask
      return power_configuration_battery2_alarm_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (86 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage_min_threshold instead of this: power_configuration_battery2_voltage_min_threshold
      return power_configuration_battery2_voltage_min_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (87 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage_threshold1 instead of this: power_configuration_battery2_voltage_threshold1
      return power_configuration_battery2_voltage_threshold1_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (88 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage_threshold2 instead of this: power_configuration_battery2_voltage_threshold2
      return power_configuration_battery2_voltage_threshold2_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (89 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_voltage_threshold3 instead of this: power_configuration_battery2_voltage_threshold3
      return power_configuration_battery2_voltage_threshold3_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (90 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_min_threshold instead of this: power_configuration_battery2_percentage_min_threshold
      return power_configuration_battery2_percentage_min_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (91 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_threshold1 instead of this: power_configuration_battery2_percentage_threshold1
      return power_configuration_battery2_percentage_threshold1_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (92 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_threshold2 instead of this: power_configuration_battery2_percentage_threshold2
      return power_configuration_battery2_percentage_threshold2_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (93 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_percentage_threshold3 instead of this: power_configuration_battery2_percentage_threshold3
      return power_configuration_battery2_percentage_threshold3_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY2_ALARM_STATE_ENUM_NAME_AVAILABLE
    if (94 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery2_alarm_state instead of this: power_configuration_battery2_alarm_state
      return power_configuration_battery2_alarm_state_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_ENUM_NAME_AVAILABLE
    if (96 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage instead of this: power_configuration_battery3_voltage
      return power_configuration_battery3_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING_ENUM_NAME_AVAILABLE
    if (97 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_remaining instead of this: power_configuration_battery3_percentage_remaining
      return power_configuration_battery3_percentage_remaining_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_MANUFACTURER_ENUM_NAME_AVAILABLE
    if (112 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_manufacturer instead of this: power_configuration_battery3_manufacturer
      return power_configuration_battery3_manufacturer_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_SIZE_ENUM_NAME_AVAILABLE
    if (113 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_size instead of this: power_configuration_battery3_size
      return power_configuration_battery3_size_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3A_HR_RATING_ENUM_NAME_AVAILABLE
    if (114 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3a_hr_rating instead of this: power_configuration_battery3a_hr_rating
      return power_configuration_battery3a_hr_rating_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_QUANTITY_ENUM_NAME_AVAILABLE
    if (115 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_quantity instead of this: power_configuration_battery3_quantity
      return power_configuration_battery3_quantity_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE_ENUM_NAME_AVAILABLE
    if (116 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_rated_voltage instead of this: power_configuration_battery3_rated_voltage
      return power_configuration_battery3_rated_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (117 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_alarm_mask instead of this: power_configuration_battery3_alarm_mask
      return power_configuration_battery3_alarm_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (118 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage_min_threshold instead of this: power_configuration_battery3_voltage_min_threshold
      return power_configuration_battery3_voltage_min_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (119 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage_threshold1 instead of this: power_configuration_battery3_voltage_threshold1
      return power_configuration_battery3_voltage_threshold1_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (120 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage_threshold2 instead of this: power_configuration_battery3_voltage_threshold2
      return power_configuration_battery3_voltage_threshold2_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (121 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_voltage_threshold3 instead of this: power_configuration_battery3_voltage_threshold3
      return power_configuration_battery3_voltage_threshold3_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD_ENUM_NAME_AVAILABLE
    if (122 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_min_threshold instead of this: power_configuration_battery3_percentage_min_threshold
      return power_configuration_battery3_percentage_min_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1_ENUM_NAME_AVAILABLE
    if (123 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_threshold1 instead of this: power_configuration_battery3_percentage_threshold1
      return power_configuration_battery3_percentage_threshold1_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2_ENUM_NAME_AVAILABLE
    if (124 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_threshold2 instead of this: power_configuration_battery3_percentage_threshold2
      return power_configuration_battery3_percentage_threshold2_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3_ENUM_NAME_AVAILABLE
    if (125 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_percentage_threshold3 instead of this: power_configuration_battery3_percentage_threshold3
      return power_configuration_battery3_percentage_threshold3_get_enum_value_number(name);
    }
  #endif
  #ifdef POWER_CONFIGURATION_BATTERY3_ALARM_STATE_ENUM_NAME_AVAILABLE
    if (126 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: power_configurationbattery3_alarm_state instead of this: power_configuration_battery3_alarm_state
      return power_configuration_battery3_alarm_state_get_enum_value_number(name);
    }
  #endif
  }

  if (2 == cluster_id) {
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationcurrent_temperature instead of this: device_temperature_configuration_current_temperature
      return device_temperature_configuration_current_temperature_get_enum_value_number(name);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationmin_temp_experienced instead of this: device_temperature_configuration_min_temp_experienced
      return device_temperature_configuration_min_temp_experienced_get_enum_value_number(name);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationmax_temp_experienced instead of this: device_temperature_configuration_max_temp_experienced
      return device_temperature_configuration_max_temp_experienced_get_enum_value_number(name);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationover_temp_total_dwell instead of this: device_temperature_configuration_over_temp_total_dwell
      return device_temperature_configuration_over_temp_total_dwell_get_enum_value_number(name);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationdevice_temp_alarm_mask instead of this: device_temperature_configuration_device_temp_alarm_mask
      return device_temperature_configuration_device_temp_alarm_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationlow_temp_threshold instead of this: device_temperature_configuration_low_temp_threshold
      return device_temperature_configuration_low_temp_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationhigh_temp_threshold instead of this: device_temperature_configuration_high_temp_threshold
      return device_temperature_configuration_high_temp_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationlow_temp_dwell_trip_point instead of this: device_temperature_configuration_low_temp_dwell_trip_point
      return device_temperature_configuration_low_temp_dwell_trip_point_get_enum_value_number(name);
    }
  #endif
  #ifdef DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: device_temperature_configurationhigh_temp_dwell_trip_point instead of this: device_temperature_configuration_high_temp_dwell_trip_point
      return device_temperature_configuration_high_temp_dwell_trip_point_get_enum_value_number(name);
    }
  #endif
  }

  if (3 == cluster_id) {
  #ifdef IDENTIFY_IDENTIFY_TIME_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: identifyidentify_time instead of this: identify_identify_time
      return identify_identify_time_get_enum_value_number(name);
    }
  #endif
  }

  if (4 == cluster_id) {
  #ifdef GROUPS_NAME_SUPPORT_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: groupsname_support instead of this: groups_name_support
      return groups_name_support_get_enum_value_number(name);
    }
  #endif
  }

  if (5 == cluster_id) {
  #ifdef SCENES_SCENE_COUNT_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenesscene_count instead of this: scenes_scene_count
      return scenes_scene_count_get_enum_value_number(name);
    }
  #endif
  #ifdef SCENES_CURRENT_SCENE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenescurrent_scene instead of this: scenes_current_scene
      return scenes_current_scene_get_enum_value_number(name);
    }
  #endif
  #ifdef SCENES_CURRENT_GROUP_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenescurrent_group instead of this: scenes_current_group
      return scenes_current_group_get_enum_value_number(name);
    }
  #endif
  #ifdef SCENES_SCENE_VALID_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenesscene_valid instead of this: scenes_scene_valid
      return scenes_scene_valid_get_enum_value_number(name);
    }
  #endif
  #ifdef SCENES_NAME_SUPPORT_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenesname_support instead of this: scenes_name_support
      return scenes_name_support_get_enum_value_number(name);
    }
  #endif
  #ifdef SCENES_LAST_CONFIGURED_BY_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: sceneslast_configured_by instead of this: scenes_last_configured_by
      return scenes_last_configured_by_get_enum_value_number(name);
    }
  #endif
  #ifdef SCENES_SCENE_TABLE_ENUM_NAME_AVAILABLE
    if (3841 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: scenesscene_table instead of this: scenes_scene_table
      return scenes_scene_table_get_enum_value_number(name);
    }
  #endif
  }

  if (6 == cluster_id) {
  #ifdef ON_OFF_ON_OFF_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offon_off instead of this: on_off_on_off
      return on_off_on_off_get_enum_value_number(name);
    }
  #endif
  #ifdef ON_OFF_GLOBAL_SCENE_CONTROL_ENUM_NAME_AVAILABLE
    if (16384 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offglobal_scene_control instead of this: on_off_global_scene_control
      return on_off_global_scene_control_get_enum_value_number(name);
    }
  #endif
  #ifdef ON_OFF_ON_TIME_ENUM_NAME_AVAILABLE
    if (16385 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offon_time instead of this: on_off_on_time
      return on_off_on_time_get_enum_value_number(name);
    }
  #endif
  #ifdef ON_OFF_OFF_WAIT_TIME_ENUM_NAME_AVAILABLE
    if (16386 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offoff_wait_time instead of this: on_off_off_wait_time
      return on_off_off_wait_time_get_enum_value_number(name);
    }
  #endif
  #ifdef ON_OFF_START_UP_ON_OFF_ENUM_NAME_AVAILABLE
    if (16387 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: on_offstart_up_on_off instead of this: on_off_start_up_on_off
      return on_off_start_up_on_off_get_enum_value_number(name);
    }
  #endif
  }

  if (8 == cluster_id) {
  #ifdef LEVEL_CURRENT_LEVEL_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelcurrent_level instead of this: level_current_level
      return level_current_level_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_REMAINING_TIME_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelremaining_time instead of this: level_remaining_time
      return level_remaining_time_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_MIN_LEVEL_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelmin_level instead of this: level_min_level
      return level_min_level_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_MAX_LEVEL_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelmax_level instead of this: level_max_level
      return level_max_level_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_CURRENT_FREQUENCY_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelcurrent_frequency instead of this: level_current_frequency
      return level_current_frequency_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_MIN_FREQUENCY_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelmin_frequency instead of this: level_min_frequency
      return level_min_frequency_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_MAX_FREQUENCY_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelmax_frequency instead of this: level_max_frequency
      return level_max_frequency_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_OPTIONS_ENUM_NAME_AVAILABLE
    if (15 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: leveloptions instead of this: level_options
      return level_options_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_ON_OFF_TRANSITION_TIME_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelon_off_transition_time instead of this: level_on_off_transition_time
      return level_on_off_transition_time_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_ON_LEVEL_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelon_level instead of this: level_on_level
      return level_on_level_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_ON_TRANSITION_TIME_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelon_transition_time instead of this: level_on_transition_time
      return level_on_transition_time_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_OFF_TRANSITION_TIME_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: leveloff_transition_time instead of this: level_off_transition_time
      return level_off_transition_time_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_DEFAULT_MOVE_RATE_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: leveldefault_move_rate instead of this: level_default_move_rate
      return level_default_move_rate_get_enum_value_number(name);
    }
  #endif
  #ifdef LEVEL_START_UP_CURRENT_LEVEL_ENUM_NAME_AVAILABLE
    if (16384 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: levelstart_up_current_level instead of this: level_start_up_current_level
      return level_start_up_current_level_get_enum_value_number(name);
    }
  #endif
  }

  if (9 == cluster_id) {
  #ifdef ALARMS_ALARM_COUNT_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: alarmsalarm_count instead of this: alarms_alarm_count
      return alarms_alarm_count_get_enum_value_number(name);
    }
  #endif
  }

  if (10 == cluster_id) {
  #ifdef TIME_TIME_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timetime instead of this: time_time
      return time_time_get_enum_value_number(name);
    }
  #endif
  #ifdef TIME_TIME_STATUS_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timetime_status instead of this: time_time_status
      return time_time_status_get_enum_value_number(name);
    }
  #endif
  #ifdef TIME_TIME_ZONE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timetime_zone instead of this: time_time_zone
      return time_time_zone_get_enum_value_number(name);
    }
  #endif
  #ifdef TIME_DST_START_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timedst_start instead of this: time_dst_start
      return time_dst_start_get_enum_value_number(name);
    }
  #endif
  #ifdef TIME_DST_END_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timedst_end instead of this: time_dst_end
      return time_dst_end_get_enum_value_number(name);
    }
  #endif
  #ifdef TIME_DST_SHIFT_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timedst_shift instead of this: time_dst_shift
      return time_dst_shift_get_enum_value_number(name);
    }
  #endif
  #ifdef TIME_STANDARD_TIME_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timestandard_time instead of this: time_standard_time
      return time_standard_time_get_enum_value_number(name);
    }
  #endif
  #ifdef TIME_LOCAL_TIME_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timelocal_time instead of this: time_local_time
      return time_local_time_get_enum_value_number(name);
    }
  #endif
  #ifdef TIME_LAST_SET_TIME_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timelast_set_time instead of this: time_last_set_time
      return time_last_set_time_get_enum_value_number(name);
    }
  #endif
  #ifdef TIME_VALID_UNTIL_TIME_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: timevalid_until_time instead of this: time_valid_until_time
      return time_valid_until_time_get_enum_value_number(name);
    }
  #endif
  }

  if (32 == cluster_id) {
  #ifdef POLL_CONTROL_CHECK_IN_INTERVAL_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlcheck_in_interval instead of this: poll_control_check_in_interval
      return poll_control_check_in_interval_get_enum_value_number(name);
    }
  #endif
  #ifdef POLL_CONTROL_LONG_POLL_INTERVAL_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controllong_poll_interval instead of this: poll_control_long_poll_interval
      return poll_control_long_poll_interval_get_enum_value_number(name);
    }
  #endif
  #ifdef POLL_CONTROL_SHORT_POLL_INTERVAL_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlshort_poll_interval instead of this: poll_control_short_poll_interval
      return poll_control_short_poll_interval_get_enum_value_number(name);
    }
  #endif
  #ifdef POLL_CONTROL_FAST_POLL_TIMEOUT_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlfast_poll_timeout instead of this: poll_control_fast_poll_timeout
      return poll_control_fast_poll_timeout_get_enum_value_number(name);
    }
  #endif
  #ifdef POLL_CONTROL_CHECK_IN_INTERVAL_MIN_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlcheck_in_interval_min instead of this: poll_control_check_in_interval_min
      return poll_control_check_in_interval_min_get_enum_value_number(name);
    }
  #endif
  #ifdef POLL_CONTROL_LONG_POLL_INTERVAL_MIN_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controllong_poll_interval_min instead of this: poll_control_long_poll_interval_min
      return poll_control_long_poll_interval_min_get_enum_value_number(name);
    }
  #endif
  #ifdef POLL_CONTROL_FAST_POLL_TIMEOUT_MAX_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: poll_controlfast_poll_timeout_max instead of this: poll_control_fast_poll_timeout_max
      return poll_control_fast_poll_timeout_max_get_enum_value_number(name);
    }
  #endif
  }

  if (256 == cluster_id) {
  #ifdef SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationphysical_closed_limit instead of this: shade_configuration_physical_closed_limit
      return shade_configuration_physical_closed_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef SHADE_CONFIGURATION_MOTOR_STEP_SIZE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationmotor_step_size instead of this: shade_configuration_motor_step_size
      return shade_configuration_motor_step_size_get_enum_value_number(name);
    }
  #endif
  #ifdef SHADE_CONFIGURATION_STATUS_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationstatus instead of this: shade_configuration_status
      return shade_configuration_status_get_enum_value_number(name);
    }
  #endif
  #ifdef SHADE_CONFIGURATION_CLOSED_LIMIT_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationclosed_limit instead of this: shade_configuration_closed_limit
      return shade_configuration_closed_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef SHADE_CONFIGURATION_MODE_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: shade_configurationmode instead of this: shade_configuration_mode
      return shade_configuration_mode_get_enum_value_number(name);
    }
  #endif
  }

  if (257 == cluster_id) {
  #ifdef DOOR_LOCK_LOCK_STATE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locklock_state instead of this: door_lock_lock_state
      return door_lock_lock_state_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_LOCK_TYPE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locklock_type instead of this: door_lock_lock_type
      return door_lock_lock_type_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_ACTUATOR_ENABLED_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockactuator_enabled instead of this: door_lock_actuator_enabled
      return door_lock_actuator_enabled_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_DOOR_STATE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockdoor_state instead of this: door_lock_door_state
      return door_lock_door_state_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_DOOR_OPEN_EVENTS_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockdoor_open_events instead of this: door_lock_door_open_events
      return door_lock_door_open_events_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_DOOR_CLOSED_EVENTS_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockdoor_closed_events instead of this: door_lock_door_closed_events
      return door_lock_door_closed_events_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_OPEN_PERIOD_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockopen_period instead of this: door_lock_open_period
      return door_lock_open_period_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_log_records_supported instead of this: door_lock_number_of_log_records_supported
      return door_lock_number_of_log_records_supported_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_total_users_supported instead of this: door_lock_number_of_total_users_supported
      return door_lock_number_of_total_users_supported_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_pin_users_supported instead of this: door_lock_number_of_pin_users_supported
      return door_lock_number_of_pin_users_supported_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_rfid_users_supported instead of this: door_lock_number_of_rfid_users_supported
      return door_lock_number_of_rfid_users_supported_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_week_day_schedules_supported_per_user instead of this: door_lock_number_of_week_day_schedules_supported_per_user
      return door_lock_number_of_week_day_schedules_supported_per_user_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_year_day_schedules_supported_per_user instead of this: door_lock_number_of_year_day_schedules_supported_per_user
      return door_lock_number_of_year_day_schedules_supported_per_user_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_holiday_schedules_supported instead of this: door_lock_number_of_holiday_schedules_supported
      return door_lock_number_of_holiday_schedules_supported_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_MAX_PIN_CODE_LENGTH_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmax_pin_code_length instead of this: door_lock_max_pin_code_length
      return door_lock_max_pin_code_length_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_MIN_PIN_CODE_LENGTH_ENUM_NAME_AVAILABLE
    if (24 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmin_pin_code_length instead of this: door_lock_min_pin_code_length
      return door_lock_min_pin_code_length_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_MAX_RFID_CODE_LENGTH_ENUM_NAME_AVAILABLE
    if (25 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmax_rfid_code_length instead of this: door_lock_max_rfid_code_length
      return door_lock_max_rfid_code_length_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_MIN_RFID_CODE_LENGTH_ENUM_NAME_AVAILABLE
    if (26 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmin_rfid_code_length instead of this: door_lock_min_rfid_code_length
      return door_lock_min_rfid_code_length_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_CREDENTIAL_RULES_SUPPORT_ENUM_NAME_AVAILABLE
    if (27 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockcredential_rules_support instead of this: door_lock_credential_rules_support
      return door_lock_credential_rules_support_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER_ENUM_NAME_AVAILABLE
    if (28 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locknumber_of_credentials_supported_per_user instead of this: door_lock_number_of_credentials_supported_per_user
      return door_lock_number_of_credentials_supported_per_user_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_LOGGING_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_logging instead of this: door_lock_enable_logging
      return door_lock_enable_logging_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_LANGUAGE_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locklanguage instead of this: door_lock_language
      return door_lock_language_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_LED_SETTINGS_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockled_settings instead of this: door_lock_led_settings
      return door_lock_led_settings_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_AUTO_RELOCK_TIME_ENUM_NAME_AVAILABLE
    if (35 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockauto_relock_time instead of this: door_lock_auto_relock_time
      return door_lock_auto_relock_time_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_SOUND_VOLUME_ENUM_NAME_AVAILABLE
    if (36 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locksound_volume instead of this: door_lock_sound_volume
      return door_lock_sound_volume_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_OPERATING_MODE_ENUM_NAME_AVAILABLE
    if (37 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockoperating_mode instead of this: door_lock_operating_mode
      return door_lock_operating_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_SUPPORTED_OPERATING_MODES_ENUM_NAME_AVAILABLE
    if (38 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locksupported_operating_modes instead of this: door_lock_supported_operating_modes
      return door_lock_supported_operating_modes_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_ENUM_NAME_AVAILABLE
    if (39 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockdefault_configuration_register instead of this: door_lock_default_configuration_register
      return door_lock_default_configuration_register_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING_ENUM_NAME_AVAILABLE
    if (40 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_local_programming instead of this: door_lock_enable_local_programming
      return door_lock_enable_local_programming_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING_ENUM_NAME_AVAILABLE
    if (41 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_one_touch_locking instead of this: door_lock_enable_one_touch_locking
      return door_lock_enable_one_touch_locking_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_INSIDE_STATUSLED_ENUM_NAME_AVAILABLE
    if (42 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_inside_statusled instead of this: door_lock_enable_inside_statusled
      return door_lock_enable_inside_statusled_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON_ENUM_NAME_AVAILABLE
    if (43 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockenable_privacy_mode_button instead of this: door_lock_enable_privacy_mode_button
      return door_lock_enable_privacy_mode_button_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_ENUM_NAME_AVAILABLE
    if (44 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locklocal_programming_features instead of this: door_lock_local_programming_features
      return door_lock_local_programming_features_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockwrong_code_entry_limit instead of this: door_lock_wrong_code_entry_limit
      return door_lock_wrong_code_entry_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockuser_code_temporary_disable_time instead of this: door_lock_user_code_temporary_disable_time
      return door_lock_user_code_temporary_disable_time_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_SEND_PIN_OVER_THE_AIR_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locksend_pin_over_the_air instead of this: door_lock_send_pin_over_the_air
      return door_lock_send_pin_over_the_air_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrequire_pi_nfor_rf_operation instead of this: door_lock_require_pi_nfor_rf_operation
      return door_lock_require_pi_nfor_rf_operation_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_SECURITY_LEVEL_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_locksecurity_level instead of this: door_lock_security_level
      return door_lock_security_level_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_EXPIRING_USER_TIMEOUT_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockexpiring_user_timeout instead of this: door_lock_expiring_user_timeout
      return door_lock_expiring_user_timeout_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockalarm_mask instead of this: door_lock_alarm_mask
      return door_lock_alarm_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (65 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockkeypad_operation_event_mask instead of this: door_lock_keypad_operation_event_mask
      return door_lock_keypad_operation_event_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_RF_OPERATION_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (66 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrf_operation_event_mask instead of this: door_lock_rf_operation_event_mask
      return door_lock_rf_operation_event_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (67 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockmanual_operation_event_mask instead of this: door_lock_manual_operation_event_mask
      return door_lock_manual_operation_event_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_RFID_OPERATION_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (68 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrfid_operation_event_mask instead of this: door_lock_rfid_operation_event_mask
      return door_lock_rfid_operation_event_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (69 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockkeypad_programming_event_mask instead of this: door_lock_keypad_programming_event_mask
      return door_lock_keypad_programming_event_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (70 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrf_programming_event_mask instead of this: door_lock_rf_programming_event_mask
      return door_lock_rf_programming_event_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK_ENUM_NAME_AVAILABLE
    if (71 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockrfid_programming_event_mask instead of this: door_lock_rfid_programming_event_mask
      return door_lock_rfid_programming_event_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef DOOR_LOCK_FEATURE_MAP_ENUM_NAME_AVAILABLE
    if (65532 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: door_lockfeature_map instead of this: door_lock_feature_map
      return door_lock_feature_map_get_enum_value_number(name);
    }
  #endif
  }

  if (258 == cluster_id) {
  #ifdef WINDOW_COVERING_WINDOW_COVERING_TYPE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringwindow_covering_type instead of this: window_covering_window_covering_type
      return window_covering_window_covering_type_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringphysical_closed_limit_lift instead of this: window_covering_physical_closed_limit_lift
      return window_covering_physical_closed_limit_lift_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringphysical_closed_limit_tilt instead of this: window_covering_physical_closed_limit_tilt
      return window_covering_physical_closed_limit_tilt_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_CURRENT_POSITION_LIFT_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringcurrent_position_lift instead of this: window_covering_current_position_lift
      return window_covering_current_position_lift_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_CURRENT_POSITION_TILT_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringcurrent_position_tilt instead of this: window_covering_current_position_tilt
      return window_covering_current_position_tilt_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringnumber_of_actuations_lift instead of this: window_covering_number_of_actuations_lift
      return window_covering_number_of_actuations_lift_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringnumber_of_actuations_tilt instead of this: window_covering_number_of_actuations_tilt
      return window_covering_number_of_actuations_tilt_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_CONFIG_OR_STATUS_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringconfig_or_status instead of this: window_covering_config_or_status
      return window_covering_config_or_status_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringcurrent_position_lift_percentage instead of this: window_covering_current_position_lift_percentage
      return window_covering_current_position_lift_percentage_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringcurrent_position_tilt_percentage instead of this: window_covering_current_position_tilt_percentage
      return window_covering_current_position_tilt_percentage_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT_ENUM_NAME_AVAILABLE
    if (256 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringinstalled_open_limit_lift instead of this: window_covering_installed_open_limit_lift
      return window_covering_installed_open_limit_lift_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT_ENUM_NAME_AVAILABLE
    if (257 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringinstalled_closed_limit_lift instead of this: window_covering_installed_closed_limit_lift
      return window_covering_installed_closed_limit_lift_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT_ENUM_NAME_AVAILABLE
    if (258 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringinstalled_open_limit_tilt instead of this: window_covering_installed_open_limit_tilt
      return window_covering_installed_open_limit_tilt_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT_ENUM_NAME_AVAILABLE
    if (259 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringinstalled_closed_limit_tilt instead of this: window_covering_installed_closed_limit_tilt
      return window_covering_installed_closed_limit_tilt_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_VELOCITY_LIFT_ENUM_NAME_AVAILABLE
    if (260 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringvelocity_lift instead of this: window_covering_velocity_lift
      return window_covering_velocity_lift_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_ACCELERATION_TIME_LIFT_ENUM_NAME_AVAILABLE
    if (261 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringacceleration_time_lift instead of this: window_covering_acceleration_time_lift
      return window_covering_acceleration_time_lift_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_DECELERATION_TIME_LIFT_ENUM_NAME_AVAILABLE
    if (262 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringdeceleration_time_lift instead of this: window_covering_deceleration_time_lift
      return window_covering_deceleration_time_lift_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_MODE_ENUM_NAME_AVAILABLE
    if (263 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringmode instead of this: window_covering_mode
      return window_covering_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT_ENUM_NAME_AVAILABLE
    if (264 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringintermediate_setpoints_lift instead of this: window_covering_intermediate_setpoints_lift
      return window_covering_intermediate_setpoints_lift_get_enum_value_number(name);
    }
  #endif
  #ifdef WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT_ENUM_NAME_AVAILABLE
    if (265 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: window_coveringintermediate_setpoints_tilt instead of this: window_covering_intermediate_setpoints_tilt
      return window_covering_intermediate_setpoints_tilt_get_enum_value_number(name);
    }
  #endif
  }

  if (259 == cluster_id) {
  #ifdef BARRIER_CONTROL_MOVING_STATE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlmoving_state instead of this: barrier_control_moving_state
      return barrier_control_moving_state_get_enum_value_number(name);
    }
  #endif
  #ifdef BARRIER_CONTROL_SAFETY_STATUS_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlsafety_status instead of this: barrier_control_safety_status
      return barrier_control_safety_status_get_enum_value_number(name);
    }
  #endif
  #ifdef BARRIER_CONTROL_CAPABILITIES_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlcapabilities instead of this: barrier_control_capabilities
      return barrier_control_capabilities_get_enum_value_number(name);
    }
  #endif
  #ifdef BARRIER_CONTROL_OPEN_EVENTS_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlopen_events instead of this: barrier_control_open_events
      return barrier_control_open_events_get_enum_value_number(name);
    }
  #endif
  #ifdef BARRIER_CONTROL_CLOSE_EVENTS_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlclose_events instead of this: barrier_control_close_events
      return barrier_control_close_events_get_enum_value_number(name);
    }
  #endif
  #ifdef BARRIER_CONTROL_COMMAND_OPEN_EVENTS_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlcommand_open_events instead of this: barrier_control_command_open_events
      return barrier_control_command_open_events_get_enum_value_number(name);
    }
  #endif
  #ifdef BARRIER_CONTROL_COMMAND_CLOSE_EVENTS_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlcommand_close_events instead of this: barrier_control_command_close_events
      return barrier_control_command_close_events_get_enum_value_number(name);
    }
  #endif
  #ifdef BARRIER_CONTROL_OPEN_PERIOD_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlopen_period instead of this: barrier_control_open_period
      return barrier_control_open_period_get_enum_value_number(name);
    }
  #endif
  #ifdef BARRIER_CONTROL_CLOSE_PERIOD_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlclose_period instead of this: barrier_control_close_period
      return barrier_control_close_period_get_enum_value_number(name);
    }
  #endif
  #ifdef BARRIER_CONTROL_BARRIER_POSITION_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: barrier_controlbarrier_position instead of this: barrier_control_barrier_position
      return barrier_control_barrier_position_get_enum_value_number(name);
    }
  #endif
  }

  if (512 == cluster_id) {
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_pressure instead of this: pump_configuration_and_control_max_pressure
      return pump_configuration_and_control_max_pressure_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_speed instead of this: pump_configuration_and_control_max_speed
      return pump_configuration_and_control_max_speed_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_flow instead of this: pump_configuration_and_control_max_flow
      return pump_configuration_and_control_max_flow_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_const_pressure instead of this: pump_configuration_and_control_min_const_pressure
      return pump_configuration_and_control_min_const_pressure_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_const_pressure instead of this: pump_configuration_and_control_max_const_pressure
      return pump_configuration_and_control_max_const_pressure_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_comp_pressure instead of this: pump_configuration_and_control_min_comp_pressure
      return pump_configuration_and_control_min_comp_pressure_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_comp_pressure instead of this: pump_configuration_and_control_max_comp_pressure
      return pump_configuration_and_control_max_comp_pressure_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_const_speed instead of this: pump_configuration_and_control_min_const_speed
      return pump_configuration_and_control_min_const_speed_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_const_speed instead of this: pump_configuration_and_control_max_const_speed
      return pump_configuration_and_control_max_const_speed_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_const_flow instead of this: pump_configuration_and_control_min_const_flow
      return pump_configuration_and_control_min_const_flow_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_const_flow instead of this: pump_configuration_and_control_max_const_flow
      return pump_configuration_and_control_max_const_flow_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP_ENUM_NAME_AVAILABLE
    if (11 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmin_const_temp instead of this: pump_configuration_and_control_min_const_temp
      return pump_configuration_and_control_min_const_temp_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP_ENUM_NAME_AVAILABLE
    if (12 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlmax_const_temp instead of this: pump_configuration_and_control_max_const_temp
      return pump_configuration_and_control_max_const_temp_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlpump_status instead of this: pump_configuration_and_control_pump_status
      return pump_configuration_and_control_pump_status_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controleffective_operation_mode instead of this: pump_configuration_and_control_effective_operation_mode
      return pump_configuration_and_control_effective_operation_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controleffective_control_mode instead of this: pump_configuration_and_control_effective_control_mode
      return pump_configuration_and_control_effective_control_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_CAPACITY_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlcapacity instead of this: pump_configuration_and_control_capacity
      return pump_configuration_and_control_capacity_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_SPEED_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlspeed instead of this: pump_configuration_and_control_speed
      return pump_configuration_and_control_speed_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controllifetime_running_hours instead of this: pump_configuration_and_control_lifetime_running_hours
      return pump_configuration_and_control_lifetime_running_hours_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_POWER_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlpower instead of this: pump_configuration_and_control_power
      return pump_configuration_and_control_power_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controllifetime_energy_consumed instead of this: pump_configuration_and_control_lifetime_energy_consumed
      return pump_configuration_and_control_lifetime_energy_consumed_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controloperation_mode instead of this: pump_configuration_and_control_operation_mode
      return pump_configuration_and_control_operation_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlcontrol_mode instead of this: pump_configuration_and_control_control_mode
      return pump_configuration_and_control_control_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pump_configuration_and_controlalarm_mask instead of this: pump_configuration_and_control_alarm_mask
      return pump_configuration_and_control_alarm_mask_get_enum_value_number(name);
    }
  #endif
  }

  if (513 == cluster_id) {
  #ifdef THERMOSTAT_LOCAL_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatlocal_temperature instead of this: thermostat_local_temperature
      return thermostat_local_temperature_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_OUTDOOR_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoutdoor_temperature instead of this: thermostat_outdoor_temperature
      return thermostat_outdoor_temperature_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPANCY_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupancy instead of this: thermostat_occupancy
      return thermostat_occupancy_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatabs_min_heat_setpoint_limit instead of this: thermostat_abs_min_heat_setpoint_limit
      return thermostat_abs_min_heat_setpoint_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatabs_max_heat_setpoint_limit instead of this: thermostat_abs_max_heat_setpoint_limit
      return thermostat_abs_max_heat_setpoint_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatabs_min_cool_setpoint_limit instead of this: thermostat_abs_min_cool_setpoint_limit
      return thermostat_abs_min_cool_setpoint_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatabs_max_cool_setpoint_limit instead of this: thermostat_abs_max_cool_setpoint_limit
      return thermostat_abs_max_cool_setpoint_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_PI_COOLING_DEMAND_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatpi_cooling_demand instead of this: thermostat_pi_cooling_demand
      return thermostat_pi_cooling_demand_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_PI_HEATING_DEMAND_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatpi_heating_demand instead of this: thermostat_pi_heating_demand
      return thermostat_pi_heating_demand_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostathvac_system_type_configuration instead of this: thermostat_hvac_system_type_configuration
      return thermostat_hvac_system_type_configuration_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatlocal_temperature_calibration instead of this: thermostat_local_temperature_calibration
      return thermostat_local_temperature_calibration_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_COOLING_SETPOINT_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_cooling_setpoint instead of this: thermostat_occupied_cooling_setpoint
      return thermostat_occupied_cooling_setpoint_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_HEATING_SETPOINT_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_heating_setpoint instead of this: thermostat_occupied_heating_setpoint
      return thermostat_occupied_heating_setpoint_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_cooling_setpoint instead of this: thermostat_unoccupied_cooling_setpoint
      return thermostat_unoccupied_cooling_setpoint_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_heating_setpoint instead of this: thermostat_unoccupied_heating_setpoint
      return thermostat_unoccupied_heating_setpoint_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmin_heat_setpoint_limit instead of this: thermostat_min_heat_setpoint_limit
      return thermostat_min_heat_setpoint_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmax_heat_setpoint_limit instead of this: thermostat_max_heat_setpoint_limit
      return thermostat_max_heat_setpoint_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_MIN_COOL_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmin_cool_setpoint_limit instead of this: thermostat_min_cool_setpoint_limit
      return thermostat_min_cool_setpoint_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_MAX_COOL_SETPOINT_LIMIT_ENUM_NAME_AVAILABLE
    if (24 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmax_cool_setpoint_limit instead of this: thermostat_max_cool_setpoint_limit
      return thermostat_max_cool_setpoint_limit_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_MIN_SETPOINT_DEAD_BAND_ENUM_NAME_AVAILABLE
    if (25 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatmin_setpoint_dead_band instead of this: thermostat_min_setpoint_dead_band
      return thermostat_min_setpoint_dead_band_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_REMOTE_SENSING_ENUM_NAME_AVAILABLE
    if (26 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatremote_sensing instead of this: thermostat_remote_sensing
      return thermostat_remote_sensing_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_ENUM_NAME_AVAILABLE
    if (27 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatcontrol_sequence_of_operation instead of this: thermostat_control_sequence_of_operation
      return thermostat_control_sequence_of_operation_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_SYSTEM_MODE_ENUM_NAME_AVAILABLE
    if (28 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatsystem_mode instead of this: thermostat_system_mode
      return thermostat_system_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_ALARM_MASK_ENUM_NAME_AVAILABLE
    if (29 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatalarm_mask instead of this: thermostat_alarm_mask
      return thermostat_alarm_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_THERMOSTAT_RUNNING_MODE_ENUM_NAME_AVAILABLE
    if (30 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatthermostat_running_mode instead of this: thermostat_thermostat_running_mode
      return thermostat_thermostat_running_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_START_OF_WEEK_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatstart_of_week instead of this: thermostat_start_of_week
      return thermostat_start_of_week_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatnumber_of_weekly_transitions instead of this: thermostat_number_of_weekly_transitions
      return thermostat_number_of_weekly_transitions_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatnumber_of_daily_transitions instead of this: thermostat_number_of_daily_transitions
      return thermostat_number_of_daily_transitions_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_ENUM_NAME_AVAILABLE
    if (35 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostattemperature_setpoint_hold instead of this: thermostat_temperature_setpoint_hold
      return thermostat_temperature_setpoint_hold_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION_ENUM_NAME_AVAILABLE
    if (36 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostattemperature_setpoint_hold_duration instead of this: thermostat_temperature_setpoint_hold_duration
      return thermostat_temperature_setpoint_hold_duration_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE_ENUM_NAME_AVAILABLE
    if (37 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatthermostat_programming_operation_mode instead of this: thermostat_thermostat_programming_operation_mode
      return thermostat_thermostat_programming_operation_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_THERMOSTAT_RUNNING_STATE_ENUM_NAME_AVAILABLE
    if (41 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatthermostat_running_state instead of this: thermostat_thermostat_running_state
      return thermostat_thermostat_running_state_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_SETPOINT_CHANGE_SOURCE_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatsetpoint_change_source instead of this: thermostat_setpoint_change_source
      return thermostat_setpoint_change_source_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_SETPOINT_CHANGE_AMOUNT_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatsetpoint_change_amount instead of this: thermostat_setpoint_change_amount
      return thermostat_setpoint_change_amount_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatsetpoint_change_source_timestamp instead of this: thermostat_setpoint_change_source_timestamp
      return thermostat_setpoint_change_source_timestamp_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_SETBACK_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_setback instead of this: thermostat_occupied_setback
      return thermostat_occupied_setback_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_SETBACK_MIN_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_setback_min instead of this: thermostat_occupied_setback_min
      return thermostat_occupied_setback_min_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_OCCUPIED_SETBACK_MAX_ENUM_NAME_AVAILABLE
    if (54 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatoccupied_setback_max instead of this: thermostat_occupied_setback_max
      return thermostat_occupied_setback_max_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_SETBACK_ENUM_NAME_AVAILABLE
    if (55 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_setback instead of this: thermostat_unoccupied_setback
      return thermostat_unoccupied_setback_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_SETBACK_MIN_ENUM_NAME_AVAILABLE
    if (56 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_setback_min instead of this: thermostat_unoccupied_setback_min
      return thermostat_unoccupied_setback_min_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_UNOCCUPIED_SETBACK_MAX_ENUM_NAME_AVAILABLE
    if (57 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatunoccupied_setback_max instead of this: thermostat_unoccupied_setback_max
      return thermostat_unoccupied_setback_max_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_EMERGENCY_HEAT_DELTA_ENUM_NAME_AVAILABLE
    if (58 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatemergency_heat_delta instead of this: thermostat_emergency_heat_delta
      return thermostat_emergency_heat_delta_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_AC_TYPE_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_type instead of this: thermostat_ac_type
      return thermostat_ac_type_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_AC_CAPACITY_ENUM_NAME_AVAILABLE
    if (65 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_capacity instead of this: thermostat_ac_capacity
      return thermostat_ac_capacity_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_AC_REFRIGERANT_TYPE_ENUM_NAME_AVAILABLE
    if (66 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_refrigerant_type instead of this: thermostat_ac_refrigerant_type
      return thermostat_ac_refrigerant_type_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_AC_COMPRESSOR_TYPE_ENUM_NAME_AVAILABLE
    if (67 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_compressor_type instead of this: thermostat_ac_compressor_type
      return thermostat_ac_compressor_type_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_AC_ERROR_CODE_ENUM_NAME_AVAILABLE
    if (68 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_error_code instead of this: thermostat_ac_error_code
      return thermostat_ac_error_code_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_AC_LOUVER_POSITION_ENUM_NAME_AVAILABLE
    if (69 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_louver_position instead of this: thermostat_ac_louver_position
      return thermostat_ac_louver_position_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_AC_COIL_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (70 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_coil_temperature instead of this: thermostat_ac_coil_temperature
      return thermostat_ac_coil_temperature_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_AC_CAPACITY_FORMAT_ENUM_NAME_AVAILABLE
    if (71 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostatac_capacity_format instead of this: thermostat_ac_capacity_format
      return thermostat_ac_capacity_format_get_enum_value_number(name);
    }
  #endif
  }

  if (514 == cluster_id) {
  #ifdef FAN_CONTROL_FAN_MODE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: fan_controlfan_mode instead of this: fan_control_fan_mode
      return fan_control_fan_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef FAN_CONTROL_FAN_MODE_SEQUENCE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: fan_controlfan_mode_sequence instead of this: fan_control_fan_mode_sequence
      return fan_control_fan_mode_sequence_get_enum_value_number(name);
    }
  #endif
  }

  if (515 == cluster_id) {
  #ifdef DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controlrelative_humidity instead of this: dehumidification_control_relative_humidity
      return dehumidification_control_relative_humidity_get_enum_value_number(name);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controldehumidification_cooling instead of this: dehumidification_control_dehumidification_cooling
      return dehumidification_control_dehumidification_cooling_get_enum_value_number(name);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controlrh_dehumidification_setpoint instead of this: dehumidification_control_rh_dehumidification_setpoint
      return dehumidification_control_rh_dehumidification_setpoint_get_enum_value_number(name);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controlrelative_humidity_mode instead of this: dehumidification_control_relative_humidity_mode
      return dehumidification_control_relative_humidity_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controldehumidification_lockout instead of this: dehumidification_control_dehumidification_lockout
      return dehumidification_control_dehumidification_lockout_get_enum_value_number(name);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controldehumidification_hysteresis instead of this: dehumidification_control_dehumidification_hysteresis
      return dehumidification_control_dehumidification_hysteresis_get_enum_value_number(name);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controldehumidification_max_cool instead of this: dehumidification_control_dehumidification_max_cool
      return dehumidification_control_dehumidification_max_cool_get_enum_value_number(name);
    }
  #endif
  #ifdef DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: dehumidification_controlrelative_humidity_display instead of this: dehumidification_control_relative_humidity_display
      return dehumidification_control_relative_humidity_display_get_enum_value_number(name);
    }
  #endif
  }

  if (516 == cluster_id) {
  #ifdef THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostat_user_interface_configurationtemperature_display_mode instead of this: thermostat_user_interface_configuration_temperature_display_mode
      return thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostat_user_interface_configurationkeypad_lockout instead of this: thermostat_user_interface_configuration_keypad_lockout
      return thermostat_user_interface_configuration_keypad_lockout_get_enum_value_number(name);
    }
  #endif
  #ifdef THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: thermostat_user_interface_configurationschedule_programming_visibility instead of this: thermostat_user_interface_configuration_schedule_programming_visibility
      return thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_number(name);
    }
  #endif
  }

  if (768 == cluster_id) {
  #ifdef COLOR_CONTROL_CURRENT_HUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcurrent_hue instead of this: color_control_current_hue
      return color_control_current_hue_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_CURRENT_SATURATION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcurrent_saturation instead of this: color_control_current_saturation
      return color_control_current_saturation_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_REMAINING_TIME_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlremaining_time instead of this: color_control_remaining_time
      return color_control_remaining_time_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_CURRENTX_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcurrentx instead of this: color_control_currentx
      return color_control_currentx_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_CURRENTY_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcurrenty instead of this: color_control_currenty
      return color_control_currenty_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_DRIFT_COMPENSATION_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controldrift_compensation instead of this: color_control_drift_compensation
      return color_control_drift_compensation_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COMPENSATION_TEXT_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcompensation_text instead of this: color_control_compensation_text
      return color_control_compensation_text_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_temperature_mireds instead of this: color_control_color_temperature_mireds
      return color_control_color_temperature_mireds_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_MODE_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_mode instead of this: color_control_color_mode
      return color_control_color_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_OPTIONS_ENUM_NAME_AVAILABLE
    if (15 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controloptions instead of this: color_control_options
      return color_control_options_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_NUMBER_OF_PRIMARIES_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlnumber_of_primaries instead of this: color_control_number_of_primaries
      return color_control_number_of_primaries_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY1X_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary1x instead of this: color_control_primary1x
      return color_control_primary1x_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY1Y_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary1y instead of this: color_control_primary1y
      return color_control_primary1y_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY1_INTENSITY_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary1_intensity instead of this: color_control_primary1_intensity
      return color_control_primary1_intensity_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY2X_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary2x instead of this: color_control_primary2x
      return color_control_primary2x_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY2Y_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary2y instead of this: color_control_primary2y
      return color_control_primary2y_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY2_INTENSITY_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary2_intensity instead of this: color_control_primary2_intensity
      return color_control_primary2_intensity_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY3X_ENUM_NAME_AVAILABLE
    if (25 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary3x instead of this: color_control_primary3x
      return color_control_primary3x_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY3Y_ENUM_NAME_AVAILABLE
    if (26 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary3y instead of this: color_control_primary3y
      return color_control_primary3y_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY3_INTENSITY_ENUM_NAME_AVAILABLE
    if (27 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary3_intensity instead of this: color_control_primary3_intensity
      return color_control_primary3_intensity_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY4X_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary4x instead of this: color_control_primary4x
      return color_control_primary4x_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY4Y_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary4y instead of this: color_control_primary4y
      return color_control_primary4y_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY4_INTENSITY_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary4_intensity instead of this: color_control_primary4_intensity
      return color_control_primary4_intensity_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY5X_ENUM_NAME_AVAILABLE
    if (36 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary5x instead of this: color_control_primary5x
      return color_control_primary5x_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY5Y_ENUM_NAME_AVAILABLE
    if (37 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary5y instead of this: color_control_primary5y
      return color_control_primary5y_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY5_INTENSITY_ENUM_NAME_AVAILABLE
    if (38 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary5_intensity instead of this: color_control_primary5_intensity
      return color_control_primary5_intensity_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY6X_ENUM_NAME_AVAILABLE
    if (40 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary6x instead of this: color_control_primary6x
      return color_control_primary6x_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY6Y_ENUM_NAME_AVAILABLE
    if (41 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary6y instead of this: color_control_primary6y
      return color_control_primary6y_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_PRIMARY6_INTENSITY_ENUM_NAME_AVAILABLE
    if (42 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlprimary6_intensity instead of this: color_control_primary6_intensity
      return color_control_primary6_intensity_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_WHITE_POINTX_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlwhite_pointx instead of this: color_control_white_pointx
      return color_control_white_pointx_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_WHITE_POINTY_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlwhite_pointy instead of this: color_control_white_pointy
      return color_control_white_pointy_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTRX_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointrx instead of this: color_control_color_pointrx
      return color_control_color_pointrx_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTRY_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointry instead of this: color_control_color_pointry
      return color_control_color_pointry_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTR_INTENSITY_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointr_intensity instead of this: color_control_color_pointr_intensity
      return color_control_color_pointr_intensity_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTGX_ENUM_NAME_AVAILABLE
    if (54 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointgx instead of this: color_control_color_pointgx
      return color_control_color_pointgx_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTGY_ENUM_NAME_AVAILABLE
    if (55 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointgy instead of this: color_control_color_pointgy
      return color_control_color_pointgy_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTG_INTENSITY_ENUM_NAME_AVAILABLE
    if (56 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointg_intensity instead of this: color_control_color_pointg_intensity
      return color_control_color_pointg_intensity_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTBX_ENUM_NAME_AVAILABLE
    if (58 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointbx instead of this: color_control_color_pointbx
      return color_control_color_pointbx_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTBY_ENUM_NAME_AVAILABLE
    if (59 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointby instead of this: color_control_color_pointby
      return color_control_color_pointby_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_POINTB_INTENSITY_ENUM_NAME_AVAILABLE
    if (60 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_pointb_intensity instead of this: color_control_color_pointb_intensity
      return color_control_color_pointb_intensity_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_ENHANCED_CURRENT_HUE_ENUM_NAME_AVAILABLE
    if (16384 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlenhanced_current_hue instead of this: color_control_enhanced_current_hue
      return color_control_enhanced_current_hue_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_ENHANCED_COLOR_MODE_ENUM_NAME_AVAILABLE
    if (16385 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlenhanced_color_mode instead of this: color_control_enhanced_color_mode
      return color_control_enhanced_color_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_ACTIVE_ENUM_NAME_AVAILABLE
    if (16386 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_active instead of this: color_control_color_loop_active
      return color_control_color_loop_active_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_DIRECTION_ENUM_NAME_AVAILABLE
    if (16387 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_direction instead of this: color_control_color_loop_direction
      return color_control_color_loop_direction_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_TIME_ENUM_NAME_AVAILABLE
    if (16388 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_time instead of this: color_control_color_loop_time
      return color_control_color_loop_time_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE_ENUM_NAME_AVAILABLE
    if (16389 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_start_enhanced_hue instead of this: color_control_color_loop_start_enhanced_hue
      return color_control_color_loop_start_enhanced_hue_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE_ENUM_NAME_AVAILABLE
    if (16390 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_loop_stored_enhanced_hue instead of this: color_control_color_loop_stored_enhanced_hue
      return color_control_color_loop_stored_enhanced_hue_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_CAPABILITIES_ENUM_NAME_AVAILABLE
    if (16394 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_capabilities instead of this: color_control_color_capabilities
      return color_control_color_capabilities_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS_ENUM_NAME_AVAILABLE
    if (16395 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_temp_physical_min_mireds instead of this: color_control_color_temp_physical_min_mireds
      return color_control_color_temp_physical_min_mireds_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS_ENUM_NAME_AVAILABLE
    if (16396 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcolor_temp_physical_max_mireds instead of this: color_control_color_temp_physical_max_mireds
      return color_control_color_temp_physical_max_mireds_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS_ENUM_NAME_AVAILABLE
    if (16397 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlcouple_color_temp_to_level_min_mireds instead of this: color_control_couple_color_temp_to_level_min_mireds
      return color_control_couple_color_temp_to_level_min_mireds_get_enum_value_number(name);
    }
  #endif
  #ifdef COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS_ENUM_NAME_AVAILABLE
    if (16400 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: color_controlstart_up_color_temperature_mireds instead of this: color_control_start_up_color_temperature_mireds
      return color_control_start_up_color_temperature_mireds_get_enum_value_number(name);
    }
  #endif
  }

  if (769 == cluster_id) {
  #ifdef BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationphysical_min_level instead of this: ballast_configuration_physical_min_level
      return ballast_configuration_physical_min_level_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationphysical_max_level instead of this: ballast_configuration_physical_max_level
      return ballast_configuration_physical_max_level_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_BALLAST_STATUS_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationballast_status instead of this: ballast_configuration_ballast_status
      return ballast_configuration_ballast_status_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_MIN_LEVEL_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationmin_level instead of this: ballast_configuration_min_level
      return ballast_configuration_min_level_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_MAX_LEVEL_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationmax_level instead of this: ballast_configuration_max_level
      return ballast_configuration_max_level_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_POWER_ON_LEVEL_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationpower_on_level instead of this: ballast_configuration_power_on_level
      return ballast_configuration_power_on_level_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_POWER_ON_FADE_TIME_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationpower_on_fade_time instead of this: ballast_configuration_power_on_fade_time
      return ballast_configuration_power_on_fade_time_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationintrinsic_ballast_factor instead of this: ballast_configuration_intrinsic_ballast_factor
      return ballast_configuration_intrinsic_ballast_factor_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationballast_factor_adjustment instead of this: ballast_configuration_ballast_factor_adjustment
      return ballast_configuration_ballast_factor_adjustment_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_QUANTITY_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_quantity instead of this: ballast_configuration_lamp_quantity
      return ballast_configuration_lamp_quantity_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_TYPE_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_type instead of this: ballast_configuration_lamp_type
      return ballast_configuration_lamp_type_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_MANUFACTURER_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_manufacturer instead of this: ballast_configuration_lamp_manufacturer
      return ballast_configuration_lamp_manufacturer_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_RATED_HOURS_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_rated_hours instead of this: ballast_configuration_lamp_rated_hours
      return ballast_configuration_lamp_rated_hours_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_BURN_HOURS_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_burn_hours instead of this: ballast_configuration_lamp_burn_hours
      return ballast_configuration_lamp_burn_hours_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_ALARM_MODE_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_alarm_mode instead of this: ballast_configuration_lamp_alarm_mode
      return ballast_configuration_lamp_alarm_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ballast_configurationlamp_burn_hours_trip_point instead of this: ballast_configuration_lamp_burn_hours_trip_point
      return ballast_configuration_lamp_burn_hours_trip_point_get_enum_value_number(name);
    }
  #endif
  }

  if (1024 == cluster_id) {
  #ifdef ILLUMINANCE_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementmeasured_value instead of this: illuminance_measurement_measured_value
      return illuminance_measurement_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementmin_measured_value instead of this: illuminance_measurement_min_measured_value
      return illuminance_measurement_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementmax_measured_value instead of this: illuminance_measurement_max_measured_value
      return illuminance_measurement_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef ILLUMINANCE_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementtolerance instead of this: illuminance_measurement_tolerance
      return illuminance_measurement_tolerance_get_enum_value_number(name);
    }
  #endif
  #ifdef ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_measurementlight_sensor_type instead of this: illuminance_measurement_light_sensor_type
      return illuminance_measurement_light_sensor_type_get_enum_value_number(name);
    }
  #endif
  }

  if (1025 == cluster_id) {
  #ifdef ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_level_sensinglevel_status instead of this: illuminance_level_sensing_level_status
      return illuminance_level_sensing_level_status_get_enum_value_number(name);
    }
  #endif
  #ifdef ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_level_sensinglight_sensor_type instead of this: illuminance_level_sensing_light_sensor_type
      return illuminance_level_sensing_light_sensor_type_get_enum_value_number(name);
    }
  #endif
  #ifdef ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: illuminance_level_sensingilluminance_target_level instead of this: illuminance_level_sensing_illuminance_target_level
      return illuminance_level_sensing_illuminance_target_level_get_enum_value_number(name);
    }
  #endif
  }

  if (1026 == cluster_id) {
  #ifdef TEMPERATURE_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: temperature_measurementmeasured_value instead of this: temperature_measurement_measured_value
      return temperature_measurement_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: temperature_measurementmin_measured_value instead of this: temperature_measurement_min_measured_value
      return temperature_measurement_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: temperature_measurementmax_measured_value instead of this: temperature_measurement_max_measured_value
      return temperature_measurement_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef TEMPERATURE_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: temperature_measurementtolerance instead of this: temperature_measurement_tolerance
      return temperature_measurement_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1027 == cluster_id) {
  #ifdef PRESSURE_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmeasured_value instead of this: pressure_measurement_measured_value
      return pressure_measurement_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmin_measured_value instead of this: pressure_measurement_min_measured_value
      return pressure_measurement_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmax_measured_value instead of this: pressure_measurement_max_measured_value
      return pressure_measurement_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementtolerance instead of this: pressure_measurement_tolerance
      return pressure_measurement_tolerance_get_enum_value_number(name);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_SCALED_VALUE_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementscaled_value instead of this: pressure_measurement_scaled_value
      return pressure_measurement_scaled_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_MIN_SCALED_VALUE_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmin_scaled_value instead of this: pressure_measurement_min_scaled_value
      return pressure_measurement_min_scaled_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_MAX_SCALED_VALUE_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementmax_scaled_value instead of this: pressure_measurement_max_scaled_value
      return pressure_measurement_max_scaled_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_SCALED_TOLERANCE_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementscaled_tolerance instead of this: pressure_measurement_scaled_tolerance
      return pressure_measurement_scaled_tolerance_get_enum_value_number(name);
    }
  #endif
  #ifdef PRESSURE_MEASUREMENT_SCALE_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pressure_measurementscale instead of this: pressure_measurement_scale
      return pressure_measurement_scale_get_enum_value_number(name);
    }
  #endif
  }

  if (1028 == cluster_id) {
  #ifdef FLOW_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: flow_measurementmeasured_value instead of this: flow_measurement_measured_value
      return flow_measurement_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef FLOW_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: flow_measurementmin_measured_value instead of this: flow_measurement_min_measured_value
      return flow_measurement_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef FLOW_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: flow_measurementmax_measured_value instead of this: flow_measurement_max_measured_value
      return flow_measurement_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef FLOW_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: flow_measurementtolerance instead of this: flow_measurement_tolerance
      return flow_measurement_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1029 == cluster_id) {
  #ifdef RELATIVITY_HUMIDITY_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: relativity_humiditymeasured_value instead of this: relativity_humidity_measured_value
      return relativity_humidity_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: relativity_humiditymin_measured_value instead of this: relativity_humidity_min_measured_value
      return relativity_humidity_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: relativity_humiditymax_measured_value instead of this: relativity_humidity_max_measured_value
      return relativity_humidity_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef RELATIVITY_HUMIDITY_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: relativity_humiditytolerance instead of this: relativity_humidity_tolerance
      return relativity_humidity_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1030 == cluster_id) {
  #ifdef OCCUPANCY_SENSING_OCCUPANCY_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingoccupancy instead of this: occupancy_sensing_occupancy
      return occupancy_sensing_occupancy_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingoccupancy_sensor_type instead of this: occupancy_sensing_occupancy_sensor_type
      return occupancy_sensing_occupancy_sensor_type_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingoccupancy_sensor_type_bitmap instead of this: occupancy_sensing_occupancy_sensor_type_bitmap
      return occupancy_sensing_occupancy_sensor_type_bitmap_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingpir_occupied_to_unoccupied_delay instead of this: occupancy_sensing_pir_occupied_to_unoccupied_delay
      return occupancy_sensing_pir_occupied_to_unoccupied_delay_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingpir_unoccupied_to_occupied_delay instead of this: occupancy_sensing_pir_unoccupied_to_occupied_delay
      return occupancy_sensing_pir_unoccupied_to_occupied_delay_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingpir_unoccupied_to_occupied_threshold instead of this: occupancy_sensing_pir_unoccupied_to_occupied_threshold
      return occupancy_sensing_pir_unoccupied_to_occupied_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingultrasonic_occupied_to_unoccupied_delay instead of this: occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay
      return occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingultrasonic_unoccupied_to_occupied_delay instead of this: occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay
      return occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingultrasonic_unoccupied_to_occupied_threshold instead of this: occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold
      return occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingphysical_contact_occupied_to_unoccupied_delay instead of this: occupancy_sensing_physical_contact_occupied_to_unoccupied_delay
      return occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingphysical_contact_unoccupied_to_occupied_delay instead of this: occupancy_sensing_physical_contact_unoccupied_to_occupied_delay
      return occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_get_enum_value_number(name);
    }
  #endif
  #ifdef OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: occupancy_sensingphysical_contact_unoccupied_to_occupied_threshold instead of this: occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold
      return occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_get_enum_value_number(name);
    }
  #endif
  }

  if (1032 == cluster_id) {
  #ifdef SOIL_MOISTURE_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: soil_moisturemeasured_value instead of this: soil_moisture_measured_value
      return soil_moisture_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef SOIL_MOISTURE_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: soil_moisturemin_measured_value instead of this: soil_moisture_min_measured_value
      return soil_moisture_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef SOIL_MOISTURE_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: soil_moisturemax_measured_value instead of this: soil_moisture_max_measured_value
      return soil_moisture_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef SOIL_MOISTURE_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: soil_moisturetolerance instead of this: soil_moisture_tolerance
      return soil_moisture_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1033 == cluster_id) {
  #ifdef PH_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ph_measurementmeasured_value instead of this: ph_measurement_measured_value
      return ph_measurement_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PH_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ph_measurementmin_measured_value instead of this: ph_measurement_min_measured_value
      return ph_measurement_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PH_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ph_measurementmax_measured_value instead of this: ph_measurement_max_measured_value
      return ph_measurement_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PH_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ph_measurementtolerance instead of this: ph_measurement_tolerance
      return ph_measurement_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1034 == cluster_id) {
  #ifdef ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_conductivity_measurementmeasured_value instead of this: electrical_conductivity_measurement_measured_value
      return electrical_conductivity_measurement_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_conductivity_measurementmin_measured_value instead of this: electrical_conductivity_measurement_min_measured_value
      return electrical_conductivity_measurement_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_conductivity_measurementmax_measured_value instead of this: electrical_conductivity_measurement_max_measured_value
      return electrical_conductivity_measurement_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_conductivity_measurementtolerance instead of this: electrical_conductivity_measurement_tolerance
      return electrical_conductivity_measurement_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1035 == cluster_id) {
  #ifdef WIND_SPEED_MEASUREMENT_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: wind_speed_measurementmeasured_value instead of this: wind_speed_measurement_measured_value
      return wind_speed_measurement_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: wind_speed_measurementmin_measured_value instead of this: wind_speed_measurement_min_measured_value
      return wind_speed_measurement_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: wind_speed_measurementmax_measured_value instead of this: wind_speed_measurement_max_measured_value
      return wind_speed_measurement_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef WIND_SPEED_MEASUREMENT_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: wind_speed_measurementtolerance instead of this: wind_speed_measurement_tolerance
      return wind_speed_measurement_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1036 == cluster_id) {
  #ifdef CARBON_MONOXIDE_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_monoxidemeasured_value instead of this: carbon_monoxide_measured_value
      return carbon_monoxide_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef CARBON_MONOXIDE_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_monoxidemin_measured_value instead of this: carbon_monoxide_min_measured_value
      return carbon_monoxide_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef CARBON_MONOXIDE_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_monoxidemax_measured_value instead of this: carbon_monoxide_max_measured_value
      return carbon_monoxide_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef CARBON_MONOXIDE_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_monoxidetolerance instead of this: carbon_monoxide_tolerance
      return carbon_monoxide_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1037 == cluster_id) {
  #ifdef CARBON_DIOXIDE_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_dioxidemeasured_value instead of this: carbon_dioxide_measured_value
      return carbon_dioxide_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef CARBON_DIOXIDE_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_dioxidemin_measured_value instead of this: carbon_dioxide_min_measured_value
      return carbon_dioxide_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef CARBON_DIOXIDE_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_dioxidemax_measured_value instead of this: carbon_dioxide_max_measured_value
      return carbon_dioxide_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef CARBON_DIOXIDE_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: carbon_dioxidetolerance instead of this: carbon_dioxide_tolerance
      return carbon_dioxide_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1066 == cluster_id) {
  #ifdef PM25_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pm25measured_value instead of this: pm25_measured_value
      return pm25_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PM25_MIN_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pm25min_measured_value instead of this: pm25_min_measured_value
      return pm25_min_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PM25_MAX_MEASURED_VALUE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pm25max_measured_value instead of this: pm25_max_measured_value
      return pm25_max_measured_value_get_enum_value_number(name);
    }
  #endif
  #ifdef PM25_TOLERANCE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: pm25tolerance instead of this: pm25_tolerance
      return pm25_tolerance_get_enum_value_number(name);
    }
  #endif
  }

  if (1280 == cluster_id) {
  #ifdef IAS_ZONE_ZONE_STATE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonezone_state instead of this: ias_zone_zone_state
      return ias_zone_zone_state_get_enum_value_number(name);
    }
  #endif
  #ifdef IAS_ZONE_ZONE_TYPE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonezone_type instead of this: ias_zone_zone_type
      return ias_zone_zone_type_get_enum_value_number(name);
    }
  #endif
  #ifdef IAS_ZONE_ZONE_STATUS_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonezone_status instead of this: ias_zone_zone_status
      return ias_zone_zone_status_get_enum_value_number(name);
    }
  #endif
  #ifdef IAS_ZONE_IASCIE_ADDRESS_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zoneiascie_address instead of this: ias_zone_iascie_address
      return ias_zone_iascie_address_get_enum_value_number(name);
    }
  #endif
  #ifdef IAS_ZONE_ZONEID_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonezoneid instead of this: ias_zone_zoneid
      return ias_zone_zoneid_get_enum_value_number(name);
    }
  #endif
  #ifdef IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonenumber_of_zone_sensitivity_levels_supported instead of this: ias_zone_number_of_zone_sensitivity_levels_supported
      return ias_zone_number_of_zone_sensitivity_levels_supported_get_enum_value_number(name);
    }
  #endif
  #ifdef IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: ias_zonecurrent_zone_sensitivity_level instead of this: ias_zone_current_zone_sensitivity_level
      return ias_zone_current_zone_sensitivity_level_get_enum_value_number(name);
    }
  #endif
  }

  if (1282 == cluster_id) {
  #ifdef IASWD_MAX_DURATION_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: iaswdmax_duration instead of this: iaswd_max_duration
      return iaswd_max_duration_get_enum_value_number(name);
    }
  #endif
  }

  if (1794 == cluster_id) {
  #ifdef METERING_CURRENT_SUMMATION_DELIVERED_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_summation_delivered instead of this: metering_current_summation_delivered
      return metering_current_summation_delivered_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_CURRENT_SUMMATION_RECEIVED_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_summation_received instead of this: metering_current_summation_received
      return metering_current_summation_received_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_CURRENT_MAX_DEMAND_DELIVERED_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_max_demand_delivered instead of this: metering_current_max_demand_delivered
      return metering_current_max_demand_delivered_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_CURRENT_MAX_DEMAND_RECEIVED_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_max_demand_received instead of this: metering_current_max_demand_received
      return metering_current_max_demand_received_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_POWER_FACTOR_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringpower_factor instead of this: metering_power_factor
      return metering_power_factor_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_READING_SNAP_SHOT_TIME_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringreading_snap_shot_time instead of this: metering_reading_snap_shot_time
      return metering_reading_snap_shot_time_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_max_demand_delivered_time instead of this: metering_current_max_demand_delivered_time
      return metering_current_max_demand_delivered_time_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_max_demand_received_time instead of this: metering_current_max_demand_received_time
      return metering_current_max_demand_received_time_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_DEFAULT_UPDATE_PERIOD_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringdefault_update_period instead of this: metering_default_update_period
      return metering_default_update_period_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_SUPPLY_STATUS_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringsupply_status instead of this: metering_supply_status
      return metering_supply_status_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION_ENUM_NAME_AVAILABLE
    if (21 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_inlet_energy_carrier_summation instead of this: metering_current_inlet_energy_carrier_summation
      return metering_current_inlet_energy_carrier_summation_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION_ENUM_NAME_AVAILABLE
    if (22 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringcurrent_outlet_energy_carrier_summation instead of this: metering_current_outlet_energy_carrier_summation
      return metering_current_outlet_energy_carrier_summation_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_INLET_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (23 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringinlet_temperature instead of this: metering_inlet_temperature
      return metering_inlet_temperature_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_OUTLET_TEMPERATURE_ENUM_NAME_AVAILABLE
    if (24 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringoutlet_temperature instead of this: metering_outlet_temperature
      return metering_outlet_temperature_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_UNITOF_MEASURE_ENUM_NAME_AVAILABLE
    if (768 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringunitof_measure instead of this: metering_unitof_measure
      return metering_unitof_measure_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (769 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringmultiplier instead of this: metering_multiplier
      return metering_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_DIVISOR_ENUM_NAME_AVAILABLE
    if (770 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringdivisor instead of this: metering_divisor
      return metering_divisor_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_SUMMATION_FORMATTING_ENUM_NAME_AVAILABLE
    if (771 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringsummation_formatting instead of this: metering_summation_formatting
      return metering_summation_formatting_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_DEMAND_FORMATTING_ENUM_NAME_AVAILABLE
    if (772 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringdemand_formatting instead of this: metering_demand_formatting
      return metering_demand_formatting_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_HISTORICAL_CONSUMPTION_FORMATTING_ENUM_NAME_AVAILABLE
    if (773 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringhistorical_consumption_formatting instead of this: metering_historical_consumption_formatting
      return metering_historical_consumption_formatting_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_METERING_DEVICE_TYPE_ENUM_NAME_AVAILABLE
    if (774 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringmetering_device_type instead of this: metering_metering_device_type
      return metering_metering_device_type_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_ENUM_NAME_AVAILABLE
    if (777 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringenergy_carrier_unit_of_measure instead of this: metering_energy_carrier_unit_of_measure
      return metering_energy_carrier_unit_of_measure_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_ENERGY_CARRIER_SUMMATION_FORMATTING_ENUM_NAME_AVAILABLE
    if (778 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringenergy_carrier_summation_formatting instead of this: metering_energy_carrier_summation_formatting
      return metering_energy_carrier_summation_formatting_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_ENERGY_CARRIER_DEMAND_FORMATTING_ENUM_NAME_AVAILABLE
    if (779 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringenergy_carrier_demand_formatting instead of this: metering_energy_carrier_demand_formatting
      return metering_energy_carrier_demand_formatting_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_TEMPERATURE_UNIT_OF_MEASURE_ENUM_NAME_AVAILABLE
    if (780 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringtemperature_unit_of_measure instead of this: metering_temperature_unit_of_measure
      return metering_temperature_unit_of_measure_get_enum_value_number(name);
    }
  #endif
  #ifdef METERING_TEMPERATURE_FORMATTING_ENUM_NAME_AVAILABLE
    if (781 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: meteringtemperature_formatting instead of this: metering_temperature_formatting
      return metering_temperature_formatting_get_enum_value_number(name);
    }
  #endif
  }

  if (2820 == cluster_id) {
  #ifdef ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasurement_type instead of this: electrical_measurement_measurement_type
      return electrical_measurement_measurement_type_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_ENUM_NAME_AVAILABLE
    if (256 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage instead of this: electrical_measurement_dc_voltage
      return electrical_measurement_dc_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN_ENUM_NAME_AVAILABLE
    if (257 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_min instead of this: electrical_measurement_dc_voltage_min
      return electrical_measurement_dc_voltage_min_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX_ENUM_NAME_AVAILABLE
    if (258 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_max instead of this: electrical_measurement_dc_voltage_max
      return electrical_measurement_dc_voltage_max_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_ENUM_NAME_AVAILABLE
    if (259 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current instead of this: electrical_measurement_dc_current
      return electrical_measurement_dc_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN_ENUM_NAME_AVAILABLE
    if (260 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_min instead of this: electrical_measurement_dc_current_min
      return electrical_measurement_dc_current_min_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX_ENUM_NAME_AVAILABLE
    if (261 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_max instead of this: electrical_measurement_dc_current_max
      return electrical_measurement_dc_current_max_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_ENUM_NAME_AVAILABLE
    if (262 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power instead of this: electrical_measurement_dc_power
      return electrical_measurement_dc_power_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_MIN_ENUM_NAME_AVAILABLE
    if (263 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power_min instead of this: electrical_measurement_dc_power_min
      return electrical_measurement_dc_power_min_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_MAX_ENUM_NAME_AVAILABLE
    if (264 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power_max instead of this: electrical_measurement_dc_power_max
      return electrical_measurement_dc_power_max_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (512 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_multiplier instead of this: electrical_measurement_dc_voltage_multiplier
      return electrical_measurement_dc_voltage_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR_ENUM_NAME_AVAILABLE
    if (513 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_divisor instead of this: electrical_measurement_dc_voltage_divisor
      return electrical_measurement_dc_voltage_divisor_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (514 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_multiplier instead of this: electrical_measurement_dc_current_multiplier
      return electrical_measurement_dc_current_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR_ENUM_NAME_AVAILABLE
    if (515 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_divisor instead of this: electrical_measurement_dc_current_divisor
      return electrical_measurement_dc_current_divisor_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (516 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power_multiplier instead of this: electrical_measurement_dc_power_multiplier
      return electrical_measurement_dc_power_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR_ENUM_NAME_AVAILABLE
    if (517 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_power_divisor instead of this: electrical_measurement_dc_power_divisor
      return electrical_measurement_dc_power_divisor_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_ENUM_NAME_AVAILABLE
    if (768 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency instead of this: electrical_measurement_ac_frequency
      return electrical_measurement_ac_frequency_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN_ENUM_NAME_AVAILABLE
    if (769 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency_min instead of this: electrical_measurement_ac_frequency_min
      return electrical_measurement_ac_frequency_min_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX_ENUM_NAME_AVAILABLE
    if (770 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency_max instead of this: electrical_measurement_ac_frequency_max
      return electrical_measurement_ac_frequency_max_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT_ENUM_NAME_AVAILABLE
    if (771 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementneutral_current instead of this: electrical_measurement_neutral_current
      return electrical_measurement_neutral_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER_ENUM_NAME_AVAILABLE
    if (772 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementtotal_active_power instead of this: electrical_measurement_total_active_power
      return electrical_measurement_total_active_power_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER_ENUM_NAME_AVAILABLE
    if (773 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementtotal_reactive_power instead of this: electrical_measurement_total_reactive_power
      return electrical_measurement_total_reactive_power_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER_ENUM_NAME_AVAILABLE
    if (774 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementtotal_apparent_power instead of this: electrical_measurement_total_apparent_power
      return electrical_measurement_total_apparent_power_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (775 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured1st_harmonic_current instead of this: electrical_measurement_measured1st_harmonic_current
      return electrical_measurement_measured1st_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (776 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured3rd_harmonic_current instead of this: electrical_measurement_measured3rd_harmonic_current
      return electrical_measurement_measured3rd_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (777 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured5th_harmonic_current instead of this: electrical_measurement_measured5th_harmonic_current
      return electrical_measurement_measured5th_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (778 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured7th_harmonic_current instead of this: electrical_measurement_measured7th_harmonic_current
      return electrical_measurement_measured7th_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (779 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured9th_harmonic_current instead of this: electrical_measurement_measured9th_harmonic_current
      return electrical_measurement_measured9th_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (780 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured11th_harmonic_current instead of this: electrical_measurement_measured11th_harmonic_current
      return electrical_measurement_measured11th_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (781 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase1st_harmonic_current instead of this: electrical_measurement_measured_phase1st_harmonic_current
      return electrical_measurement_measured_phase1st_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (782 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase3rd_harmonic_current instead of this: electrical_measurement_measured_phase3rd_harmonic_current
      return electrical_measurement_measured_phase3rd_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (783 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase5th_harmonic_current instead of this: electrical_measurement_measured_phase5th_harmonic_current
      return electrical_measurement_measured_phase5th_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (784 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase7th_harmonic_current instead of this: electrical_measurement_measured_phase7th_harmonic_current
      return electrical_measurement_measured_phase7th_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (785 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase9th_harmonic_current instead of this: electrical_measurement_measured_phase9th_harmonic_current
      return electrical_measurement_measured_phase9th_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT_ENUM_NAME_AVAILABLE
    if (786 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementmeasured_phase11th_harmonic_current instead of this: electrical_measurement_measured_phase11th_harmonic_current
      return electrical_measurement_measured_phase11th_harmonic_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1024 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency_multiplier instead of this: electrical_measurement_ac_frequency_multiplier
      return electrical_measurement_ac_frequency_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR_ENUM_NAME_AVAILABLE
    if (1025 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_frequency_divisor instead of this: electrical_measurement_ac_frequency_divisor
      return electrical_measurement_ac_frequency_divisor_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1026 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_multiplier instead of this: electrical_measurement_power_multiplier
      return electrical_measurement_power_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_DIVISOR_ENUM_NAME_AVAILABLE
    if (1027 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_divisor instead of this: electrical_measurement_power_divisor
      return electrical_measurement_power_divisor_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1028 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementharmonic_current_multiplier instead of this: electrical_measurement_harmonic_current_multiplier
      return electrical_measurement_harmonic_current_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1029 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementphase_harmonic_current_multiplier instead of this: electrical_measurement_phase_harmonic_current_multiplier
      return electrical_measurement_phase_harmonic_current_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_LINE_CURRENT_ENUM_NAME_AVAILABLE
    if (1281 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementline_current instead of this: electrical_measurement_line_current
      return electrical_measurement_line_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_ENUM_NAME_AVAILABLE
    if (1282 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_current instead of this: electrical_measurement_active_current
      return electrical_measurement_active_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_ENUM_NAME_AVAILABLE
    if (1283 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_current instead of this: electrical_measurement_reactive_current
      return electrical_measurement_reactive_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_ENUM_NAME_AVAILABLE
    if (1285 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage instead of this: electrical_measurement_rms_voltage
      return electrical_measurement_rms_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_ENUM_NAME_AVAILABLE
    if (1286 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_min instead of this: electrical_measurement_rms_voltage_min
      return electrical_measurement_rms_voltage_min_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_ENUM_NAME_AVAILABLE
    if (1287 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_max instead of this: electrical_measurement_rms_voltage_max
      return electrical_measurement_rms_voltage_max_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_ENUM_NAME_AVAILABLE
    if (1288 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current instead of this: electrical_measurement_rms_current
      return electrical_measurement_rms_current_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_ENUM_NAME_AVAILABLE
    if (1289 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_min instead of this: electrical_measurement_rms_current_min
      return electrical_measurement_rms_current_min_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_ENUM_NAME_AVAILABLE
    if (1290 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_max instead of this: electrical_measurement_rms_current_max
      return electrical_measurement_rms_current_max_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_ENUM_NAME_AVAILABLE
    if (1291 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power instead of this: electrical_measurement_active_power
      return electrical_measurement_active_power_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_ENUM_NAME_AVAILABLE
    if (1292 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_min instead of this: electrical_measurement_active_power_min
      return electrical_measurement_active_power_min_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_ENUM_NAME_AVAILABLE
    if (1293 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_max instead of this: electrical_measurement_active_power_max
      return electrical_measurement_active_power_max_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_POWER_ENUM_NAME_AVAILABLE
    if (1294 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_power instead of this: electrical_measurement_reactive_power
      return electrical_measurement_reactive_power_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_APPARENT_POWER_ENUM_NAME_AVAILABLE
    if (1295 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementapparent_power instead of this: electrical_measurement_apparent_power
      return electrical_measurement_apparent_power_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_FACTOR_ENUM_NAME_AVAILABLE
    if (1296 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_factor instead of this: electrical_measurement_power_factor
      return electrical_measurement_power_factor_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_ENUM_NAME_AVAILABLE
    if (1297 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_voltage_measurement_period instead of this: electrical_measurement_average_rms_voltage_measurement_period
      return electrical_measurement_average_rms_voltage_measurement_period_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_ENUM_NAME_AVAILABLE
    if (1298 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_over_voltage_counter instead of this: electrical_measurement_average_rms_over_voltage_counter
      return electrical_measurement_average_rms_over_voltage_counter_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_ENUM_NAME_AVAILABLE
    if (1299 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_under_voltage_counter instead of this: electrical_measurement_average_rms_under_voltage_counter
      return electrical_measurement_average_rms_under_voltage_counter_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_ENUM_NAME_AVAILABLE
    if (1300 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_over_voltage_period instead of this: electrical_measurement_rms_extreme_over_voltage_period
      return electrical_measurement_rms_extreme_over_voltage_period_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_ENUM_NAME_AVAILABLE
    if (1301 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_under_voltage_period instead of this: electrical_measurement_rms_extreme_under_voltage_period
      return electrical_measurement_rms_extreme_under_voltage_period_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_ENUM_NAME_AVAILABLE
    if (1302 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_sag_period instead of this: electrical_measurement_rms_voltage_sag_period
      return electrical_measurement_rms_voltage_sag_period_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_ENUM_NAME_AVAILABLE
    if (1303 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_swell_period instead of this: electrical_measurement_rms_voltage_swell_period
      return electrical_measurement_rms_voltage_swell_period_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1536 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_voltage_multiplier instead of this: electrical_measurement_ac_voltage_multiplier
      return electrical_measurement_ac_voltage_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR_ENUM_NAME_AVAILABLE
    if (1537 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_voltage_divisor instead of this: electrical_measurement_ac_voltage_divisor
      return electrical_measurement_ac_voltage_divisor_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1538 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_current_multiplier instead of this: electrical_measurement_ac_current_multiplier
      return electrical_measurement_ac_current_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR_ENUM_NAME_AVAILABLE
    if (1539 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_current_divisor instead of this: electrical_measurement_ac_current_divisor
      return electrical_measurement_ac_current_divisor_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER_ENUM_NAME_AVAILABLE
    if (1540 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_power_multiplier instead of this: electrical_measurement_ac_power_multiplier
      return electrical_measurement_ac_power_multiplier_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR_ENUM_NAME_AVAILABLE
    if (1541 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_power_divisor instead of this: electrical_measurement_ac_power_divisor
      return electrical_measurement_ac_power_divisor_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK_ENUM_NAME_AVAILABLE
    if (1792 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_overload_alarms_mask instead of this: electrical_measurement_dc_overload_alarms_mask
      return electrical_measurement_dc_overload_alarms_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD_ENUM_NAME_AVAILABLE
    if (1793 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_voltage_overload instead of this: electrical_measurement_dc_voltage_overload
      return electrical_measurement_dc_voltage_overload_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD_ENUM_NAME_AVAILABLE
    if (1794 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementdc_current_overload instead of this: electrical_measurement_dc_current_overload
      return electrical_measurement_dc_current_overload_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_ENUM_NAME_AVAILABLE
    if (2048 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_alarms_mask instead of this: electrical_measurement_ac_alarms_mask
      return electrical_measurement_ac_alarms_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD_ENUM_NAME_AVAILABLE
    if (2049 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_voltage_overload instead of this: electrical_measurement_ac_voltage_overload
      return electrical_measurement_ac_voltage_overload_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD_ENUM_NAME_AVAILABLE
    if (2050 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_current_overload instead of this: electrical_measurement_ac_current_overload
      return electrical_measurement_ac_current_overload_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD_ENUM_NAME_AVAILABLE
    if (2051 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_active_power_overload instead of this: electrical_measurement_ac_active_power_overload
      return electrical_measurement_ac_active_power_overload_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD_ENUM_NAME_AVAILABLE
    if (2052 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementac_reactive_power_overload instead of this: electrical_measurement_ac_reactive_power_overload
      return electrical_measurement_ac_reactive_power_overload_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_ENUM_NAME_AVAILABLE
    if (2053 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_over_voltage instead of this: electrical_measurement_average_rms_over_voltage
      return electrical_measurement_average_rms_over_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_ENUM_NAME_AVAILABLE
    if (2054 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_under_voltage instead of this: electrical_measurement_average_rms_under_voltage
      return electrical_measurement_average_rms_under_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_ENUM_NAME_AVAILABLE
    if (2055 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_over_voltage instead of this: electrical_measurement_rms_extreme_over_voltage
      return electrical_measurement_rms_extreme_over_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_ENUM_NAME_AVAILABLE
    if (2056 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_under_voltage instead of this: electrical_measurement_rms_extreme_under_voltage
      return electrical_measurement_rms_extreme_under_voltage_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_ENUM_NAME_AVAILABLE
    if (2057 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_sag instead of this: electrical_measurement_rms_voltage_sag
      return electrical_measurement_rms_voltage_sag_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_ENUM_NAME_AVAILABLE
    if (2058 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_swell instead of this: electrical_measurement_rms_voltage_swell
      return electrical_measurement_rms_voltage_swell_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB_ENUM_NAME_AVAILABLE
    if (2305 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementline_current_phb instead of this: electrical_measurement_line_current_phb
      return electrical_measurement_line_current_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB_ENUM_NAME_AVAILABLE
    if (2306 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_current_phb instead of this: electrical_measurement_active_current_phb
      return electrical_measurement_active_current_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB_ENUM_NAME_AVAILABLE
    if (2307 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_current_phb instead of this: electrical_measurement_reactive_current_phb
      return electrical_measurement_reactive_current_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB_ENUM_NAME_AVAILABLE
    if (2309 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_phb instead of this: electrical_measurement_rms_voltage_phb
      return electrical_measurement_rms_voltage_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB_ENUM_NAME_AVAILABLE
    if (2310 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_min_phb instead of this: electrical_measurement_rms_voltage_min_phb
      return electrical_measurement_rms_voltage_min_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB_ENUM_NAME_AVAILABLE
    if (2311 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_max_phb instead of this: electrical_measurement_rms_voltage_max_phb
      return electrical_measurement_rms_voltage_max_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB_ENUM_NAME_AVAILABLE
    if (2312 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_phb instead of this: electrical_measurement_rms_current_phb
      return electrical_measurement_rms_current_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB_ENUM_NAME_AVAILABLE
    if (2313 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_min_phb instead of this: electrical_measurement_rms_current_min_phb
      return electrical_measurement_rms_current_min_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB_ENUM_NAME_AVAILABLE
    if (2314 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_max_phb instead of this: electrical_measurement_rms_current_max_phb
      return electrical_measurement_rms_current_max_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB_ENUM_NAME_AVAILABLE
    if (2315 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_phb instead of this: electrical_measurement_active_power_phb
      return electrical_measurement_active_power_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB_ENUM_NAME_AVAILABLE
    if (2316 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_min_phb instead of this: electrical_measurement_active_power_min_phb
      return electrical_measurement_active_power_min_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB_ENUM_NAME_AVAILABLE
    if (2317 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_max_phb instead of this: electrical_measurement_active_power_max_phb
      return electrical_measurement_active_power_max_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB_ENUM_NAME_AVAILABLE
    if (2318 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_power_phb instead of this: electrical_measurement_reactive_power_phb
      return electrical_measurement_reactive_power_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB_ENUM_NAME_AVAILABLE
    if (2319 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementapparent_power_phb instead of this: electrical_measurement_apparent_power_phb
      return electrical_measurement_apparent_power_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB_ENUM_NAME_AVAILABLE
    if (2320 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_factor_phb instead of this: electrical_measurement_power_factor_phb
      return electrical_measurement_power_factor_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2321 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_voltage_measurement_period_phb instead of this: electrical_measurement_average_rms_voltage_measurement_period_phb
      return electrical_measurement_average_rms_voltage_measurement_period_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB_ENUM_NAME_AVAILABLE
    if (2322 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_over_voltage_counter_phb instead of this: electrical_measurement_average_rms_over_voltage_counter_phb
      return electrical_measurement_average_rms_over_voltage_counter_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB_ENUM_NAME_AVAILABLE
    if (2323 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_under_voltage_counter_phb instead of this: electrical_measurement_average_rms_under_voltage_counter_phb
      return electrical_measurement_average_rms_under_voltage_counter_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2324 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_over_voltage_period_phb instead of this: electrical_measurement_rms_extreme_over_voltage_period_phb
      return electrical_measurement_rms_extreme_over_voltage_period_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2325 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_under_voltage_period_phb instead of this: electrical_measurement_rms_extreme_under_voltage_period_phb
      return electrical_measurement_rms_extreme_under_voltage_period_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2326 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_sag_period_phb instead of this: electrical_measurement_rms_voltage_sag_period_phb
      return electrical_measurement_rms_voltage_sag_period_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB_ENUM_NAME_AVAILABLE
    if (2327 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_swell_period_phb instead of this: electrical_measurement_rms_voltage_swell_period_phb
      return electrical_measurement_rms_voltage_swell_period_phb_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC_ENUM_NAME_AVAILABLE
    if (2561 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementline_current_phc instead of this: electrical_measurement_line_current_phc
      return electrical_measurement_line_current_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC_ENUM_NAME_AVAILABLE
    if (2562 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_current_phc instead of this: electrical_measurement_active_current_phc
      return electrical_measurement_active_current_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC_ENUM_NAME_AVAILABLE
    if (2563 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_current_phc instead of this: electrical_measurement_reactive_current_phc
      return electrical_measurement_reactive_current_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC_ENUM_NAME_AVAILABLE
    if (2565 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_phc instead of this: electrical_measurement_rms_voltage_phc
      return electrical_measurement_rms_voltage_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC_ENUM_NAME_AVAILABLE
    if (2566 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_min_phc instead of this: electrical_measurement_rms_voltage_min_phc
      return electrical_measurement_rms_voltage_min_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC_ENUM_NAME_AVAILABLE
    if (2567 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_max_phc instead of this: electrical_measurement_rms_voltage_max_phc
      return electrical_measurement_rms_voltage_max_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC_ENUM_NAME_AVAILABLE
    if (2568 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_phc instead of this: electrical_measurement_rms_current_phc
      return electrical_measurement_rms_current_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC_ENUM_NAME_AVAILABLE
    if (2569 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_min_phc instead of this: electrical_measurement_rms_current_min_phc
      return electrical_measurement_rms_current_min_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC_ENUM_NAME_AVAILABLE
    if (2570 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_current_max_phc instead of this: electrical_measurement_rms_current_max_phc
      return electrical_measurement_rms_current_max_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC_ENUM_NAME_AVAILABLE
    if (2571 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_phc instead of this: electrical_measurement_active_power_phc
      return electrical_measurement_active_power_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC_ENUM_NAME_AVAILABLE
    if (2572 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_min_phc instead of this: electrical_measurement_active_power_min_phc
      return electrical_measurement_active_power_min_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC_ENUM_NAME_AVAILABLE
    if (2573 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementactive_power_max_phc instead of this: electrical_measurement_active_power_max_phc
      return electrical_measurement_active_power_max_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC_ENUM_NAME_AVAILABLE
    if (2574 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementreactive_power_phc instead of this: electrical_measurement_reactive_power_phc
      return electrical_measurement_reactive_power_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC_ENUM_NAME_AVAILABLE
    if (2575 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementapparent_power_phc instead of this: electrical_measurement_apparent_power_phc
      return electrical_measurement_apparent_power_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC_ENUM_NAME_AVAILABLE
    if (2576 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementpower_factor_phc instead of this: electrical_measurement_power_factor_phc
      return electrical_measurement_power_factor_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2577 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_voltage_measurement_period_phc instead of this: electrical_measurement_average_rms_voltage_measurement_period_phc
      return electrical_measurement_average_rms_voltage_measurement_period_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC_ENUM_NAME_AVAILABLE
    if (2578 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_over_voltage_counter_phc instead of this: electrical_measurement_average_rms_over_voltage_counter_phc
      return electrical_measurement_average_rms_over_voltage_counter_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC_ENUM_NAME_AVAILABLE
    if (2579 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementaverage_rms_under_voltage_counter_phc instead of this: electrical_measurement_average_rms_under_voltage_counter_phc
      return electrical_measurement_average_rms_under_voltage_counter_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2580 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_over_voltage_period_phc instead of this: electrical_measurement_rms_extreme_over_voltage_period_phc
      return electrical_measurement_rms_extreme_over_voltage_period_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2581 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_extreme_under_voltage_period_phc instead of this: electrical_measurement_rms_extreme_under_voltage_period_phc
      return electrical_measurement_rms_extreme_under_voltage_period_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2582 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_sag_period_phc instead of this: electrical_measurement_rms_voltage_sag_period_phc
      return electrical_measurement_rms_voltage_sag_period_phc_get_enum_value_number(name);
    }
  #endif
  #ifdef ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC_ENUM_NAME_AVAILABLE
    if (2583 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: electrical_measurementrms_voltage_swell_period_phc instead of this: electrical_measurement_rms_voltage_swell_period_phc
      return electrical_measurement_rms_voltage_swell_period_phc_get_enum_value_number(name);
    }
  #endif
  }

  if (2821 == cluster_id) {
  #ifdef DIAGNOSTICS_NUMBER_OF_RESETS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsnumber_of_resets instead of this: diagnostics_number_of_resets
      return diagnostics_number_of_resets_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_PERSISTENT_MEMORY_WRITES_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticspersistent_memory_writes instead of this: diagnostics_persistent_memory_writes
      return diagnostics_persistent_memory_writes_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_RX_BCAST_ENUM_NAME_AVAILABLE
    if (256 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_rx_bcast instead of this: diagnostics_mac_rx_bcast
      return diagnostics_mac_rx_bcast_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_TX_BCAST_ENUM_NAME_AVAILABLE
    if (257 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_tx_bcast instead of this: diagnostics_mac_tx_bcast
      return diagnostics_mac_tx_bcast_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_RX_UCAST_ENUM_NAME_AVAILABLE
    if (258 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_rx_ucast instead of this: diagnostics_mac_rx_ucast
      return diagnostics_mac_rx_ucast_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_TX_UCAST_ENUM_NAME_AVAILABLE
    if (259 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_tx_ucast instead of this: diagnostics_mac_tx_ucast
      return diagnostics_mac_tx_ucast_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_TX_UCAST_RETRY_ENUM_NAME_AVAILABLE
    if (260 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_tx_ucast_retry instead of this: diagnostics_mac_tx_ucast_retry
      return diagnostics_mac_tx_ucast_retry_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_MAC_TX_UCAST_FAIL_ENUM_NAME_AVAILABLE
    if (261 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsmac_tx_ucast_fail instead of this: diagnostics_mac_tx_ucast_fail
      return diagnostics_mac_tx_ucast_fail_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_RX_BCAST_ENUM_NAME_AVAILABLE
    if (262 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_rx_bcast instead of this: diagnostics_aps_rx_bcast
      return diagnostics_aps_rx_bcast_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_TX_BCAST_ENUM_NAME_AVAILABLE
    if (263 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_tx_bcast instead of this: diagnostics_aps_tx_bcast
      return diagnostics_aps_tx_bcast_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_RX_UCAST_ENUM_NAME_AVAILABLE
    if (264 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_rx_ucast instead of this: diagnostics_aps_rx_ucast
      return diagnostics_aps_rx_ucast_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_TX_UCAST_SUCCESS_ENUM_NAME_AVAILABLE
    if (265 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_tx_ucast_success instead of this: diagnostics_aps_tx_ucast_success
      return diagnostics_aps_tx_ucast_success_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_TX_UCAST_RETRY_ENUM_NAME_AVAILABLE
    if (266 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_tx_ucast_retry instead of this: diagnostics_aps_tx_ucast_retry
      return diagnostics_aps_tx_ucast_retry_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_TX_UCAST_FAIL_ENUM_NAME_AVAILABLE
    if (267 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_tx_ucast_fail instead of this: diagnostics_aps_tx_ucast_fail
      return diagnostics_aps_tx_ucast_fail_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_ROUTE_DISC_INITIATED_ENUM_NAME_AVAILABLE
    if (268 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsroute_disc_initiated instead of this: diagnostics_route_disc_initiated
      return diagnostics_route_disc_initiated_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_NEIGHBOR_ADDED_ENUM_NAME_AVAILABLE
    if (269 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsneighbor_added instead of this: diagnostics_neighbor_added
      return diagnostics_neighbor_added_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_NEIGHBOR_REMOVED_ENUM_NAME_AVAILABLE
    if (270 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsneighbor_removed instead of this: diagnostics_neighbor_removed
      return diagnostics_neighbor_removed_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_NEIGHBOR_STALE_ENUM_NAME_AVAILABLE
    if (271 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsneighbor_stale instead of this: diagnostics_neighbor_stale
      return diagnostics_neighbor_stale_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_JOIN_INDICATION_ENUM_NAME_AVAILABLE
    if (272 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsjoin_indication instead of this: diagnostics_join_indication
      return diagnostics_join_indication_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_CHILD_MOVED_ENUM_NAME_AVAILABLE
    if (273 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticschild_moved instead of this: diagnostics_child_moved
      return diagnostics_child_moved_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_NWKFC_FAILURE_ENUM_NAME_AVAILABLE
    if (274 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsnwkfc_failure instead of this: diagnostics_nwkfc_failure
      return diagnostics_nwkfc_failure_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_APSFC_FAILURE_ENUM_NAME_AVAILABLE
    if (275 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsapsfc_failure instead of this: diagnostics_apsfc_failure
      return diagnostics_apsfc_failure_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_UNAUTHORIZED_KEY_ENUM_NAME_AVAILABLE
    if (276 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_unauthorized_key instead of this: diagnostics_aps_unauthorized_key
      return diagnostics_aps_unauthorized_key_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_NWK_DECRYPT_FAILURES_ENUM_NAME_AVAILABLE
    if (277 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsnwk_decrypt_failures instead of this: diagnostics_nwk_decrypt_failures
      return diagnostics_nwk_decrypt_failures_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_APS_DECRYPT_FAILURES_ENUM_NAME_AVAILABLE
    if (278 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaps_decrypt_failures instead of this: diagnostics_aps_decrypt_failures
      return diagnostics_aps_decrypt_failures_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES_ENUM_NAME_AVAILABLE
    if (279 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticspacket_buffer_allocate_failures instead of this: diagnostics_packet_buffer_allocate_failures
      return diagnostics_packet_buffer_allocate_failures_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_RELAYED_UCAST_ENUM_NAME_AVAILABLE
    if (280 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsrelayed_ucast instead of this: diagnostics_relayed_ucast
      return diagnostics_relayed_ucast_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED_ENUM_NAME_AVAILABLE
    if (281 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsphy_to_mac_queue_limit_reached instead of this: diagnostics_phy_to_mac_queue_limit_reached
      return diagnostics_phy_to_mac_queue_limit_reached_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT_ENUM_NAME_AVAILABLE
    if (282 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticspacket_validate_drop_count instead of this: diagnostics_packet_validate_drop_count
      return diagnostics_packet_validate_drop_count_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT_ENUM_NAME_AVAILABLE
    if (283 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticsaverage_mac_retry_per_aps_message_sent instead of this: diagnostics_average_mac_retry_per_aps_message_sent
      return diagnostics_average_mac_retry_per_aps_message_sent_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_LAST_MESSAGELQI_ENUM_NAME_AVAILABLE
    if (284 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticslast_messagelqi instead of this: diagnostics_last_messagelqi
      return diagnostics_last_messagelqi_get_enum_value_number(name);
    }
  #endif
  #ifdef DIAGNOSTICS_LAST_MESSAGERSSI_ENUM_NAME_AVAILABLE
    if (285 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: diagnosticslast_messagerssi instead of this: diagnostics_last_messagerssi
      return diagnostics_last_messagerssi_get_enum_value_number(name);
    }
  #endif
  }

  if (64769 == cluster_id) {
  #ifdef PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: protocol_controller_rf_telemetrytx_report_enabled instead of this: protocol_controller_rf_telemetry_tx_report_enabled
      return protocol_controller_rf_telemetry_tx_report_enabled_get_enum_value_number(name);
    }
  #endif
  #ifdef PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: protocol_controller_rf_telemetrypti_enabled instead of this: protocol_controller_rf_telemetry_pti_enabled
      return protocol_controller_rf_telemetry_pti_enabled_get_enum_value_number(name);
    }
  #endif
  }

  if (64770 == cluster_id) {
  #ifdef STATE_ENDPOINT_ID_LIST_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: stateendpoint_id_list instead of this: state_endpoint_id_list
      return state_endpoint_id_list_get_enum_value_number(name);
    }
  #endif
  #ifdef STATE_NETWORK_STATUS_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: statenetwork_status instead of this: state_network_status
      return state_network_status_get_enum_value_number(name);
    }
  #endif
  #ifdef STATE_SECURITY_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: statesecurity instead of this: state_security
      return state_security_get_enum_value_number(name);
    }
  #endif
  #ifdef STATE_MAXIMUM_COMMAND_DELAY_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: statemaximum_command_delay instead of this: state_maximum_command_delay
      return state_maximum_command_delay_get_enum_value_number(name);
    }
  #endif
  #ifdef STATE_NETWORK_LIST_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: statenetwork_list instead of this: state_network_list
      return state_network_list_get_enum_value_number(name);
    }
  #endif
  }

  if (64771 == cluster_id) {
  #ifdef BINDING_BINDING_TABLE_FULL_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: bindingbinding_table_full instead of this: binding_binding_table_full
      return binding_binding_table_full_get_enum_value_number(name);
    }
  #endif
  #ifdef BINDING_BINDABLE_CLUSTER_LIST_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: bindingbindable_cluster_list instead of this: binding_bindable_cluster_list
      return binding_bindable_cluster_list_get_enum_value_number(name);
    }
  #endif
  #ifdef BINDING_BINDING_TABLE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: bindingbinding_table instead of this: binding_binding_table
      return binding_binding_table_get_enum_value_number(name);
    }
  #endif
  }

  if (64772 == cluster_id) {
  #ifdef SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsreporting_interval_seconds instead of this: system_metrics_reporting_interval_seconds
      return system_metrics_reporting_interval_seconds_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_usage_percent instead of this: system_metrics_cpu_usage_percent
      return system_metrics_cpu_usage_percent_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_FREQUENCYM_HZ_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_frequencym_hz instead of this: system_metrics_cpu_frequencym_hz
      return system_metrics_cpu_frequencym_hz_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_average_usage_percent instead of this: system_metrics_cpu_average_usage_percent
      return system_metrics_cpu_average_usage_percent_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_min_usage_percent instead of this: system_metrics_cpu_min_usage_percent
      return system_metrics_cpu_min_usage_percent_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (20 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscpu_max_usage_percent instead of this: system_metrics_cpu_max_usage_percent
      return system_metrics_cpu_max_usage_percent_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_RAM_TOTALMB_ENUM_NAME_AVAILABLE
    if (32 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsram_totalmb instead of this: system_metrics_ram_totalmb
      return system_metrics_ram_totalmb_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_RAM_FREEMB_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsram_freemb instead of this: system_metrics_ram_freemb
      return system_metrics_ram_freemb_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_RAM_AVAILABLEMB_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsram_availablemb instead of this: system_metrics_ram_availablemb
      return system_metrics_ram_availablemb_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_SWAP_MEMORY_TOTALMB_ENUM_NAME_AVAILABLE
    if (35 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsswap_memory_totalmb instead of this: system_metrics_swap_memory_totalmb
      return system_metrics_swap_memory_totalmb_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_SWAP_MEMORY_USEDMB_ENUM_NAME_AVAILABLE
    if (36 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsswap_memory_usedmb instead of this: system_metrics_swap_memory_usedmb
      return system_metrics_swap_memory_usedmb_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB_ENUM_NAME_AVAILABLE
    if (37 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsvirtual_memory_totalmb instead of this: system_metrics_virtual_memory_totalmb
      return system_metrics_virtual_memory_totalmb_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB_ENUM_NAME_AVAILABLE
    if (38 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsvirtual_memory_usedmb instead of this: system_metrics_virtual_memory_usedmb
      return system_metrics_virtual_memory_usedmb_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_DISKS_USAGE_ENUM_NAME_AVAILABLE
    if (39 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsdisks_usage instead of this: system_metrics_disks_usage
      return system_metrics_disks_usage_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_DISKS_COUNTERS_ENUM_NAME_AVAILABLE
    if (40 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsdisks_counters instead of this: system_metrics_disks_counters
      return system_metrics_disks_counters_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_NETWORK_INTERFACES_DATA_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsnetwork_interfaces_data instead of this: system_metrics_network_interfaces_data
      return system_metrics_network_interfaces_data_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricswireless_network_interfaces_data instead of this: system_metrics_wireless_network_interfaces_data
      return system_metrics_wireless_network_interfaces_data_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_HOSTNAME_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricshostname instead of this: system_metrics_hostname
      return system_metrics_hostname_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_FQDN_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsfqdn instead of this: system_metrics_fqdn
      return system_metrics_fqdn_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_UPTIME_MINUTES_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsuptime_minutes instead of this: system_metrics_uptime_minutes
      return system_metrics_uptime_minutes_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS_ENUM_NAME_AVAILABLE
    if (80 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricscurrent_temperature_celcius instead of this: system_metrics_current_temperature_celcius
      return system_metrics_current_temperature_celcius_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS_ENUM_NAME_AVAILABLE
    if (81 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsaverage_temperature_celcius instead of this: system_metrics_average_temperature_celcius
      return system_metrics_average_temperature_celcius_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS_ENUM_NAME_AVAILABLE
    if (82 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsmin_temperature_celcius instead of this: system_metrics_min_temperature_celcius
      return system_metrics_min_temperature_celcius_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS_ENUM_NAME_AVAILABLE
    if (83 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsmax_temperature_celcius instead of this: system_metrics_max_temperature_celcius
      return system_metrics_max_temperature_celcius_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_POWER_PLUGGED_ENUM_NAME_AVAILABLE
    if (96 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricspower_plugged instead of this: system_metrics_power_plugged
      return system_metrics_power_plugged_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_BATTERY_PERCENTAGE_ENUM_NAME_AVAILABLE
    if (97 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricsbattery_percentage instead of this: system_metrics_battery_percentage
      return system_metrics_battery_percentage_get_enum_value_number(name);
    }
  #endif
  #ifdef SYSTEM_METRICS_SYSTEM_INTERRUPTS_ENUM_NAME_AVAILABLE
    if (112 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: system_metricssystem_interrupts instead of this: system_metrics_system_interrupts
      return system_metrics_system_interrupts_get_enum_value_number(name);
    }
  #endif
  }

  if (64773 == cluster_id) {
  #ifdef APPLICATION_MONITORING_APPLICATION_NAME_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_name instead of this: application_monitoring_application_name
      return application_monitoring_application_name_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_VERSION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_version instead of this: application_monitoring_application_version
      return application_monitoring_application_version_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CONNECTED_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_connected instead of this: application_monitoring_application_connected
      return application_monitoring_application_connected_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_mqtt_topics instead of this: application_monitoring_application_mqtt_topics
      return application_monitoring_application_mqtt_topics_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_UPTIME_MINUTES_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringuptime_minutes instead of this: application_monitoring_uptime_minutes
      return application_monitoring_uptime_minutes_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_PROCESS_ID_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringprocess_id instead of this: application_monitoring_process_id
      return application_monitoring_process_id_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_HOSTNAME_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringhostname instead of this: application_monitoring_hostname
      return application_monitoring_hostname_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_FQDN_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringfqdn instead of this: application_monitoring_fqdn
      return application_monitoring_fqdn_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_LOGGING_ENABLED_ENUM_NAME_AVAILABLE
    if (33 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_logging_enabled instead of this: application_monitoring_mqtt_logging_enabled
      return application_monitoring_mqtt_logging_enabled_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_LOGGING_LEVEL_ENUM_NAME_AVAILABLE
    if (34 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_logging_level instead of this: application_monitoring_mqtt_logging_level
      return application_monitoring_mqtt_logging_level_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS_ENUM_NAME_AVAILABLE
    if (48 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_statistics_reporting_interval_seconds instead of this: application_monitoring_mqtt_statistics_reporting_interval_seconds
      return application_monitoring_mqtt_statistics_reporting_interval_seconds_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_MESSAGES_SENT_ENUM_NAME_AVAILABLE
    if (49 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_messages_sent instead of this: application_monitoring_mqtt_messages_sent
      return application_monitoring_mqtt_messages_sent_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED_ENUM_NAME_AVAILABLE
    if (50 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_messages_received instead of this: application_monitoring_mqtt_messages_received
      return application_monitoring_mqtt_messages_received_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT_ENUM_NAME_AVAILABLE
    if (51 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_subscription_count instead of this: application_monitoring_mqtt_subscription_count
      return application_monitoring_mqtt_subscription_count_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS_ENUM_NAME_AVAILABLE
    if (52 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_average_delivery_time_seconds instead of this: application_monitoring_mqtt_average_delivery_time_seconds
      return application_monitoring_mqtt_average_delivery_time_seconds_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS_ENUM_NAME_AVAILABLE
    if (53 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_min_delivery_time_seconds instead of this: application_monitoring_mqtt_min_delivery_time_seconds
      return application_monitoring_mqtt_min_delivery_time_seconds_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS_ENUM_NAME_AVAILABLE
    if (54 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringmqtt_max_delivery_time_seconds instead of this: application_monitoring_mqtt_max_delivery_time_seconds
      return application_monitoring_mqtt_max_delivery_time_seconds_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS_ENUM_NAME_AVAILABLE
    if (64 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_statistics_reporting_interval_seconds instead of this: application_monitoring_application_statistics_reporting_interval_seconds
      return application_monitoring_application_statistics_reporting_interval_seconds_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (65 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_cpu_usage_percent instead of this: application_monitoring_application_cpu_usage_percent
      return application_monitoring_application_cpu_usage_percent_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (66 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_cpu_average_usage_percent instead of this: application_monitoring_application_cpu_average_usage_percent
      return application_monitoring_application_cpu_average_usage_percent_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (67 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_cpu_min_usage_percent instead of this: application_monitoring_application_cpu_min_usage_percent
      return application_monitoring_application_cpu_min_usage_percent_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT_ENUM_NAME_AVAILABLE
    if (68 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_cpu_max_usage_percent instead of this: application_monitoring_application_cpu_max_usage_percent
      return application_monitoring_application_cpu_max_usage_percent_get_enum_value_number(name);
    }
  #endif
  #ifdef APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB_ENUM_NAME_AVAILABLE
    if (69 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: application_monitoringapplication_ram_usagemb instead of this: application_monitoring_application_ram_usagemb
      return application_monitoring_application_ram_usagemb_get_enum_value_number(name);
    }
  #endif
  }

  if (64774 == cluster_id) {
  #ifdef NAME_AND_LOCATION_NAME_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: name_and_locationname instead of this: name_and_location_name
      return name_and_location_name_get_enum_value_number(name);
    }
  #endif
  #ifdef NAME_AND_LOCATION_LOCATION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: name_and_locationlocation instead of this: name_and_location_location
      return name_and_location_location_get_enum_value_number(name);
    }
  #endif
  }

  if (64775 == cluster_id) {
  #ifdef CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: configuration_parametersconfiguration_parameters instead of this: configuration_parameters_configuration_parameters
      return configuration_parameters_configuration_parameters_get_enum_value_number(name);
    }
  #endif
  }

  if (64776 == cluster_id) {
  #ifdef USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupported_user_unique_identifiers instead of this: user_credential_supported_user_unique_identifiers
      return user_credential_supported_user_unique_identifiers_get_enum_value_number(name);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupported_credential_rules instead of this: user_credential_supported_credential_rules
      return user_credential_supported_credential_rules_get_enum_value_number(name);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupported_credential_types instead of this: user_credential_supported_credential_types
      return user_credential_supported_credential_types_get_enum_value_number(name);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORTED_USER_TYPES_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupported_user_types instead of this: user_credential_supported_user_types
      return user_credential_supported_user_types_get_enum_value_number(name);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupport_credential_checksum instead of this: user_credential_support_credential_checksum
      return user_credential_support_credential_checksum_get_enum_value_number(name);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupport_admin_pin_code instead of this: user_credential_support_admin_pin_code
      return user_credential_support_admin_pin_code_get_enum_value_number(name);
    }
  #endif
  #ifdef USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialsupport_admin_pin_code_deactivation instead of this: user_credential_support_admin_pin_code_deactivation
      return user_credential_support_admin_pin_code_deactivation_get_enum_value_number(name);
    }
  #endif
  #ifdef USER_CREDENTIAL_ADMIN_PIN_CODE_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: user_credentialadmin_pin_code instead of this: user_credential_admin_pin_code
      return user_credential_admin_pin_code_get_enum_value_number(name);
    }
  #endif
  }

  if (64784 == cluster_id) {
  #ifdef AOX_LOCATOR_REPORTING_MODE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorreporting_mode instead of this: aox_locator_reporting_mode
      return aox_locator_reporting_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorposition_and_orientation_valid instead of this: aox_locator_position_and_orientation_valid
      return aox_locator_position_and_orientation_valid_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_POSITION_AND_ORIENTATION_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorposition_and_orientation instead of this: aox_locator_position_and_orientation
      return aox_locator_position_and_orientation_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_AZIMUTH_MASK_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorazimuth_mask instead of this: aox_locator_azimuth_mask
      return aox_locator_azimuth_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_ELEVATION_MASK_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorelevation_mask instead of this: aox_locator_elevation_mask
      return aox_locator_elevation_mask_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_ALLOW_LIST_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorallow_list instead of this: aox_locator_allow_list
      return aox_locator_allow_list_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_AOX_MODE_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatoraox_mode instead of this: aox_locator_aox_mode
      return aox_locator_aox_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_ANTENNA_MODE_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorantenna_mode instead of this: aox_locator_antenna_mode
      return aox_locator_antenna_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_ANTENNA_ARRAY_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorantenna_array instead of this: aox_locator_antenna_array
      return aox_locator_antenna_array_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_PERIOD_SAMPLES_ENUM_NAME_AVAILABLE
    if (11 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorperiod_samples instead of this: aox_locator_period_samples
      return aox_locator_period_samples_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_ANGLE_FILTERING_ENUM_NAME_AVAILABLE
    if (12 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorangle_filtering instead of this: aox_locator_angle_filtering
      return aox_locator_angle_filtering_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_ANGLE_FILTERING_WEIGHT_ENUM_NAME_AVAILABLE
    if (13 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorangle_filtering_weight instead of this: aox_locator_angle_filtering_weight
      return aox_locator_angle_filtering_weight_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT_ENUM_NAME_AVAILABLE
    if (14 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorangle_correction_timeout instead of this: aox_locator_angle_correction_timeout
      return aox_locator_angle_correction_timeout_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_ANGLE_CORRECTION_DELAY_ENUM_NAME_AVAILABLE
    if (15 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorangle_correction_delay instead of this: aox_locator_angle_correction_delay
      return aox_locator_angle_correction_delay_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_CTE_MODE_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorcte_mode instead of this: aox_locator_cte_mode
      return aox_locator_cte_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_CTE_SAMPLING_INTERVAL_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorcte_sampling_interval instead of this: aox_locator_cte_sampling_interval
      return aox_locator_cte_sampling_interval_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_CTE_LENGTH_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorcte_length instead of this: aox_locator_cte_length
      return aox_locator_cte_length_get_enum_value_number(name);
    }
  #endif
  #ifdef AOX_LOCATOR_SLOT_DURATION_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_locatorslot_duration instead of this: aox_locator_slot_duration
      return aox_locator_slot_duration_get_enum_value_number(name);
    }
  #endif
  }

  if (64785 == cluster_id) {
  #ifdef AOX_POSITION_ESTIMATION_POSITION_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: aox_position_estimationposition instead of this: aox_position_estimation_position
      return aox_position_estimation_position_get_enum_value_number(name);
    }
  #endif
  }

  if (64786 == cluster_id) {
  #ifdef PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: protocol_controller_network_managementnetwork_management_state instead of this: protocol_controller_network_management_network_management_state
      return protocol_controller_network_management_network_management_state_get_enum_value_number(name);
    }
  #endif
  }

  if (64787 == cluster_id) {
  #ifdef DESCRIPTOR_DEVICE_TYPE_LIST_ENUM_NAME_AVAILABLE
    if (0 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: descriptordevice_type_list instead of this: descriptor_device_type_list
      return descriptor_device_type_list_get_enum_value_number(name);
    }
  #endif
  }

  if (64788 == cluster_id) {
  #ifdef UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_fan_controlz_wave_fan_mode instead of this: unify_fan_control_z_wave_fan_mode
      return unify_fan_control_z_wave_fan_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_fan_controlz_wave_supported_fan_mode instead of this: unify_fan_control_z_wave_supported_fan_mode
      return unify_fan_control_z_wave_supported_fan_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_fan_controlz_wave_fan_state instead of this: unify_fan_control_z_wave_fan_state
      return unify_fan_control_z_wave_fan_state_get_enum_value_number(name);
    }
  #endif
  }

  if (64789 == cluster_id) {
  #ifdef UNIFY_THERMOSTAT_THERMOSTAT_MODE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_thermostatthermostat_mode instead of this: unify_thermostat_thermostat_mode
      return unify_thermostat_thermostat_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_thermostatsupported_thermostat_mode instead of this: unify_thermostat_supported_thermostat_mode
      return unify_thermostat_supported_thermostat_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_THERMOSTAT_OPERATING_STATE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_thermostatoperating_state instead of this: unify_thermostat_operating_state
      return unify_thermostat_operating_state_get_enum_value_number(name);
    }
  #endif
  }

  if (64928 == cluster_id) {
  #ifdef UNIFY_HUMIDITY_CONTROL_REPORTING_MODE_ENUM_NAME_AVAILABLE
    if (1 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlreporting_mode instead of this: unify_humidity_control_reporting_mode
      return unify_humidity_control_reporting_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE_ENUM_NAME_AVAILABLE
    if (2 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlsupported_reporting_mode instead of this: unify_humidity_control_supported_reporting_mode
      return unify_humidity_control_supported_reporting_mode_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_CURRENT_STATE_ENUM_NAME_AVAILABLE
    if (3 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlcurrent_state instead of this: unify_humidity_control_current_state
      return unify_humidity_control_current_state_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS_ENUM_NAME_AVAILABLE
    if (4 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlsupported_set_points instead of this: unify_humidity_control_supported_set_points
      return unify_humidity_control_supported_set_points_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN_ENUM_NAME_AVAILABLE
    if (5 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint_min instead of this: unify_humidity_control_humidifier_setpoint_min
      return unify_humidity_control_humidifier_setpoint_min_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX_ENUM_NAME_AVAILABLE
    if (6 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint_max instead of this: unify_humidity_control_humidifier_setpoint_max
      return unify_humidity_control_humidifier_setpoint_max_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_ENUM_NAME_AVAILABLE
    if (7 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint instead of this: unify_humidity_control_humidifier_setpoint
      return unify_humidity_control_humidifier_setpoint_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE_ENUM_NAME_AVAILABLE
    if (8 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint_scale instead of this: unify_humidity_control_humidifier_setpoint_scale
      return unify_humidity_control_humidifier_setpoint_scale_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION_ENUM_NAME_AVAILABLE
    if (9 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlhumidifier_setpoint_precision instead of this: unify_humidity_control_humidifier_setpoint_precision
      return unify_humidity_control_humidifier_setpoint_precision_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN_ENUM_NAME_AVAILABLE
    if (10 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint_min instead of this: unify_humidity_control_dehumidifier_setpoint_min
      return unify_humidity_control_dehumidifier_setpoint_min_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX_ENUM_NAME_AVAILABLE
    if (11 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint_max instead of this: unify_humidity_control_dehumidifier_setpoint_max
      return unify_humidity_control_dehumidifier_setpoint_max_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_ENUM_NAME_AVAILABLE
    if (12 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint instead of this: unify_humidity_control_dehumidifier_setpoint
      return unify_humidity_control_dehumidifier_setpoint_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE_ENUM_NAME_AVAILABLE
    if (13 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint_scale instead of this: unify_humidity_control_dehumidifier_setpoint_scale
      return unify_humidity_control_dehumidifier_setpoint_scale_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION_ENUM_NAME_AVAILABLE
    if (14 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controldehumidifier_setpoint_precision instead of this: unify_humidity_control_dehumidifier_setpoint_precision
      return unify_humidity_control_dehumidifier_setpoint_precision_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN_ENUM_NAME_AVAILABLE
    if (15 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint_min instead of this: unify_humidity_control_auto_setpoint_min
      return unify_humidity_control_auto_setpoint_min_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX_ENUM_NAME_AVAILABLE
    if (16 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint_max instead of this: unify_humidity_control_auto_setpoint_max
      return unify_humidity_control_auto_setpoint_max_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_ENUM_NAME_AVAILABLE
    if (17 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint instead of this: unify_humidity_control_auto_setpoint
      return unify_humidity_control_auto_setpoint_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE_ENUM_NAME_AVAILABLE
    if (18 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint_scale instead of this: unify_humidity_control_auto_setpoint_scale
      return unify_humidity_control_auto_setpoint_scale_get_enum_value_number(name);
    }
  #endif
  #ifdef UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION_ENUM_NAME_AVAILABLE
    if (19 == attribute_id) {
      // FIXME: Some attributes don't work because multi-upper case names end up like this: unify_humidity_controlauto_setpoint_precision instead of this: unify_humidity_control_auto_setpoint_precision
      return unify_humidity_control_auto_setpoint_precision_get_enum_value_number(name);
    }
  #endif
  }


  // No known numeric value is set for this string.
  // Return UINT32_MAX to indicate an error.
  return std::numeric_limits<uint32_t>::max();
}

// C Wrapper
extern "C" {
char *aox_locator_antenna_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", aox_locator_antenna_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t aox_locator_antenna_mode_get_enum_value_number_c(const char *str)
{
  return aox_locator_antenna_mode_get_enum_value_number(std::string(str));
}
char *aox_locator_aox_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", aox_locator_aox_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t aox_locator_aox_mode_get_enum_value_number_c(const char *str)
{
  return aox_locator_aox_mode_get_enum_value_number(std::string(str));
}
char *aox_locator_cte_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", aox_locator_cte_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t aox_locator_cte_mode_get_enum_value_number_c(const char *str)
{
  return aox_locator_cte_mode_get_enum_value_number(std::string(str));
}
char *aox_locator_reporting_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", aox_locator_reporting_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t aox_locator_reporting_mode_get_enum_value_number_c(const char *str)
{
  return aox_locator_reporting_mode_get_enum_value_number(std::string(str));
}
char *arm_arm_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", arm_arm_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t arm_arm_mode_get_enum_value_number_c(const char *str)
{
  return arm_arm_mode_get_enum_value_number(std::string(str));
}
char *arm_response_arm_notification_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", arm_response_arm_notification_get_enum_value_name(value).c_str());
  return result;
}

uint32_t arm_response_arm_notification_get_enum_value_number_c(const char *str)
{
  return arm_response_arm_notification_get_enum_value_number(std::string(str));
}
char *barrier_control_moving_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", barrier_control_moving_state_get_enum_value_name(value).c_str());
  return result;
}

uint32_t barrier_control_moving_state_get_enum_value_number_c(const char *str)
{
  return barrier_control_moving_state_get_enum_value_number(std::string(str));
}
char *basic_generic_device_class_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", basic_generic_device_class_get_enum_value_name(value).c_str());
  return result;
}

uint32_t basic_generic_device_class_get_enum_value_number_c(const char *str)
{
  return basic_generic_device_class_get_enum_value_number(std::string(str));
}
char *basic_generic_device_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", basic_generic_device_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t basic_generic_device_type_get_enum_value_number_c(const char *str)
{
  return basic_generic_device_type_get_enum_value_number(std::string(str));
}
char *basic_physical_environment_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", basic_physical_environment_get_enum_value_name(value).c_str());
  return result;
}

uint32_t basic_physical_environment_get_enum_value_number_c(const char *str)
{
  return basic_physical_environment_get_enum_value_number(std::string(str));
}
char *basic_power_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", basic_power_source_get_enum_value_name(value).c_str());
  return result;
}

uint32_t basic_power_source_get_enum_value_number_c(const char *str)
{
  return basic_power_source_get_enum_value_number(std::string(str));
}
char *battery_size_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", battery_size_get_enum_value_name(value).c_str());
  return result;
}

uint32_t battery_size_get_enum_value_number_c(const char *str)
{
  return battery_size_get_enum_value_number(std::string(str));
}
char *bypass_response_zone_id_bypass_result_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", bypass_response_zone_id_bypass_result_get_enum_value_name(value).c_str());
  return result;
}

uint32_t bypass_response_zone_id_bypass_result_get_enum_value_number_c(const char *str)
{
  return bypass_response_zone_id_bypass_result_get_enum_value_number(std::string(str));
}
char *cc_color_loop_direction_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", cc_color_loop_direction_get_enum_value_name(value).c_str());
  return result;
}

uint32_t cc_color_loop_direction_get_enum_value_number_c(const char *str)
{
  return cc_color_loop_direction_get_enum_value_number(std::string(str));
}
char *cc_direction_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", cc_direction_get_enum_value_name(value).c_str());
  return result;
}

uint32_t cc_direction_get_enum_value_number_c(const char *str)
{
  return cc_direction_get_enum_value_number(std::string(str));
}
char *cc_move_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", cc_move_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t cc_move_mode_get_enum_value_number_c(const char *str)
{
  return cc_move_mode_get_enum_value_number(std::string(str));
}
char *cc_step_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", cc_step_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t cc_step_mode_get_enum_value_number_c(const char *str)
{
  return cc_step_mode_get_enum_value_number(std::string(str));
}
char *color_control_color_loop_active_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", color_control_color_loop_active_get_enum_value_name(value).c_str());
  return result;
}

uint32_t color_control_color_loop_active_get_enum_value_number_c(const char *str)
{
  return color_control_color_loop_active_get_enum_value_number(std::string(str));
}
char *color_control_color_loop_direction_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", color_control_color_loop_direction_get_enum_value_name(value).c_str());
  return result;
}

uint32_t color_control_color_loop_direction_get_enum_value_number_c(const char *str)
{
  return color_control_color_loop_direction_get_enum_value_number(std::string(str));
}
char *color_control_color_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", color_control_color_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t color_control_color_mode_get_enum_value_number_c(const char *str)
{
  return color_control_color_mode_get_enum_value_number(std::string(str));
}
char *color_control_drift_compensation_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", color_control_drift_compensation_get_enum_value_name(value).c_str());
  return result;
}

uint32_t color_control_drift_compensation_get_enum_value_number_c(const char *str)
{
  return color_control_drift_compensation_get_enum_value_number(std::string(str));
}
char *color_control_enhanced_color_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", color_control_enhanced_color_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t color_control_enhanced_color_mode_get_enum_value_number_c(const char *str)
{
  return color_control_enhanced_color_mode_get_enum_value_number(std::string(str));
}
char *color_loop_set_action_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", color_loop_set_action_get_enum_value_name(value).c_str());
  return result;
}

uint32_t color_loop_set_action_get_enum_value_number_c(const char *str)
{
  return color_loop_set_action_get_enum_value_number(std::string(str));
}
char *commissioning_network_key_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", commissioning_network_key_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t commissioning_network_key_type_get_enum_value_number_c(const char *str)
{
  return commissioning_network_key_type_get_enum_value_number(std::string(str));
}
char *commissioning_protocol_version_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", commissioning_protocol_version_get_enum_value_name(value).c_str());
  return result;
}

uint32_t commissioning_protocol_version_get_enum_value_number_c(const char *str)
{
  return commissioning_protocol_version_get_enum_value_number(std::string(str));
}
char *commissioning_stack_profile_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", commissioning_stack_profile_get_enum_value_name(value).c_str());
  return result;
}

uint32_t commissioning_stack_profile_get_enum_value_number_c(const char *str)
{
  return commissioning_stack_profile_get_enum_value_number(std::string(str));
}
char *commissioning_startup_control_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", commissioning_startup_control_get_enum_value_name(value).c_str());
  return result;
}

uint32_t commissioning_startup_control_get_enum_value_number_c(const char *str)
{
  return commissioning_startup_control_get_enum_value_number(std::string(str));
}
char *cred_rule_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", cred_rule_get_enum_value_name(value).c_str());
  return result;
}

uint32_t cred_rule_get_enum_value_number_c(const char *str)
{
  return cred_rule_get_enum_value_number(std::string(str));
}
char *cred_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", cred_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t cred_type_get_enum_value_number_c(const char *str)
{
  return cred_type_get_enum_value_number(std::string(str));
}
char *credential_rule_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", credential_rule_enum_get_enum_value_name(value).c_str());
  return result;
}

uint32_t credential_rule_enum_get_enum_value_number_c(const char *str)
{
  return credential_rule_enum_get_enum_value_number(std::string(str));
}
char *credential_type_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", credential_type_enum_get_enum_value_name(value).c_str());
  return result;
}

uint32_t credential_type_enum_get_enum_value_number_c(const char *str)
{
  return credential_type_enum_get_enum_value_number(std::string(str));
}
char *data_operation_type_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", data_operation_type_enum_get_enum_value_name(value).c_str());
  return result;
}

uint32_t data_operation_type_enum_get_enum_value_number_c(const char *str)
{
  return data_operation_type_enum_get_enum_value_number(std::string(str));
}
char *dehumidification_control_dehumidification_lockout_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", dehumidification_control_dehumidification_lockout_get_enum_value_name(value).c_str());
  return result;
}

uint32_t dehumidification_control_dehumidification_lockout_get_enum_value_number_c(const char *str)
{
  return dehumidification_control_dehumidification_lockout_get_enum_value_number(std::string(str));
}
char *dehumidification_control_relative_humidity_display_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", dehumidification_control_relative_humidity_display_get_enum_value_name(value).c_str());
  return result;
}

uint32_t dehumidification_control_relative_humidity_display_get_enum_value_number_c(const char *str)
{
  return dehumidification_control_relative_humidity_display_get_enum_value_number(std::string(str));
}
char *dehumidification_control_relative_humidity_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", dehumidification_control_relative_humidity_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t dehumidification_control_relative_humidity_mode_get_enum_value_number_c(const char *str)
{
  return dehumidification_control_relative_humidity_mode_get_enum_value_number(std::string(str));
}
char *dev_type_id_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", dev_type_id_get_enum_value_name(value).c_str());
  return result;
}

uint32_t dev_type_id_get_enum_value_number_c(const char *str)
{
  return dev_type_id_get_enum_value_number(std::string(str));
}
char *door_lock_door_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", door_lock_door_state_get_enum_value_name(value).c_str());
  return result;
}

uint32_t door_lock_door_state_get_enum_value_number_c(const char *str)
{
  return door_lock_door_state_get_enum_value_number(std::string(str));
}
char *door_lock_led_settings_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", door_lock_led_settings_get_enum_value_name(value).c_str());
  return result;
}

uint32_t door_lock_led_settings_get_enum_value_number_c(const char *str)
{
  return door_lock_led_settings_get_enum_value_number(std::string(str));
}
char *door_lock_lock_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", door_lock_lock_state_get_enum_value_name(value).c_str());
  return result;
}

uint32_t door_lock_lock_state_get_enum_value_number_c(const char *str)
{
  return door_lock_lock_state_get_enum_value_number(std::string(str));
}
char *door_lock_lock_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", door_lock_lock_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t door_lock_lock_type_get_enum_value_number_c(const char *str)
{
  return door_lock_lock_type_get_enum_value_number(std::string(str));
}
char *door_lock_security_level_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", door_lock_security_level_get_enum_value_name(value).c_str());
  return result;
}

uint32_t door_lock_security_level_get_enum_value_number_c(const char *str)
{
  return door_lock_security_level_get_enum_value_number(std::string(str));
}
char *door_lock_sound_volume_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", door_lock_sound_volume_get_enum_value_name(value).c_str());
  return result;
}

uint32_t door_lock_sound_volume_get_enum_value_number_c(const char *str)
{
  return door_lock_sound_volume_get_enum_value_number(std::string(str));
}
char *drlk_oper_event_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", drlk_oper_event_source_get_enum_value_name(value).c_str());
  return result;
}

uint32_t drlk_oper_event_source_get_enum_value_number_c(const char *str)
{
  return drlk_oper_event_source_get_enum_value_number(std::string(str));
}
char *drlk_oper_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", drlk_oper_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t drlk_oper_mode_get_enum_value_number_c(const char *str)
{
  return drlk_oper_mode_get_enum_value_number(std::string(str));
}
char *drlk_pass_fail_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", drlk_pass_fail_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t drlk_pass_fail_status_get_enum_value_number_c(const char *str)
{
  return drlk_pass_fail_status_get_enum_value_number(std::string(str));
}
char *drlk_set_code_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", drlk_set_code_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t drlk_set_code_status_get_enum_value_number_c(const char *str)
{
  return drlk_set_code_status_get_enum_value_number(std::string(str));
}
char *drlk_settable_user_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", drlk_settable_user_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t drlk_settable_user_status_get_enum_value_number_c(const char *str)
{
  return drlk_settable_user_status_get_enum_value_number(std::string(str));
}
char *drlk_user_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", drlk_user_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t drlk_user_status_get_enum_value_number_c(const char *str)
{
  return drlk_user_status_get_enum_value_number(std::string(str));
}
char *drlk_user_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", drlk_user_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t drlk_user_type_get_enum_value_number_c(const char *str)
{
  return drlk_user_type_get_enum_value_number(std::string(str));
}
char *fan_control_fan_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", fan_control_fan_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t fan_control_fan_mode_get_enum_value_number_c(const char *str)
{
  return fan_control_fan_mode_get_enum_value_number(std::string(str));
}
char *fan_control_fan_mode_sequence_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", fan_control_fan_mode_sequence_get_enum_value_name(value).c_str());
  return result;
}

uint32_t fan_control_fan_mode_sequence_get_enum_value_number_c(const char *str)
{
  return fan_control_fan_mode_sequence_get_enum_value_number(std::string(str));
}
char *get_log_record_response_event_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", get_log_record_response_event_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t get_log_record_response_event_type_get_enum_value_number_c(const char *str)
{
  return get_log_record_response_event_type_get_enum_value_number(std::string(str));
}
char *get_measurement_profile_response_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", get_measurement_profile_response_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t get_measurement_profile_response_status_get_enum_value_number_c(const char *str)
{
  return get_measurement_profile_response_status_get_enum_value_number(std::string(str));
}
char *hvac_system_type_configuration_cooling_system_stage_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", hvac_system_type_configuration_cooling_system_stage_get_enum_value_name(value).c_str());
  return result;
}

uint32_t hvac_system_type_configuration_cooling_system_stage_get_enum_value_number_c(const char *str)
{
  return hvac_system_type_configuration_cooling_system_stage_get_enum_value_number(std::string(str));
}
char *hvac_system_type_configuration_heating_fuel_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", hvac_system_type_configuration_heating_fuel_source_get_enum_value_name(value).c_str());
  return result;
}

uint32_t hvac_system_type_configuration_heating_fuel_source_get_enum_value_number_c(const char *str)
{
  return hvac_system_type_configuration_heating_fuel_source_get_enum_value_number(std::string(str));
}
char *hvac_system_type_configuration_heating_system_stage_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", hvac_system_type_configuration_heating_system_stage_get_enum_value_name(value).c_str());
  return result;
}

uint32_t hvac_system_type_configuration_heating_system_stage_get_enum_value_number_c(const char *str)
{
  return hvac_system_type_configuration_heating_system_stage_get_enum_value_number(std::string(str));
}
char *hvac_system_type_configuration_heating_system_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", hvac_system_type_configuration_heating_system_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t hvac_system_type_configuration_heating_system_type_get_enum_value_number_c(const char *str)
{
  return hvac_system_type_configuration_heating_system_type_get_enum_value_number(std::string(str));
}
char *ias_zone_zone_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", ias_zone_zone_state_get_enum_value_name(value).c_str());
  return result;
}

uint32_t ias_zone_zone_state_get_enum_value_number_c(const char *str)
{
  return ias_zone_zone_state_get_enum_value_number(std::string(str));
}
char *ias_zone_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", ias_zone_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t ias_zone_type_get_enum_value_number_c(const char *str)
{
  return ias_zone_type_get_enum_value_number(std::string(str));
}
char *iasac_panel_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", iasac_panel_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t iasac_panel_status_get_enum_value_number_c(const char *str)
{
  return iasac_panel_status_get_enum_value_number(std::string(str));
}
char *iasace_alarm_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", iasace_alarm_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t iasace_alarm_status_get_enum_value_number_c(const char *str)
{
  return iasace_alarm_status_get_enum_value_number(std::string(str));
}
char *iasace_audible_notification_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", iasace_audible_notification_get_enum_value_name(value).c_str());
  return result;
}

uint32_t iasace_audible_notification_get_enum_value_number_c(const char *str)
{
  return iasace_audible_notification_get_enum_value_number(std::string(str));
}
char *iaswd_level_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", iaswd_level_get_enum_value_name(value).c_str());
  return result;
}

uint32_t iaswd_level_get_enum_value_number_c(const char *str)
{
  return iaswd_level_get_enum_value_number(std::string(str));
}
char *illuminance_level_sensing_level_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", illuminance_level_sensing_level_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t illuminance_level_sensing_level_status_get_enum_value_number_c(const char *str)
{
  return illuminance_level_sensing_level_status_get_enum_value_number(std::string(str));
}
char *illuminance_level_sensing_light_sensor_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", illuminance_level_sensing_light_sensor_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t illuminance_level_sensing_light_sensor_type_get_enum_value_number_c(const char *str)
{
  return illuminance_level_sensing_light_sensor_type_get_enum_value_number(std::string(str));
}
char *illuminance_measurement_light_sensor_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", illuminance_measurement_light_sensor_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t illuminance_measurement_light_sensor_type_get_enum_value_number_c(const char *str)
{
  return illuminance_measurement_light_sensor_type_get_enum_value_number(std::string(str));
}
char *image_notify_payload_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", image_notify_payload_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t image_notify_payload_type_get_enum_value_number_c(const char *str)
{
  return image_notify_payload_type_get_enum_value_number(std::string(str));
}
char *logging_level_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", logging_level_enum_get_enum_value_name(value).c_str());
  return result;
}

uint32_t logging_level_enum_get_enum_value_number_c(const char *str)
{
  return logging_level_enum_get_enum_value_number(std::string(str));
}
char *metering_energy_carrier_unit_of_measure_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", metering_energy_carrier_unit_of_measure_get_enum_value_name(value).c_str());
  return result;
}

uint32_t metering_energy_carrier_unit_of_measure_get_enum_value_number_c(const char *str)
{
  return metering_energy_carrier_unit_of_measure_get_enum_value_number(std::string(str));
}
char *metering_metering_device_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", metering_metering_device_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t metering_metering_device_type_get_enum_value_number_c(const char *str)
{
  return metering_metering_device_type_get_enum_value_number(std::string(str));
}
char *metering_supply_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", metering_supply_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t metering_supply_status_get_enum_value_number_c(const char *str)
{
  return metering_supply_status_get_enum_value_number(std::string(str));
}
char *metering_temperature_unit_of_measure_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", metering_temperature_unit_of_measure_get_enum_value_name(value).c_str());
  return result;
}

uint32_t metering_temperature_unit_of_measure_get_enum_value_number_c(const char *str)
{
  return metering_temperature_unit_of_measure_get_enum_value_number(std::string(str));
}
char *metering_unitof_measure_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", metering_unitof_measure_get_enum_value_name(value).c_str());
  return result;
}

uint32_t metering_unitof_measure_get_enum_value_number_c(const char *str)
{
  return metering_unitof_measure_get_enum_value_number(std::string(str));
}
char *mode_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", mode_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t mode_type_get_enum_value_number_c(const char *str)
{
  return mode_type_get_enum_value_number(std::string(str));
}
char *move_step_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", move_step_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t move_step_mode_get_enum_value_number_c(const char *str)
{
  return move_step_mode_get_enum_value_number(std::string(str));
}
char *nm_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", nm_state_get_enum_value_name(value).c_str());
  return result;
}

uint32_t nm_state_get_enum_value_number_c(const char *str)
{
  return nm_state_get_enum_value_number(std::string(str));
}
char *node_state_network_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", node_state_network_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t node_state_network_status_get_enum_value_number_c(const char *str)
{
  return node_state_network_status_get_enum_value_number(std::string(str));
}
char *node_state_security_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", node_state_security_get_enum_value_name(value).c_str());
  return result;
}

uint32_t node_state_security_get_enum_value_number_c(const char *str)
{
  return node_state_security_get_enum_value_number(std::string(str));
}
char *ota_device_specific_image_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", ota_device_specific_image_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t ota_device_specific_image_type_get_enum_value_number_c(const char *str)
{
  return ota_device_specific_image_type_get_enum_value_number(std::string(str));
}
char *ota_upgrade_image_upgrade_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", ota_upgrade_image_upgrade_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t ota_upgrade_image_upgrade_status_get_enum_value_number_c(const char *str)
{
  return ota_upgrade_image_upgrade_status_get_enum_value_number(std::string(str));
}
char *ota_upgrade_upgrade_activation_policy_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", ota_upgrade_upgrade_activation_policy_get_enum_value_name(value).c_str());
  return result;
}

uint32_t ota_upgrade_upgrade_activation_policy_get_enum_value_number_c(const char *str)
{
  return ota_upgrade_upgrade_activation_policy_get_enum_value_number(std::string(str));
}
char *ota_upgrade_upgrade_timeout_policy_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", ota_upgrade_upgrade_timeout_policy_get_enum_value_name(value).c_str());
  return result;
}

uint32_t ota_upgrade_upgrade_timeout_policy_get_enum_value_number_c(const char *str)
{
  return ota_upgrade_upgrade_timeout_policy_get_enum_value_number(std::string(str));
}
char *occupancy_sensing_occupancy_sensor_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", occupancy_sensing_occupancy_sensor_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t occupancy_sensing_occupancy_sensor_type_get_enum_value_number_c(const char *str)
{
  return occupancy_sensing_occupancy_sensor_type_get_enum_value_number(std::string(str));
}
char *off_with_effect_effect_identifier_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", off_with_effect_effect_identifier_get_enum_value_name(value).c_str());
  return result;
}

uint32_t off_with_effect_effect_identifier_get_enum_value_number_c(const char *str)
{
  return off_with_effect_effect_identifier_get_enum_value_number(std::string(str));
}
char *on_off_start_up_on_off_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", on_off_start_up_on_off_get_enum_value_name(value).c_str());
  return result;
}

uint32_t on_off_start_up_on_off_get_enum_value_number_c(const char *str)
{
  return on_off_start_up_on_off_get_enum_value_number(std::string(str));
}
char *operating_event_notification_operation_event_code_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", operating_event_notification_operation_event_code_get_enum_value_name(value).c_str());
  return result;
}

uint32_t operating_event_notification_operation_event_code_get_enum_value_number_c(const char *str)
{
  return operating_event_notification_operation_event_code_get_enum_value_number(std::string(str));
}
char *options_startup_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", options_startup_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t options_startup_mode_get_enum_value_number_c(const char *str)
{
  return options_startup_mode_get_enum_value_number(std::string(str));
}
char *profile_interval_period_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", profile_interval_period_get_enum_value_name(value).c_str());
  return result;
}

uint32_t profile_interval_period_get_enum_value_number_c(const char *str)
{
  return profile_interval_period_get_enum_value_number(std::string(str));
}
char *programming_event_notification_program_event_code_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", programming_event_notification_program_event_code_get_enum_value_name(value).c_str());
  return result;
}

uint32_t programming_event_notification_program_event_code_get_enum_value_number_c(const char *str)
{
  return programming_event_notification_program_event_code_get_enum_value_number(std::string(str));
}
char *programming_event_notification_program_event_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", programming_event_notification_program_event_source_get_enum_value_name(value).c_str());
  return result;
}

uint32_t programming_event_notification_program_event_source_get_enum_value_number_c(const char *str)
{
  return programming_event_notification_program_event_source_get_enum_value_number(std::string(str));
}
char *pump_control_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", pump_control_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t pump_control_mode_get_enum_value_number_c(const char *str)
{
  return pump_control_mode_get_enum_value_number(std::string(str));
}
char *pump_operation_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", pump_operation_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t pump_operation_mode_get_enum_value_number_c(const char *str)
{
  return pump_operation_mode_get_enum_value_number(std::string(str));
}
char *shdcfg_direction_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", shdcfg_direction_get_enum_value_name(value).c_str());
  return result;
}

uint32_t shdcfg_direction_get_enum_value_number_c(const char *str)
{
  return shdcfg_direction_get_enum_value_number(std::string(str));
}
char *scale_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", scale_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t scale_type_get_enum_value_number_c(const char *str)
{
  return scale_type_get_enum_value_number(std::string(str));
}
char *setpoint_raise_or_lower_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", setpoint_raise_or_lower_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t setpoint_raise_or_lower_mode_get_enum_value_number_c(const char *str)
{
  return setpoint_raise_or_lower_mode_get_enum_value_number(std::string(str));
}
char *setpoint_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", setpoint_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t setpoint_type_get_enum_value_number_c(const char *str)
{
  return setpoint_type_get_enum_value_number(std::string(str));
}
char *shade_configuration_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", shade_configuration_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t shade_configuration_mode_get_enum_value_number_c(const char *str)
{
  return shade_configuration_mode_get_enum_value_number(std::string(str));
}
char *siren_configuration_strobe_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", siren_configuration_strobe_get_enum_value_name(value).c_str());
  return result;
}

uint32_t siren_configuration_strobe_get_enum_value_number_c(const char *str)
{
  return siren_configuration_strobe_get_enum_value_number(std::string(str));
}
char *siren_configuration_warning_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", siren_configuration_warning_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t siren_configuration_warning_mode_get_enum_value_number_c(const char *str)
{
  return siren_configuration_warning_mode_get_enum_value_number(std::string(str));
}
char *squawk_configuration_squawk_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", squawk_configuration_squawk_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t squawk_configuration_squawk_mode_get_enum_value_number_c(const char *str)
{
  return squawk_configuration_squawk_mode_get_enum_value_number(std::string(str));
}
char *thermostat_ac_capacity_format_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_ac_capacity_format_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_ac_capacity_format_get_enum_value_number_c(const char *str)
{
  return thermostat_ac_capacity_format_get_enum_value_number(std::string(str));
}
char *thermostat_ac_compressor_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_ac_compressor_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_ac_compressor_type_get_enum_value_number_c(const char *str)
{
  return thermostat_ac_compressor_type_get_enum_value_number(std::string(str));
}
char *thermostat_ac_louver_position_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_ac_louver_position_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_ac_louver_position_get_enum_value_number_c(const char *str)
{
  return thermostat_ac_louver_position_get_enum_value_number(std::string(str));
}
char *thermostat_ac_refrigerant_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_ac_refrigerant_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_ac_refrigerant_type_get_enum_value_number_c(const char *str)
{
  return thermostat_ac_refrigerant_type_get_enum_value_number(std::string(str));
}
char *thermostat_ac_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_ac_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_ac_type_get_enum_value_number_c(const char *str)
{
  return thermostat_ac_type_get_enum_value_number(std::string(str));
}
char *thermostat_control_sequence_of_operation_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_control_sequence_of_operation_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_control_sequence_of_operation_get_enum_value_number_c(const char *str)
{
  return thermostat_control_sequence_of_operation_get_enum_value_number(std::string(str));
}
char *thermostat_programming_operation_mode_programming_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_programming_operation_mode_programming_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_programming_operation_mode_programming_mode_get_enum_value_number_c(const char *str)
{
  return thermostat_programming_operation_mode_programming_mode_get_enum_value_number(std::string(str));
}
char *thermostat_setpoint_change_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_setpoint_change_source_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_setpoint_change_source_get_enum_value_number_c(const char *str)
{
  return thermostat_setpoint_change_source_get_enum_value_number(std::string(str));
}
char *thermostat_start_of_week_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_start_of_week_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_start_of_week_get_enum_value_number_c(const char *str)
{
  return thermostat_start_of_week_get_enum_value_number(std::string(str));
}
char *thermostat_system_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_system_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_system_mode_get_enum_value_number_c(const char *str)
{
  return thermostat_system_mode_get_enum_value_number(std::string(str));
}
char *thermostat_temperature_setpoint_hold_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_temperature_setpoint_hold_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_temperature_setpoint_hold_get_enum_value_number_c(const char *str)
{
  return thermostat_temperature_setpoint_hold_get_enum_value_number(std::string(str));
}
char *thermostat_thermostat_running_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_thermostat_running_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_thermostat_running_mode_get_enum_value_number_c(const char *str)
{
  return thermostat_thermostat_running_mode_get_enum_value_number(std::string(str));
}
char *thermostat_user_interface_configuration_keypad_lockout_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_user_interface_configuration_keypad_lockout_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_user_interface_configuration_keypad_lockout_get_enum_value_number_c(const char *str)
{
  return thermostat_user_interface_configuration_keypad_lockout_get_enum_value_number(std::string(str));
}
char *thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_number_c(const char *str)
{
  return thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_number(std::string(str));
}
char *thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_number_c(const char *str)
{
  return thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_number(std::string(str));
}
char *trigger_effect_effect_identifier_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", trigger_effect_effect_identifier_get_enum_value_name(value).c_str());
  return result;
}

uint32_t trigger_effect_effect_identifier_get_enum_value_number_c(const char *str)
{
  return trigger_effect_effect_identifier_get_enum_value_number(std::string(str));
}
char *trigger_effect_effect_variant_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", trigger_effect_effect_variant_get_enum_value_name(value).c_str());
  return result;
}

uint32_t trigger_effect_effect_variant_get_enum_value_number_c(const char *str)
{
  return trigger_effect_effect_variant_get_enum_value_number(std::string(str));
}
char *tx_report_transmission_speed_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", tx_report_transmission_speed_get_enum_value_name(value).c_str());
  return result;
}

uint32_t tx_report_transmission_speed_get_enum_value_number_c(const char *str)
{
  return tx_report_transmission_speed_get_enum_value_number(std::string(str));
}
char *unify_humidity_control_current_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", unify_humidity_control_current_state_get_enum_value_name(value).c_str());
  return result;
}

uint32_t unify_humidity_control_current_state_get_enum_value_number_c(const char *str)
{
  return unify_humidity_control_current_state_get_enum_value_number(std::string(str));
}
char *unify_thermostat_operating_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", unify_thermostat_operating_state_get_enum_value_name(value).c_str());
  return result;
}

uint32_t unify_thermostat_operating_state_get_enum_value_number_c(const char *str)
{
  return unify_thermostat_operating_state_get_enum_value_number(std::string(str));
}
char *unify_thermostat_thermostat_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", unify_thermostat_thermostat_mode_get_enum_value_name(value).c_str());
  return result;
}

uint32_t unify_thermostat_thermostat_mode_get_enum_value_number_c(const char *str)
{
  return unify_thermostat_thermostat_mode_get_enum_value_number(std::string(str));
}
char *user_modifier_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", user_modifier_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t user_modifier_type_get_enum_value_number_c(const char *str)
{
  return user_modifier_type_get_enum_value_number(std::string(str));
}
char *user_name_encoding_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", user_name_encoding_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t user_name_encoding_type_get_enum_value_number_c(const char *str)
{
  return user_name_encoding_type_get_enum_value_number(std::string(str));
}
char *user_type_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", user_type_enum_get_enum_value_name(value).c_str());
  return result;
}

uint32_t user_type_enum_get_enum_value_number_c(const char *str)
{
  return user_type_enum_get_enum_value_number(std::string(str));
}
char *window_covering_window_covering_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", window_covering_window_covering_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t window_covering_window_covering_type_get_enum_value_number_c(const char *str)
{
  return window_covering_window_covering_type_get_enum_value_number(std::string(str));
}
char *z_wave_fan_mode_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", z_wave_fan_mode_enum_get_enum_value_name(value).c_str());
  return result;
}

uint32_t z_wave_fan_mode_enum_get_enum_value_number_c(const char *str)
{
  return z_wave_fan_mode_enum_get_enum_value_number(std::string(str));
}
char *z_wave_fan_state_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", z_wave_fan_state_enum_get_enum_value_name(value).c_str());
  return result;
}

uint32_t z_wave_fan_state_enum_get_enum_value_number_c(const char *str)
{
  return z_wave_fan_state_enum_get_enum_value_number(std::string(str));
}
char *zone_enroll_response_enroll_response_code_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", zone_enroll_response_enroll_response_code_get_enum_value_name(value).c_str());
  return result;
}

uint32_t zone_enroll_response_enroll_response_code_get_enum_value_number_c(const char *str)
{
  return zone_enroll_response_enroll_response_code_get_enum_value_number(std::string(str));
}
char *attribute_reporting_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", attribute_reporting_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t attribute_reporting_status_get_enum_value_number_c(const char *str)
{
  return attribute_reporting_status_get_enum_value_number(std::string(str));
}
char *zcl_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", zcl_status_get_enum_value_name(value).c_str());
  return result;
}

uint32_t zcl_status_get_enum_value_number_c(const char *str)
{
  return zcl_status_get_enum_value_number(std::string(str));
}
char *zcl_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size)
{
  snprintf(result, max_result_size, "%s", zcl_type_get_enum_value_name(value).c_str());
  return result;
}

uint32_t zcl_type_get_enum_value_number_c(const char *str)
{
  return zcl_type_get_enum_value_number(std::string(str));
}

const char * unid_from_mqtt_topic_c(const char *topic, char *result, size_t max_result_size) {
  auto res = unify::unid_from_mqtt_topic(std::string(topic));
  if (res == std::nullopt) {
    return NULL;
  }
  snprintf(result, max_result_size, "%s", res.value().c_str());
    return result;
}
}