/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @file zap-types.h
 * @defgroup zap ZAP (ZigBee Automation Platform)
 * @ingroup unify_components
 * @brief Types used by autogenerated code using ZAP
 *
 * @{
 */

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

#include <stdint.h>
#include <stdbool.h>

#ifndef __ZAP_GEN_TYPE__
#define __ZAP_GEN_TYPE__

// FIXME Type-workarounds where ZAP fails to properly create our required types.
// FIXME: change key128 to typedef struct key128 {char x[16];} key128;
typedef char* key128;
typedef uint64_t EUI64;
typedef uint32_t UTC;
typedef uint16_t DrlkPINUserID;
typedef uint16_t DrlkRFIDUserID;
typedef uint16_t DrlkTotalUserID;
typedef uint8_t DrlkWeekDayScheduleID;
typedef uint8_t DrlkYearDayScheduleID;
typedef uint8_t DrlkHolidayScheduleID;
typedef uint8_t leveloptions; // map8
typedef uint8_t cccoloroptions; // map8
typedef uint8_t cccolorloopdirection; // map8
typedef uint16_t CCMinMiredsField;
typedef uint16_t CCMaxMiredsField;
typedef uint16_t TLRangeBeginEnd;
typedef uint16_t attribId;
typedef uint16_t SGroupId;
typedef const char* SSceneName;
typedef uint16_t clusterId;
typedef uint16_t OTAImageType;

// ZCL attribute types
enum {
  ZCL_NODATA_ATTRIBUTE_TYPE = 0x00, // No data
  ZCL_DATA8_ATTRIBUTE_TYPE = 0x08, // 8-bit data
  ZCL_DATA16_ATTRIBUTE_TYPE = 0x09, // 16-bit data
  ZCL_DATA24_ATTRIBUTE_TYPE = 0x0A, // 24-bit data
  ZCL_DATA32_ATTRIBUTE_TYPE = 0x0B, // 32-bit data
  ZCL_DATA40_ATTRIBUTE_TYPE = 0x0C, // 40-bit data
  ZCL_DATA48_ATTRIBUTE_TYPE = 0x0D, // 48-bit data
  ZCL_DATA56_ATTRIBUTE_TYPE = 0x0E, // 56-bit data
  ZCL_DATA64_ATTRIBUTE_TYPE = 0x0F, // 64-bit data
  ZCL_BOOL_ATTRIBUTE_TYPE = 0x10, // Boolean
  ZCL_MAP8_ATTRIBUTE_TYPE = 0x18, // 8-bit bitmap
  ZCL_MAP16_ATTRIBUTE_TYPE = 0x19, // 16-bit bitmap
  ZCL_MAP24_ATTRIBUTE_TYPE = 0x1A, // 24-bit bitmap
  ZCL_MAP32_ATTRIBUTE_TYPE = 0x1B, // 32-bit bitmap
  ZCL_MAP40_ATTRIBUTE_TYPE = 0x1C, // 40-bit bitmap
  ZCL_MAP48_ATTRIBUTE_TYPE = 0x1D, // 48-bit bitmap
  ZCL_MAP56_ATTRIBUTE_TYPE = 0x1E, // 56-bit bitmap
  ZCL_MAP64_ATTRIBUTE_TYPE = 0x1F, // 64-bit bitmap
  ZCL_UINT8_ATTRIBUTE_TYPE = 0x20, // Unsigned  8-bit integer
  ZCL_UINT16_ATTRIBUTE_TYPE = 0x21, // Unsigned 16-bit integer
  ZCL_UINT24_ATTRIBUTE_TYPE = 0x22, // Unsigned 24-bit integer
  ZCL_UINT32_ATTRIBUTE_TYPE = 0x23, // Unsigned 32-bit integer
  ZCL_UINT40_ATTRIBUTE_TYPE = 0x24, // Unsigned 40-bit integer
  ZCL_UINT48_ATTRIBUTE_TYPE = 0x25, // Unsigned 48-bit integer
  ZCL_UINT56_ATTRIBUTE_TYPE = 0x26, // Unsigned 56-bit integer
  ZCL_UINT64_ATTRIBUTE_TYPE = 0x27, // Unsigned 64-bit integer
  ZCL_INT8_ATTRIBUTE_TYPE = 0x28, // Signed 8-bit integer
  ZCL_INT16_ATTRIBUTE_TYPE = 0x29, // Signed 16-bit integer
  ZCL_INT24_ATTRIBUTE_TYPE = 0x2A, // Signed 24-bit integer
  ZCL_INT32_ATTRIBUTE_TYPE = 0x2B, // Signed 32-bit integer
  ZCL_INT40_ATTRIBUTE_TYPE = 0x2C, // Signed 40-bit integer
  ZCL_INT48_ATTRIBUTE_TYPE = 0x2D, // Signed 48-bit integer
  ZCL_INT56_ATTRIBUTE_TYPE = 0x2E, // Signed 56-bit integer
  ZCL_INT64_ATTRIBUTE_TYPE = 0x2F, // Signed 64-bit integer
  ZCL_ENUM8_ATTRIBUTE_TYPE = 0x30, // 8-bit enumeration
  ZCL_ENUM16_ATTRIBUTE_TYPE = 0x31, // 16-bit enumeration
  ZCL_SEMI_ATTRIBUTE_TYPE = 0x38, // Semi-precision
  ZCL_SINGLE_ATTRIBUTE_TYPE = 0x39, // Single precision
  ZCL_DOUBLE_ATTRIBUTE_TYPE = 0x3A, // Double precision
  ZCL_OCTSTR_ATTRIBUTE_TYPE = 0x41, // Octet string
  ZCL_STRING_ATTRIBUTE_TYPE = 0x42, // Character string
  ZCL_OCTSTR16_ATTRIBUTE_TYPE = 0x43, // Long octet string
  ZCL_STRING16_ATTRIBUTE_TYPE = 0x44, // Long character string
  ZCL_ARRAY_ATTRIBUTE_TYPE = 0x48, // Array
  ZCL_STRUCT_ATTRIBUTE_TYPE = 0x49, // Structure
  ZCL_SET_ATTRIBUTE_TYPE = 0x50, // Set
  ZCL_BAG_ATTRIBUTE_TYPE = 0x51, // Bag
  ZCL_TO_D_ATTRIBUTE_TYPE = 0xE0, // Time of day
  ZCL_DATE_ATTRIBUTE_TYPE = 0xE1, // Date
  ZCL_UTC_ATTRIBUTE_TYPE = 0xE2, // UTCTime
  ZCL_CLUSTER_ID_ATTRIBUTE_TYPE = 0xE8, // Cluster ID
  ZCL_ATTRIB_ID_ATTRIBUTE_TYPE = 0xE9, // Attribute ID
  ZCL_BAC_OID_ATTRIBUTE_TYPE = 0xEA, // BACnet OID
  ZCL_EUI64_ATTRIBUTE_TYPE = 0xF0, // IEEE address
  ZCL_KEY128_ATTRIBUTE_TYPE = 0xF1, // 128-bit security key
  ZCL_UNK_ATTRIBUTE_TYPE = 0xFF, // Unknown
};


// ZCL attribute sizes
#define ZAP_GENERATED_ATTRIBUTE_SIZES { \
  ZCL_DATA8_ATTRIBUTE_TYPE, 1, \
  ZCL_DATA16_ATTRIBUTE_TYPE, 2, \
  ZCL_DATA24_ATTRIBUTE_TYPE, 3, \
  ZCL_DATA32_ATTRIBUTE_TYPE, 4, \
  ZCL_DATA40_ATTRIBUTE_TYPE, 5, \
  ZCL_DATA48_ATTRIBUTE_TYPE, 6, \
  ZCL_DATA56_ATTRIBUTE_TYPE, 7, \
  ZCL_DATA64_ATTRIBUTE_TYPE, 8, \
  ZCL_MAP8_ATTRIBUTE_TYPE, 1, \
  ZCL_MAP16_ATTRIBUTE_TYPE, 2, \
  ZCL_MAP24_ATTRIBUTE_TYPE, 3, \
  ZCL_MAP32_ATTRIBUTE_TYPE, 4, \
  ZCL_MAP40_ATTRIBUTE_TYPE, 5, \
  ZCL_MAP48_ATTRIBUTE_TYPE, 6, \
  ZCL_MAP56_ATTRIBUTE_TYPE, 7, \
  ZCL_MAP64_ATTRIBUTE_TYPE, 8, \
  ZCL_UINT8_ATTRIBUTE_TYPE, 1, \
  ZCL_UINT16_ATTRIBUTE_TYPE, 2, \
  ZCL_UINT24_ATTRIBUTE_TYPE, 3, \
  ZCL_UINT32_ATTRIBUTE_TYPE, 4, \
  ZCL_UINT40_ATTRIBUTE_TYPE, 5, \
  ZCL_UINT48_ATTRIBUTE_TYPE, 6, \
  ZCL_UINT56_ATTRIBUTE_TYPE, 7, \
  ZCL_UINT64_ATTRIBUTE_TYPE, 8, \
  ZCL_INT8_ATTRIBUTE_TYPE, 1, \
  ZCL_INT16_ATTRIBUTE_TYPE, 2, \
  ZCL_INT24_ATTRIBUTE_TYPE, 3, \
  ZCL_INT32_ATTRIBUTE_TYPE, 4, \
  ZCL_INT40_ATTRIBUTE_TYPE, 5, \
  ZCL_INT48_ATTRIBUTE_TYPE, 6, \
  ZCL_INT56_ATTRIBUTE_TYPE, 7, \
  ZCL_INT64_ATTRIBUTE_TYPE, 8, \
  ZCL_ENUM8_ATTRIBUTE_TYPE, 1, \
  ZCL_ENUM16_ATTRIBUTE_TYPE, 2, \
  ZCL_OCTSTR16_ATTRIBUTE_TYPE, 2, \
  ZCL_STRING16_ATTRIBUTE_TYPE, 2, \
  ZCL_EUI64_ATTRIBUTE_TYPE, 8, \
  ZCL_KEY128_ATTRIBUTE_TYPE, 16, \
}

// ZCL enums

// Enum for AoXLocatorAntennaMode
typedef enum {
  ZCL_AO_X_LOCATOR_ANTENNA_MODE_ARRAY_4X4_URA = 0,
  ZCL_AO_X_LOCATOR_ANTENNA_MODE_ARRAY_3X3_URA = 1,
  ZCL_AO_X_LOCATOR_ANTENNA_MODE_ARRAY_1X4_ULA = 2,
  ZCL_AO_X_LOCATOR_ANTENNA_MODE_ARRAY_4X4_DP_URA = 3,
  ZCL_AO_X_LOCATOR_ANTENNA_MODE_ARRAY_COREHW_15X15_DP = 4,
  ZCL_AO_X_LOCATOR_ANTENNA_MODE_ARRAY_COREHW_12X12_DP = 5,
} AoXLocatorAntennaMode;

// Enum for AoXLocatorAoXMode
typedef enum {
  ZCL_AO_X_LOCATOR_AO_X_MODE_ONE_SHOT_BASIC = 3,
  ZCL_AO_X_LOCATOR_AO_X_MODE_ONE_SHOT_BASIC_LIGHTWEIGHT = 4,
  ZCL_AO_X_LOCATOR_AO_X_MODE_ONE_SHOT_FAST_RESPONSE = 5,
  ZCL_AO_X_LOCATOR_AO_X_MODE_ONE_SHOT_HIGH_ACCURACY = 6,
  ZCL_AO_X_LOCATOR_AO_X_MODE_ONE_SHOT_BASIC_AZIMUTH_ONLY = 7,
  ZCL_AO_X_LOCATOR_AO_X_MODE_ONE_SHOT_FAST_RESPONSE_AZIMUTH_ONLY = 8,
  ZCL_AO_X_LOCATOR_AO_X_MODE_ONE_SHOT_HIGH_ACCURACY_AZIMUTH_ONLY = 9,
  ZCL_AO_X_LOCATOR_AO_X_MODE_REAL_TIME_FAST_RESPONSE = 10,
  ZCL_AO_X_LOCATOR_AO_X_MODE_REAL_TIME_BASIC = 11,
  ZCL_AO_X_LOCATOR_AO_X_MODE_REAL_TIME_HIGH_ACCURACY = 12,
} AoXLocatorAoXMode;

// Enum for AoXLocatorCTEMode
typedef enum {
  ZCL_AO_X_LOCATOR_CTE_MODE_SILICON_LABS = 0,
  ZCL_AO_X_LOCATOR_CTE_MODE_CONNECTION = 1,
  ZCL_AO_X_LOCATOR_CTE_MODE_CONNECTIONLESS = 2,
} AoXLocatorCTEMode;

// Enum for AoXLocatorReportingMode
typedef enum {
  ZCL_AO_X_LOCATOR_REPORTING_MODE_IQ_REPORT = 0,
  ZCL_AO_X_LOCATOR_REPORTING_MODE_ANGLE_REPORT = 1,
} AoXLocatorReportingMode;

// Enum for ArmArmMode
typedef enum {
  ZCL_ARM_ARM_MODE_DISARM = 0,
  ZCL_ARM_ARM_MODE_ARM_DAY_HOME_ZONES_ONLY = 1,
  ZCL_ARM_ARM_MODE_ARM_NIGHT_SLEEP_ZONES_ONLY = 2,
  ZCL_ARM_ARM_MODE_ARM_ALL_ZONES = 3,
} ArmArmMode;

// Enum for ArmResponseArmNotification
typedef enum {
  ZCL_ARM_RESPONSE_ARM_NOTIFICATION_ALL_ZONES_DISARMED = 0,
  ZCL_ARM_RESPONSE_ARM_NOTIFICATION_ONLY_DAY_HOME_ZONES_ARMED = 1,
  ZCL_ARM_RESPONSE_ARM_NOTIFICATION_ONLY_NIGHT_SLEEP_ZONES_ARMED = 2,
  ZCL_ARM_RESPONSE_ARM_NOTIFICATION_ALL_ZONES_ARMED = 3,
  ZCL_ARM_RESPONSE_ARM_NOTIFICATION_INVALID_ARM_DISARM_CODE = 4,
  ZCL_ARM_RESPONSE_ARM_NOTIFICATION_NOT_READY_TO_ARM = 5,
  ZCL_ARM_RESPONSE_ARM_NOTIFICATION_ALREADY_DISARMED = 6,
} ArmResponseArmNotification;

// Enum for BarrierControlMovingState
typedef enum {
  ZCL_BARRIER_CONTROL_MOVING_STATE_STOPPED = 0,
  ZCL_BARRIER_CONTROL_MOVING_STATE_CLOSING = 1,
  ZCL_BARRIER_CONTROL_MOVING_STATE_OPENING = 2,
} BarrierControlMovingState;

// Enum for BasicGenericDevice-Class
typedef enum {
  ZCL_BASIC_GENERIC_DEVICE_CLASS_LIGHTING = 0,
} BasicGenericDeviceClass;

// Enum for BasicGenericDevice-Type
typedef enum {
  ZCL_BASIC_GENERIC_DEVICE_TYPE_INCANDESCENT = 0,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_SPOTLIGHT_HALOGEN = 1,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_HALOGEN_BULB = 2,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_CFL = 3,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_LINEAR_FLUORESCENT = 4,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_LED_BULB = 5,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_SPOTLIGHT_LED = 6,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_LED_STRIP = 7,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_LED_TUBE = 8,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_GENERIC_INDOOR_LUMINAIRE_OR_LIGHT_FIXTURE = 9,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_GENERIC_OUTDOOR_LUMINAIRE_OR_LIGHT_FIXTURE = 10,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_PENDANT_LUMINAIRE_OR_LIGHT_FIXTURE = 11,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_FLOOR_STANDING_LUMINAIRE_OR_LIGHT_FIXTURE = 12,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_GENERIC_CONTROLLER = 224,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_WALL_SWITCH = 225,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_PORTABLE_REMOTE_CONTROLLER = 226,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_MOTION_SENSOR_OR_LIGHT_SENSOR = 227,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_GENERIC_ACTUATOR = 240,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_WALL_SOCKET = 241,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_GATEWAY_OR_BRIDGE = 242,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_PLUG_IN_UNIT = 243,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_RETROFIT_ACTUATOR = 244,
  ZCL_BASIC_GENERIC_DEVICE_TYPE_UNSPECIFIED = 255,
} BasicGenericDeviceType;

// Enum for BasicPhysicalEnvironment
typedef enum {
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_UNSPECIFIED_ENVIRONMENT = 0,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_DEPRECATED = 1,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BAR = 2,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_COURTYARD = 3,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BATHROOM = 4,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BEDROOM = 5,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BILLIARD_ROOM = 6,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_UTILITY_ROOM = 7,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_CELLAR = 8,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_STORAGE_CLOSET = 9,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_THEATER = 10,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_OFFICE = 11,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_DECK = 12,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_DEN = 13,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_DINING_ROOM = 14,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_ELECTRICAL_ROOM = 15,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_ELEVATOR = 16,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_ENTRY = 17,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_FAMILY_ROOM = 18,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_MAIN_FLOOR = 19,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_UPSTAIRS = 20,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_DOWNSTAIRS = 21,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BASEMENT_LOWER_LEVEL = 22,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_GALLERY = 23,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_GAME_ROOM = 24,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_GARAGE = 25,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_GYM = 26,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_HALLWAY = 27,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_HOUSE = 28,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_KITCHEN = 29,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_LAUNDRY_ROOM = 30,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_LIBRARY = 31,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_MASTER_BEDROOM = 32,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_MUD_ROOM = 33,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_NURSERY = 34,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_PANTRY = 35,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SECONDARY_OFFICE = 36,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_OUTSIDE = 37,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_POOL = 38,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_PORCH = 39,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SEWING_ROOM = 40,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SITTING_ROOM = 41,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_STAIRWAY = 42,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_YARD = 43,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_ATTIC = 44,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_HOT_TUB = 45,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_LIVING_ROOM = 46,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SAUNA = 47,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SHOP_OR_WORKSHOP = 48,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_GUEST_BEDROOM = 49,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_GUEST_BATH = 50,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_POWDER_ROOM = 51,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BACK_YARD = 52,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_FRONT_YARD = 53,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_PATIO = 54,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_DRIVEWAY = 55,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SUN_ROOM = 56,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SECONDARY_LIVING_ROOM = 57,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SPA = 58,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_WHIRLPOOL = 59,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SHED = 60,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_EQUIPMENT_STORAGE = 61,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_HOBBY_OR_CRAFT_ROOM = 62,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_FOUNTAIN = 63,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_POND = 64,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_RECEPTION_ROOM = 65,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BREAKFAST_ROOM = 66,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_NOOK = 67,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_GARDEN = 68,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BALCONY = 69,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_PANIC_ROOM = 70,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_TERRACE = 71,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_ROOF = 72,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_TOILET = 73,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_TOILET_MAIN = 74,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_OUTSIDE_TOILET = 75,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_SHOWER_ROOM = 76,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_STUDY = 77,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_FRONT_GARDEN = 78,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BACK_GARDEN = 79,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_KETTLE = 80,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_TELEVISION = 81,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_STOVE = 82,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_MICROWAVE = 83,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_TOASTER = 84,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_VACUUM = 85,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_APPLIANCE = 86,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_FRONT_DOOR = 87,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_BACK_DOOR = 88,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_FRIDGE_DOOR = 89,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_MEDICATION_CABINET_DOOR = 96,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_WARDROBE_DOOR = 97,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_FRONT_CUPBOARD_DOOR = 98,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_OTHER_DOOR = 99,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_WAITING_ROOM = 100,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_TRIAGE_ROOM = 101,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_DOCTORS_OFFICE = 102,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_PATIENTS_PRIVATE_ROOM = 103,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_CONSULTATION_ROOM = 104,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_NURSE_STATION = 105,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_WARD = 106,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_CORRIDOR = 107,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_OPERATING_THEATRE = 108,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_DENTAL_SURGERY_ROOM = 109,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_MEDICAL_IMAGING_ROOM = 110,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_DECONTAMINATION_ROOM = 111,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_ATRIUM = 112,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_MIRROR = 113,
  ZCL_BASIC_PHYSICAL_ENVIRONMENT_UNKNOWN_ENVIRONMENT = 255,
} BasicPhysicalEnvironment;

// Enum for BasicPowerSource
typedef enum {
  ZCL_BASIC_POWER_SOURCE_UNKNOWN = 0,
  ZCL_BASIC_POWER_SOURCE_SINGLE_PHASE_MAINS = 1,
  ZCL_BASIC_POWER_SOURCE_THREE_PHASE_MAINS = 2,
  ZCL_BASIC_POWER_SOURCE_BATTERY = 3,
  ZCL_BASIC_POWER_SOURCE_DC_SOURCE = 4,
  ZCL_BASIC_POWER_SOURCE_EMERGENCY_MAINS_CONSTANTLY_POWERED = 5,
  ZCL_BASIC_POWER_SOURCE_EMERGENCY_MAINS_AND_TRANSFER_SWITCH = 6,
  ZCL_BASIC_POWER_SOURCE_UNKNOWN_WITH_BATTERY_BACKUP = 128,
  ZCL_BASIC_POWER_SOURCE_SINGLE_PHASE_MAINS_WITH_BATTERY_BACKUP = 129,
  ZCL_BASIC_POWER_SOURCE_THREE_PHASE_MAINS_WITH_BATTERY_BACKUP = 130,
  ZCL_BASIC_POWER_SOURCE_BATTERY_WITH_BATTERY_BACKUP = 131,
  ZCL_BASIC_POWER_SOURCE_DC_SOURCE_WITH_BATTERY_BACKUP = 132,
  ZCL_BASIC_POWER_SOURCE_EMERGENCY_MAINS_CONSTANTLY_POWERED_WITH_BATTERY_BACKUP = 133,
  ZCL_BASIC_POWER_SOURCE_EMERGENCY_MAINS_AND_TRANSFER_SWITCH_WITH_BATTERY_BACKUP = 134,
} BasicPowerSource;

// Enum for BatterySize
typedef enum {
  ZCL_BATTERY_SIZE_NO_BATTERY = 0,
  ZCL_BATTERY_SIZE_BUILT_IN = 1,
  ZCL_BATTERY_SIZE_OTHER = 2,
  ZCL_BATTERY_SIZE_AA = 3,
  ZCL_BATTERY_SIZE_AAA = 4,
  ZCL_BATTERY_SIZE_C = 5,
  ZCL_BATTERY_SIZE_D = 6,
  ZCL_BATTERY_SIZE_CR2 = 7,
  ZCL_BATTERY_SIZE_CR123_A = 8,
  ZCL_BATTERY_SIZE_UNKNOWN = 255,
} BatterySize;

// Enum for BypassResponseZoneIDBypassResult
typedef enum {
  ZCL_BYPASS_RESPONSE_ZONE_ID_BYPASS_RESULT_ZONE_BYPASSED = 0,
  ZCL_BYPASS_RESPONSE_ZONE_ID_BYPASS_RESULT_ZONE_NOT_BYPASSED = 1,
  ZCL_BYPASS_RESPONSE_ZONE_ID_BYPASS_RESULT_NOT_ALLOWED = 2,
  ZCL_BYPASS_RESPONSE_ZONE_ID_BYPASS_RESULT_INVALID_ZONE_ID = 3,
  ZCL_BYPASS_RESPONSE_ZONE_ID_BYPASS_RESULT_UNKNOWN_ZONE_ID = 4,
  ZCL_BYPASS_RESPONSE_ZONE_ID_BYPASS_RESULT_INVALID_ARM_DISARM_CODE = 5,
} BypassResponseZoneIDBypassResult;

// Enum for CCColorLoopDirection
typedef enum {
  ZCL_CC_COLOR_LOOP_DIRECTION_DECREMENT_ENHANCED_CURRENT_HUE = 0,
  ZCL_CC_COLOR_LOOP_DIRECTION_INCREMENT_ENHANCED_CURRENT_HUE = 1,
} CCColorLoopDirection;

// Enum for CCDirection
typedef enum {
  ZCL_CC_DIRECTION_SHORTEST_DISTANCE = 0,
  ZCL_CC_DIRECTION_LONGEST_DISTANCE = 1,
  ZCL_CC_DIRECTION_UP = 2,
  ZCL_CC_DIRECTION_DOWN = 3,
} CCDirection;

// Enum for CCMoveMode
typedef enum {
  ZCL_CC_MOVE_MODE_STOP = 0,
  ZCL_CC_MOVE_MODE_UP = 1,
  ZCL_CC_MOVE_MODE_DOWN = 3,
} CCMoveMode;

// Enum for CCStepMode
typedef enum {
  ZCL_CC_STEP_MODE_UP = 1,
  ZCL_CC_STEP_MODE_DOWN = 3,
} CCStepMode;

// Enum for ColorControlColorLoopActive
typedef enum {
  ZCL_COLOR_CONTROL_COLOR_LOOP_ACTIVE_COLOR_LOOP_INACTIVE = 0,
  ZCL_COLOR_CONTROL_COLOR_LOOP_ACTIVE_COLOR_LOOP_ACTIVE = 1,
} ColorControlColorLoopActive;

// Enum for ColorControlColorMode
typedef enum {
  ZCL_COLOR_CONTROL_COLOR_MODE_CURRENT_HUE_AND_CURRENT_SATURATION = 0,
  ZCL_COLOR_CONTROL_COLOR_MODE_CURRENT_X_AND_CURRENT_Y = 1,
  ZCL_COLOR_CONTROL_COLOR_MODE_COLOR_TEMPERATURE_MIREDS = 2,
} ColorControlColorMode;

// Enum for ColorControlDriftCompensation
typedef enum {
  ZCL_COLOR_CONTROL_DRIFT_COMPENSATION_NONE = 0,
  ZCL_COLOR_CONTROL_DRIFT_COMPENSATION_OTHER_OR_UNKNOWN = 1,
  ZCL_COLOR_CONTROL_DRIFT_COMPENSATION_TEMPERATURE_MONITORING = 2,
  ZCL_COLOR_CONTROL_DRIFT_COMPENSATION_OPTICAL_LUMINANCE_MONITORING_AND_FEEDBACK = 3,
  ZCL_COLOR_CONTROL_DRIFT_COMPENSATION_OPTICAL_COLOR_MONITORING_AND_FEEDBACK = 4,
} ColorControlDriftCompensation;

// Enum for ColorControlEnhancedColorMode
typedef enum {
  ZCL_COLOR_CONTROL_ENHANCED_COLOR_MODE_CURRENT_HUE_AND_CURRENT_SATURATION = 0,
  ZCL_COLOR_CONTROL_ENHANCED_COLOR_MODE_CURRENT_X_AND_CURRENT_Y = 1,
  ZCL_COLOR_CONTROL_ENHANCED_COLOR_MODE_COLOR_TEMPERATURE_MIREDS = 2,
  ZCL_COLOR_CONTROL_ENHANCED_COLOR_MODE_ENHANCED_CURRENT_HUE_AND_CURRENT_SATURATION = 3,
} ColorControlEnhancedColorMode;

// Enum for ColorLoopSetAction
typedef enum {
  ZCL_COLOR_LOOP_SET_ACTION_DEACTIVATE_COLOR_LOOP = 0,
  ZCL_COLOR_LOOP_SET_ACTION_ACTIVATE_COLOR_LOOP_FROM_COLOR_LOOP_START_ENHANCED_HUE = 1,
  ZCL_COLOR_LOOP_SET_ACTION_ACTIVATE_COLOR_LOOP_FROM_ENHANCED_CURRENT_HUE = 2,
} ColorLoopSetAction;

// Enum for CommissioningNetworkKeyType
typedef enum {
  ZCL_COMMISSIONING_NETWORK_KEY_TYPE_STANDARD_KEY = 1,
} CommissioningNetworkKeyType;

// Enum for CommissioningProtocolVersion
typedef enum {
  ZCL_COMMISSIONING_PROTOCOL_VERSION_ZIGBEE2006_OR_LATER = 2,
} CommissioningProtocolVersion;

// Enum for CommissioningStackProfile
typedef enum {
  ZCL_COMMISSIONING_STACK_PROFILE_ZIGBEE_STACK_PROFILE = 1,
  ZCL_COMMISSIONING_STACK_PROFILE_ZIGBEE_PRO_STACK_PROFILE = 2,
} CommissioningStackProfile;

// Enum for CommissioningStartupControl
typedef enum {
  ZCL_COMMISSIONING_STARTUP_CONTROL_ON_A_NETWORK = 0,
  ZCL_COMMISSIONING_STARTUP_CONTROL_FORM_NETWORK = 1,
  ZCL_COMMISSIONING_STARTUP_CONTROL_REJOIN_NETWORK = 2,
  ZCL_COMMISSIONING_STARTUP_CONTROL_JOIN_USING_MAC_ASSOCIATION = 3,
} CommissioningStartupControl;

// Enum for CredentialRuleEnum
typedef enum {
  ZCL_CREDENTIAL_RULE_ENUM_SINGLE = 0,
  ZCL_CREDENTIAL_RULE_ENUM_DUAL = 1,
  ZCL_CREDENTIAL_RULE_ENUM_TRI = 2,
} CredentialRuleEnum;

// Enum for CredentialTypeEnum
typedef enum {
  ZCL_CREDENTIAL_TYPE_ENUM_PROGRAMMING_PIN = 0,
  ZCL_CREDENTIAL_TYPE_ENUM_PIN = 1,
  ZCL_CREDENTIAL_TYPE_ENUM_RFID = 2,
  ZCL_CREDENTIAL_TYPE_ENUM_FINGERPRINT = 3,
  ZCL_CREDENTIAL_TYPE_ENUM_FINGER_VEIN = 4,
  ZCL_CREDENTIAL_TYPE_ENUM_FACE = 5,
} CredentialTypeEnum;

// Enum for DataOperationTypeEnum
typedef enum {
  ZCL_DATA_OPERATION_TYPE_ENUM_ADD = 0,
  ZCL_DATA_OPERATION_TYPE_ENUM_CLEAR = 1,
  ZCL_DATA_OPERATION_TYPE_ENUM_MODIFY = 2,
} DataOperationTypeEnum;

// Enum for DehumidificationControlDehumidificationLockout
typedef enum {
  ZCL_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT_DEHUMIDIFICATION_NOT_ALLOWED_ = 0,
  ZCL_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT_DEHUMIDIFICATION_ALLOWED_ = 1,
} DehumidificationControlDehumidificationLockout;

// Enum for DehumidificationControlRelativeHumidityDisplay
typedef enum {
  ZCL_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY_NOT_DISPLAYED = 0,
  ZCL_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY_DISPLAYED = 1,
} DehumidificationControlRelativeHumidityDisplay;

// Enum for DehumidificationControlRelativeHumidityMode
typedef enum {
  ZCL_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE_MEASURED_LOCALLY = 0,
  ZCL_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE_UPDATED_OVER_THE_NETWORK = 1,
} DehumidificationControlRelativeHumidityMode;

// Enum for DevTypeId
typedef enum {
  ZCL_DEV_TYPE_ID_DOOR_LOCK = 10,
  ZCL_DEV_TYPE_ID_DOOR_LOCK_CONTROLLER = 11,
  ZCL_DEV_TYPE_ID_FAN = 43,
  ZCL_DEV_TYPE_ID_AIR_PURIFIER = 45,
  ZCL_DEV_TYPE_ID_ROOM_AIR_CONDITIONER = 114,
  ZCL_DEV_TYPE_ID_COOKTOP = 120,
  ZCL_DEV_TYPE_ID_EXTRACTOR_HOOD = 122,
  ZCL_DEV_TYPE_ID_ON_OFF_LIGHT = 256,
  ZCL_DEV_TYPE_ID_DIMMABLE_LIGHT = 257,
  ZCL_DEV_TYPE_ID_ON_OFF_LIGHT_SWITCH = 259,
  ZCL_DEV_TYPE_ID_DIMMER_SWITCH = 260,
  ZCL_DEV_TYPE_ID_COLOR_DIMMER_SWITCH = 261,
  ZCL_DEV_TYPE_ID_LIGHT_SENSOR = 262,
  ZCL_DEV_TYPE_ID_OCCUPANCY_SENSOR = 263,
  ZCL_DEV_TYPE_ID_ON_OFF_PLUGIN_UNIT = 266,
  ZCL_DEV_TYPE_ID_DIMMABLE_PLUG_IN_UNIT = 267,
  ZCL_DEV_TYPE_ID_COLOR_TEMPERATURE_LIGHT = 268,
  ZCL_DEV_TYPE_ID_EXTENDED_COLOR_LIGHT = 269,
  ZCL_DEV_TYPE_ID_WINDOW_COVERING = 514,
  ZCL_DEV_TYPE_ID_WINDOW_COVERING_CONTROLLER = 515,
  ZCL_DEV_TYPE_ID_HEATING_COOLING_UNIT = 768,
  ZCL_DEV_TYPE_ID_THERMOSTAT = 769,
  ZCL_DEV_TYPE_ID_TEMPERATURE_SENSOR = 770,
  ZCL_DEV_TYPE_ID_PUMP = 771,
  ZCL_DEV_TYPE_ID_PRESSURE_SENSOR = 773,
  ZCL_DEV_TYPE_ID_FLOW_SENSOR = 774,
  ZCL_DEV_TYPE_ID_HUMIDITY_SENSOR = 775,
  ZCL_DEV_TYPE_ID_CONTROL_BRIDGE = 2112,
  ZCL_DEV_TYPE_ID_ON_OFF_SENSOR = 2128,
} DevTypeId;

// Enum for DoorLockDoorState
typedef enum {
  ZCL_DOOR_LOCK_DOOR_STATE_OPEN = 0,
  ZCL_DOOR_LOCK_DOOR_STATE_CLOSED = 1,
  ZCL_DOOR_LOCK_DOOR_STATE_ERROR_JAMMED = 2,
  ZCL_DOOR_LOCK_DOOR_STATE_ERROR_FORCED_OPEN = 3,
  ZCL_DOOR_LOCK_DOOR_STATE_ERROR_UNSPECIFIED = 4,
  ZCL_DOOR_LOCK_DOOR_STATE_DOOR_AJAR = 5,
  ZCL_DOOR_LOCK_DOOR_STATE_UNDEFINED = 255,
} DoorLockDoorState;

// Enum for DoorLockLEDSettings
typedef enum {
  ZCL_DOOR_LOCK_LED_SETTINGS_NEVER_USE_LED = 0,
  ZCL_DOOR_LOCK_LED_SETTINGS_USE_LED_EXCEPT_FOR_ACCESS_ALLOWED = 1,
  ZCL_DOOR_LOCK_LED_SETTINGS_USE_LED_FOR_ALL_EVENTS = 2,
} DoorLockLEDSettings;

// Enum for DoorLockLockState
typedef enum {
  ZCL_DOOR_LOCK_LOCK_STATE_NOT_FULLY_LOCKED = 0,
  ZCL_DOOR_LOCK_LOCK_STATE_LOCKED = 1,
  ZCL_DOOR_LOCK_LOCK_STATE_UNLOCKED = 2,
  ZCL_DOOR_LOCK_LOCK_STATE_UNLATCHED = 3,
  ZCL_DOOR_LOCK_LOCK_STATE_UNDEFINED = 255,
} DoorLockLockState;

// Enum for DoorLockLockType
typedef enum {
  ZCL_DOOR_LOCK_LOCK_TYPE_DEAD_BOLT = 0,
  ZCL_DOOR_LOCK_LOCK_TYPE_MAGNETIC = 1,
  ZCL_DOOR_LOCK_LOCK_TYPE_OTHER = 2,
  ZCL_DOOR_LOCK_LOCK_TYPE_MORTISE = 3,
  ZCL_DOOR_LOCK_LOCK_TYPE_RIM = 4,
  ZCL_DOOR_LOCK_LOCK_TYPE_LATCH_BOLT = 5,
  ZCL_DOOR_LOCK_LOCK_TYPE_CYLINDRICAL_LOCK = 6,
  ZCL_DOOR_LOCK_LOCK_TYPE_TUBULAR_LOCK = 7,
  ZCL_DOOR_LOCK_LOCK_TYPE_INTERCONNECTED_LOCK = 8,
  ZCL_DOOR_LOCK_LOCK_TYPE_DEAD_LATCH = 9,
  ZCL_DOOR_LOCK_LOCK_TYPE_DOOR_FURNITURE = 10,
  ZCL_DOOR_LOCK_LOCK_TYPE_EUROCYLINDER = 11,
} DoorLockLockType;

// Enum for DoorLockSecurityLevel
typedef enum {
  ZCL_DOOR_LOCK_SECURITY_LEVEL_NETWORK = 0,
  ZCL_DOOR_LOCK_SECURITY_LEVEL_APS = 1,
} DoorLockSecurityLevel;

// Enum for DoorLockSoundVolume
typedef enum {
  ZCL_DOOR_LOCK_SOUND_VOLUME_SILENT_MODE = 0,
  ZCL_DOOR_LOCK_SOUND_VOLUME_LOW_VOLUME = 1,
  ZCL_DOOR_LOCK_SOUND_VOLUME_HIGH_VOLUME = 2,
  ZCL_DOOR_LOCK_SOUND_VOLUME_MEDIUM_VOLUME = 3,
} DoorLockSoundVolume;

// Enum for DrlkOperEventSource
typedef enum {
  ZCL_DRLK_OPER_EVENT_SOURCE_KEYPAD = 0,
  ZCL_DRLK_OPER_EVENT_SOURCE_RF = 1,
  ZCL_DRLK_OPER_EVENT_SOURCE_MANUAL = 2,
  ZCL_DRLK_OPER_EVENT_SOURCE_RFID = 3,
  ZCL_DRLK_OPER_EVENT_SOURCE_INDETERMINATE = 255,
} DrlkOperEventSource;

// Enum for DrlkOperMode
typedef enum {
  ZCL_DRLK_OPER_MODE_NORMAL = 0,
  ZCL_DRLK_OPER_MODE_VACATION = 1,
  ZCL_DRLK_OPER_MODE_PRIVACY = 2,
  ZCL_DRLK_OPER_MODE_NO_RF_LOCK_OR_UNLOCK = 3,
  ZCL_DRLK_OPER_MODE_PASSAGE = 4,
} DrlkOperMode;

// Enum for DrlkPassFailStatus
typedef enum {
  ZCL_DRLK_PASS_FAIL_STATUS_PASS = 0,
  ZCL_DRLK_PASS_FAIL_STATUS_FAIL = 1,
} DrlkPassFailStatus;

// Enum for DrlkSetCodeStatus
typedef enum {
  ZCL_DRLK_SET_CODE_STATUS_SUCCESS = 0,
  ZCL_DRLK_SET_CODE_STATUS_GENERAL_FAILURE = 1,
  ZCL_DRLK_SET_CODE_STATUS_MEMORY_FULL = 2,
  ZCL_DRLK_SET_CODE_STATUS_DUPLICATE_CODE = 3,
} DrlkSetCodeStatus;

// Enum for DrlkSettableUserStatus
typedef enum {
  ZCL_DRLK_SETTABLE_USER_STATUS_OCCUPIED_ENABLED = 1,
  ZCL_DRLK_SETTABLE_USER_STATUS_OCCUPIED_DISABLED = 3,
} DrlkSettableUserStatus;

// Enum for DrlkUserStatus
typedef enum {
  ZCL_DRLK_USER_STATUS_AVAILABLE = 0,
  ZCL_DRLK_USER_STATUS_OCCUPIED_ENABLED = 1,
  ZCL_DRLK_USER_STATUS_OCCUPIED_DISABLED = 3,
  ZCL_DRLK_USER_STATUS_NOT_SUPPORTED = 255,
} DrlkUserStatus;

// Enum for DrlkUserType
typedef enum {
  ZCL_DRLK_USER_TYPE_UNRESTRICTED_USER = 0,
  ZCL_DRLK_USER_TYPE_YEAR_DAY_SCHEDULE_USER = 1,
  ZCL_DRLK_USER_TYPE_WEEK_DAY_SCHEDULE_USER = 2,
  ZCL_DRLK_USER_TYPE_MASTER_USER = 3,
  ZCL_DRLK_USER_TYPE_NON_ACCESS_USER = 4,
  ZCL_DRLK_USER_TYPE_FORCED_USER = 5,
  ZCL_DRLK_USER_TYPE_DISPOSABLE_USER = 6,
  ZCL_DRLK_USER_TYPE_EXPIRING_USER = 7,
  ZCL_DRLK_USER_TYPE_SCHEDULE_RESTRICTED_USER = 8,
  ZCL_DRLK_USER_TYPE_REMOTE_ONLY_USER = 9,
  ZCL_DRLK_USER_TYPE_NOT_SUPPORTED = 255,
} DrlkUserType;

// Enum for FanControlFanMode
typedef enum {
  ZCL_FAN_CONTROL_FAN_MODE_OFF = 0,
  ZCL_FAN_CONTROL_FAN_MODE_LOW = 1,
  ZCL_FAN_CONTROL_FAN_MODE_MEDIUM = 2,
  ZCL_FAN_CONTROL_FAN_MODE_HIGH = 3,
  ZCL_FAN_CONTROL_FAN_MODE_ON = 4,
  ZCL_FAN_CONTROL_FAN_MODE_AUTO = 5,
  ZCL_FAN_CONTROL_FAN_MODE_SMART = 6,
} FanControlFanMode;

// Enum for FanControlFanModeSequence
typedef enum {
  ZCL_FAN_CONTROL_FAN_MODE_SEQUENCE_LOW_MED_HIGH = 0,
  ZCL_FAN_CONTROL_FAN_MODE_SEQUENCE_LOW_HIGH = 1,
  ZCL_FAN_CONTROL_FAN_MODE_SEQUENCE_LOW_MED_HIGH_AUTO = 2,
  ZCL_FAN_CONTROL_FAN_MODE_SEQUENCE_LOW_HIGH_AUTO = 3,
  ZCL_FAN_CONTROL_FAN_MODE_SEQUENCE_ON_AUTO = 4,
} FanControlFanModeSequence;

// Enum for GetLogRecordResponseEventType
typedef enum {
  ZCL_GET_LOG_RECORD_RESPONSE_EVENT_TYPE_OPERATION = 0,
  ZCL_GET_LOG_RECORD_RESPONSE_EVENT_TYPE_PROGRAMMING = 1,
  ZCL_GET_LOG_RECORD_RESPONSE_EVENT_TYPE_ALARM = 2,
} GetLogRecordResponseEventType;

// Enum for GetMeasurementProfileResponseStatus
typedef enum {
  ZCL_GET_MEASUREMENT_PROFILE_RESPONSE_STATUS_SUCCESS = 0,
  ZCL_GET_MEASUREMENT_PROFILE_RESPONSE_STATUS_ATTRIBUTE_PROFILE_NOT_SUPPORTED = 1,
  ZCL_GET_MEASUREMENT_PROFILE_RESPONSE_STATUS_INVALID_START_TIME = 2,
  ZCL_GET_MEASUREMENT_PROFILE_RESPONSE_STATUS_MORE_INTERVALS_REQUESTED_THAN_CAN_BE_RETURNED = 3,
  ZCL_GET_MEASUREMENT_PROFILE_RESPONSE_STATUS_NO_INTERVALS_AVAILABLE_FOR_THE_REQUESTED_TIME = 4,
} GetMeasurementProfileResponseStatus;

// Enum for HVACSystemTypeConfigurationCoolingSystemStage
typedef enum {
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_COOLING_SYSTEM_STAGE_COOL_STAGE1 = 0,
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_COOLING_SYSTEM_STAGE_COOL_STAGE2 = 1,
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_COOLING_SYSTEM_STAGE_COOL_STAGE3 = 2,
} HVACSystemTypeConfigurationCoolingSystemStage;

// Enum for HVACSystemTypeConfigurationHeatingFuelSource
typedef enum {
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_FUEL_SOURCE_ELECTRIC_OR_B = 0,
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_FUEL_SOURCE_GAS_OR_O = 1,
} HVACSystemTypeConfigurationHeatingFuelSource;

// Enum for HVACSystemTypeConfigurationHeatingSystemStage
typedef enum {
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_STAGE_HEAT_STAGE1 = 0,
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_STAGE_HEAT_STAGE2 = 1,
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_STAGE_HEAT_STAGE3 = 2,
} HVACSystemTypeConfigurationHeatingSystemStage;

// Enum for HVACSystemTypeConfigurationHeatingSystemType
typedef enum {
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_TYPE_CONVENTIONAL = 0,
  ZCL_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_TYPE_HEAT_PUMP = 1,
} HVACSystemTypeConfigurationHeatingSystemType;

// Enum for IASZoneZoneState
typedef enum {
  ZCL_IAS_ZONE_ZONE_STATE_NOT_ENROLLED = 0,
  ZCL_IAS_ZONE_ZONE_STATE_ENROLLED = 1,
} IASZoneZoneState;

// Enum for IasZoneType
typedef enum {
  ZCL_IAS_ZONE_TYPE_STANDARD_CIE = 0,
  ZCL_IAS_ZONE_TYPE_MOTION_SENSOR = 13,
  ZCL_IAS_ZONE_TYPE_CONTACT_SWITCH = 21,
  ZCL_IAS_ZONE_TYPE_DOOR_OR_WINDOW_HANDLE = 22,
  ZCL_IAS_ZONE_TYPE_FIRE_SENSOR = 40,
  ZCL_IAS_ZONE_TYPE_WATER_SENSOR = 42,
  ZCL_IAS_ZONE_TYPE_CARBON_MONOXIDE_SENSOR = 43,
  ZCL_IAS_ZONE_TYPE_PERSONAL_EMERGENCY_DEVICE = 44,
  ZCL_IAS_ZONE_TYPE_VIBRATION_OR_MOVEMENT_SENSOR = 45,
  ZCL_IAS_ZONE_TYPE_REMOTE_CONTROL = 271,
  ZCL_IAS_ZONE_TYPE_KEY_FOB = 277,
  ZCL_IAS_ZONE_TYPE_KEYPAD = 541,
  ZCL_IAS_ZONE_TYPE_STANDARD_WARNING_DEVICE = 549,
  ZCL_IAS_ZONE_TYPE_GLASS_BREAK_SENSOR = 550,
  ZCL_IAS_ZONE_TYPE_SECURITY_REPEATER = 553,
  ZCL_IAS_ZONE_TYPE_INVALID = 65535,
} IasZoneType;

// Enum for IasacPanelStatus
typedef enum {
  ZCL_IASAC_PANEL_STATUS_PANEL_DISARMED_READY_TO_ARM = 0,
  ZCL_IASAC_PANEL_STATUS_ARMED_STAY = 1,
  ZCL_IASAC_PANEL_STATUS_ARMED_NIGHT = 2,
  ZCL_IASAC_PANEL_STATUS_ARMED_AWAY = 3,
  ZCL_IASAC_PANEL_STATUS_EXIT_DELAY = 4,
  ZCL_IASAC_PANEL_STATUS_ENTRY_DELAY = 5,
  ZCL_IASAC_PANEL_STATUS_NOT_READY_TO_ARM = 6,
  ZCL_IASAC_PANEL_STATUS_IN_ALARM = 7,
  ZCL_IASAC_PANEL_STATUS_ARMING_STAY = 8,
  ZCL_IASAC_PANEL_STATUS_ARMING_NIGHT = 9,
  ZCL_IASAC_PANEL_STATUS_ARMING_AWAY = 10,
} IasacPanelStatus;

// Enum for IasaceAlarmStatus
typedef enum {
  ZCL_IASACE_ALARM_STATUS_NO_ALARM = 0,
  ZCL_IASACE_ALARM_STATUS_BURGLER = 1,
  ZCL_IASACE_ALARM_STATUS_FIRE = 2,
  ZCL_IASACE_ALARM_STATUS_EMERGENCY = 3,
  ZCL_IASACE_ALARM_STATUS_POLICE_PANIC = 4,
  ZCL_IASACE_ALARM_STATUS_FIRE_PANIC = 5,
  ZCL_IASACE_ALARM_STATUS_EMERGENCY_PANIC = 6,
} IasaceAlarmStatus;

// Enum for IasaceAudibleNotification
typedef enum {
  ZCL_IASACE_AUDIBLE_NOTIFICATION_MUTE = 0,
  ZCL_IASACE_AUDIBLE_NOTIFICATION_DEFAULT_SOUND = 1,
} IasaceAudibleNotification;

// Enum for IaswdLevel
typedef enum {
  ZCL_IASWD_LEVEL_LOW_LEVEL = 0,
  ZCL_IASWD_LEVEL_MEDIUM_LEVEL = 1,
  ZCL_IASWD_LEVEL_HIGH_LEVEL = 2,
  ZCL_IASWD_LEVEL_VERY_HIGH_LEVEL = 3,
} IaswdLevel;

// Enum for IlluminanceLevelSensingLevelStatus
typedef enum {
  ZCL_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS_ILLUMINANCE_ON_TARGET = 0,
  ZCL_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS_ILLUMINANCE_BELOW_TARGET = 1,
  ZCL_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS_ILLUMINANCE_ABOVE_TARGET = 2,
} IlluminanceLevelSensingLevelStatus;

// Enum for IlluminanceLevelSensingLightSensorType
typedef enum {
  ZCL_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE_PHOTODIODE = 0,
  ZCL_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE_CMOS = 1,
  ZCL_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE_UNKNOWN = 255,
} IlluminanceLevelSensingLightSensorType;

// Enum for IlluminanceMeasurementLightSensorType
typedef enum {
  ZCL_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE_PHOTODIODE = 0,
  ZCL_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE_CMOS = 1,
  ZCL_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE_UNKNOWN = 255,
} IlluminanceMeasurementLightSensorType;

// Enum for ImageNotifyPayloadType
typedef enum {
  ZCL_IMAGE_NOTIFY_PAYLOAD_TYPE_QUERY_JITTER = 0,
  ZCL_IMAGE_NOTIFY_PAYLOAD_TYPE_QUERY_JITTER_AND_MANUFACTURER_CODE = 1,
  ZCL_IMAGE_NOTIFY_PAYLOAD_TYPE_QUERY_JITTER_MANUFACTURER_CODE_AND_IMAGE_TYPE = 2,
  ZCL_IMAGE_NOTIFY_PAYLOAD_TYPE_QUERY_JITTER_MANUFACTURER_CODE_IMAGE_TYPE_AND_NEW_FILE_VERSION = 3,
} ImageNotifyPayloadType;

// Enum for LoggingLevelEnum
typedef enum {
  ZCL_LOGGING_LEVEL_ENUM_DEBUG = 0,
  ZCL_LOGGING_LEVEL_ENUM_INFO = 1,
  ZCL_LOGGING_LEVEL_ENUM_WARNING = 2,
  ZCL_LOGGING_LEVEL_ENUM_ERROR = 3,
  ZCL_LOGGING_LEVEL_ENUM_CRITICAL = 4,
} LoggingLevelEnum;

// Enum for MeteringEnergyCarrierUnitOfMeasure
typedef enum {
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_KILOWATT_HOURS_OR_KILOWATTS = 0,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_CUBIC_METER_OR_CUBIC_METER_PER_HOUR = 1,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_CUBIC_FEET_OR_CUBIC_FEET_PER_HOUR = 2,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_CENTUM_CUBIC_FEET_OR_CENTUM = 3,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_US_GALLONS_OR_US_GALONS_PER_HOUR = 4,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_IMPERIAL_GALLONS_OR_IMPERIAL_GALLONS_PERHOUR = 5,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_BT_US_OR_BTU_PERHOUR = 6,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_LITERS_OR_LITERS_PER_HOUR = 7,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_K_PA_GAUGEIN = 8,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_K_P_AABSOLUTE = 9,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_MCF_CUBIC_FEET_OR_MCF_PER_HOUR = 10,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_UNITLESS = 11,
  ZCL_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_MEGA_JOULE_MEGA_JOULE_PER_SECOND = 12,
} MeteringEnergyCarrierUnitOfMeasure;

// Enum for MeteringMeteringDeviceType
typedef enum {
  ZCL_METERING_METERING_DEVICE_TYPE_ELECTRIC_METERING = 0,
  ZCL_METERING_METERING_DEVICE_TYPE_GAS_METERING = 1,
  ZCL_METERING_METERING_DEVICE_TYPE_WATER_METERING = 2,
  ZCL_METERING_METERING_DEVICE_TYPE_THERMAL_METERING = 3,
  ZCL_METERING_METERING_DEVICE_TYPE_PRESSURE_METERING = 4,
  ZCL_METERING_METERING_DEVICE_TYPE_HEAT_METERING = 5,
  ZCL_METERING_METERING_DEVICE_TYPE_COOLING_METERING = 6,
  ZCL_METERING_METERING_DEVICE_TYPE_MIRRORED_GAS_METERING = 128,
  ZCL_METERING_METERING_DEVICE_TYPE_MIRRORED_WATER_METERING = 129,
  ZCL_METERING_METERING_DEVICE_TYPE_MIRRORED_THERMAL_METERING = 130,
  ZCL_METERING_METERING_DEVICE_TYPE_MIRRORED_PRESSURE_METERING = 131,
  ZCL_METERING_METERING_DEVICE_TYPE_MIRRORED_HEAT_METERING = 132,
  ZCL_METERING_METERING_DEVICE_TYPE_MIRRORED_COOLING_METERING = 133,
} MeteringMeteringDeviceType;

// Enum for MeteringSupplyStatus
typedef enum {
  ZCL_METERING_SUPPLY_STATUS_SUPPLY_OFF = 0,
  ZCL_METERING_SUPPLY_STATUS_SUPPLY_OFF_OR_ARMED = 1,
  ZCL_METERING_SUPPLY_STATUS_SUPPLY_ON = 2,
} MeteringSupplyStatus;

// Enum for MeteringTemperatureUnitOfMeasure
typedef enum {
  ZCL_METERING_TEMPERATURE_UNIT_OF_MEASURE_DEGREES_KELVIN = 0,
  ZCL_METERING_TEMPERATURE_UNIT_OF_MEASURE_DEGREES_CELSIUS = 1,
  ZCL_METERING_TEMPERATURE_UNIT_OF_MEASURE_DEGREES_FAHRENHEIT = 2,
} MeteringTemperatureUnitOfMeasure;

// Enum for MeteringUnitofMeasure
typedef enum {
  ZCL_METERING_UNITOF_MEASURE_KILOWATT_HOURS_OR_KILOWATTS = 0,
  ZCL_METERING_UNITOF_MEASURE_CUBIC_METER_OR_CUBIC_METER_PER_HOUR = 1,
  ZCL_METERING_UNITOF_MEASURE_CUBIC_FEET_OR_CUBIC_FEET_PER_HOUR = 2,
  ZCL_METERING_UNITOF_MEASURE_CENTUM_CUBIC_FEET_OR_CENTUM = 3,
  ZCL_METERING_UNITOF_MEASURE_US_GALLONS_OR_US_GALONS_PER_HOUR = 4,
  ZCL_METERING_UNITOF_MEASURE_IMPERIAL_GALLONS_OR_IMPERIAL_GALLONS_PERHOUR = 5,
  ZCL_METERING_UNITOF_MEASURE_BT_US_OR_BTU_PERHOUR = 6,
  ZCL_METERING_UNITOF_MEASURE_LITERS_OR_LITERS_PER_HOUR = 7,
  ZCL_METERING_UNITOF_MEASURE_K_PA_GAUGEIN = 8,
  ZCL_METERING_UNITOF_MEASURE_K_P_AABSOLUTE = 9,
  ZCL_METERING_UNITOF_MEASURE_MCF_CUBIC_FEET_OR_MCF_PER_HOUR = 10,
  ZCL_METERING_UNITOF_MEASURE_UNITLESS = 11,
  ZCL_METERING_UNITOF_MEASURE_MEGA_JOULE_MEGA_JOULE_PER_SECOND = 12,
} MeteringUnitofMeasure;

// Enum for ModeType
typedef enum {
  ZCL_MODE_TYPE_OFF = 0,
  ZCL_MODE_TYPE_HUMIDIFY = 1,
  ZCL_MODE_TYPE_DEHUMIDIFY = 2,
  ZCL_MODE_TYPE_AUTO = 3,
} ModeType;

// Enum for MoveStepMode
typedef enum {
  ZCL_MOVE_STEP_MODE_UP = 0,
  ZCL_MOVE_STEP_MODE_DOWN = 1,
} MoveStepMode;

// Enum for NM_State
typedef enum {
  ZCL_NM_STATE_IDLE = 0,
  ZCL_NM_STATE_ADD_NODE = 1,
  ZCL_NM_STATE_REMOVE_NODE = 2,
  ZCL_NM_STATE_JOIN_NETWORK = 3,
  ZCL_NM_STATE_LEAVE_NETWORK = 4,
  ZCL_NM_STATE_NETWORK_REPAIR = 5,
  ZCL_NM_STATE_NETWORK_UPDATE = 6,
  ZCL_NM_STATE_RESET = 7,
  ZCL_NM_STATE_SCAN_MODE = 8,
} NM_State;

// Enum for NodeStateNetworkStatus
typedef enum {
  ZCL_NODE_STATE_NETWORK_STATUS_ONLINE_FUNCTIONAL = 0,
  ZCL_NODE_STATE_NETWORK_STATUS_ONLINE_INTERVIEWING = 1,
  ZCL_NODE_STATE_NETWORK_STATUS_ONLINE_NON_FUNCTIONAL = 2,
  ZCL_NODE_STATE_NETWORK_STATUS_UNAVAILABLE = 3,
  ZCL_NODE_STATE_NETWORK_STATUS_OFFLINE = 4,
  ZCL_NODE_STATE_NETWORK_STATUS_COMMISIONING_STARTED = 5,
} NodeStateNetworkStatus;

// Enum for NodeStateSecurity
typedef enum {
  ZCL_NODE_STATE_SECURITY_NONE = 0,
  ZCL_NODE_STATE_SECURITY_Z_WAVE_S0 = 1,
  ZCL_NODE_STATE_SECURITY_Z_WAVE_S2_UNAUTHENTICATED = 2,
  ZCL_NODE_STATE_SECURITY_Z_WAVE_S2_AUTHENTICATED = 3,
  ZCL_NODE_STATE_SECURITY_Z_WAVE_S2_ACCESS_CONTROL = 4,
  ZCL_NODE_STATE_SECURITY_ZIGBEE_Z3 = 5,
  ZCL_NODE_STATE_SECURITY_MATTER = 6,
} NodeStateSecurity;

// Enum for OTADeviceSpecificImageType
typedef enum {
  ZCL_OTA_DEVICE_SPECIFIC_IMAGE_TYPE_CLIENT_SECURITY_CREDENTIALS = 65472,
  ZCL_OTA_DEVICE_SPECIFIC_IMAGE_TYPE_CLIENT_CONFIGURATION = 65473,
  ZCL_OTA_DEVICE_SPECIFIC_IMAGE_TYPE_SERVER_LOG = 65474,
  ZCL_OTA_DEVICE_SPECIFIC_IMAGE_TYPE_PICTURE = 65475,
} OTADeviceSpecificImageType;

// Enum for OTAUpgradeImageUpgradeStatus
typedef enum {
  ZCL_OTA_UPGRADE_IMAGE_UPGRADE_STATUS_NORMAL = 0,
  ZCL_OTA_UPGRADE_IMAGE_UPGRADE_STATUS_DOWNLOAD_IN_PROGRESS = 1,
  ZCL_OTA_UPGRADE_IMAGE_UPGRADE_STATUS_DOWNLOAD_COMPLETE = 2,
  ZCL_OTA_UPGRADE_IMAGE_UPGRADE_STATUS_WAITING_TO_UPGRADE = 3,
  ZCL_OTA_UPGRADE_IMAGE_UPGRADE_STATUS_COUNT_DOWN = 4,
  ZCL_OTA_UPGRADE_IMAGE_UPGRADE_STATUS_WAIT_FOR_MORE = 5,
  ZCL_OTA_UPGRADE_IMAGE_UPGRADE_STATUS_WAITING_TO_UPGRADE_VIA_EXTERNAL_EVENT = 6,
} OTAUpgradeImageUpgradeStatus;

// Enum for OTAUpgradeUpgradeActivationPolicy
typedef enum {
  ZCL_OTA_UPGRADE_UPGRADE_ACTIVATION_POLICY_OTA_SERVER_ACTIVATION_ALLOWED = 0,
  ZCL_OTA_UPGRADE_UPGRADE_ACTIVATION_POLICY_OUT_OF_BAND_ACTIVATION_ONLY = 1,
} OTAUpgradeUpgradeActivationPolicy;

// Enum for OTAUpgradeUpgradeTimeoutPolicy
typedef enum {
  ZCL_OTA_UPGRADE_UPGRADE_TIMEOUT_POLICY_APPLY_UPGRADE_AFTER_TIMEOUT = 0,
  ZCL_OTA_UPGRADE_UPGRADE_TIMEOUT_POLICY_DO_NOT_APPLY_UPGRADE_AFTER_TIMEOUT = 1,
} OTAUpgradeUpgradeTimeoutPolicy;

// Enum for OccupancySensingOccupancySensorType
typedef enum {
  ZCL_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_PIR = 0,
  ZCL_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_ULTRASONIC = 1,
  ZCL_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_PIR_AND_ULTRASONIC = 2,
  ZCL_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_PHYSICAL_CONTACT = 3,
} OccupancySensingOccupancySensorType;

// Enum for OffWithEffectEffectIdentifier
typedef enum {
  ZCL_OFF_WITH_EFFECT_EFFECT_IDENTIFIER_DELAYED_ALL_OFF = 0,
  ZCL_OFF_WITH_EFFECT_EFFECT_IDENTIFIER_DYING_LIGHT = 1,
} OffWithEffectEffectIdentifier;

// Enum for OnOffStartUpOnOff
typedef enum {
  ZCL_ON_OFF_START_UP_ON_OFF_SET_ON_OFF_TO0 = 0,
  ZCL_ON_OFF_START_UP_ON_OFF_SET_ON_OFF_TO1 = 1,
  ZCL_ON_OFF_START_UP_ON_OFF_TOGGLE_PREVIOUS_ON_OFF = 2,
  ZCL_ON_OFF_START_UP_ON_OFF_SET_PREVIOUS_ON_OFF = 255,
} OnOffStartUpOnOff;

// Enum for OperatingEventNotificationOperationEventCode
typedef enum {
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_UNKNOWN_OR_MS = 0,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_LOCK = 1,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_UNLOCK = 2,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_LOCK_FAILURE_INVALID_PIN_OR_ID = 3,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_LOCK_FAILURE_INVALID_SCHEDULE = 4,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_UNLOCK_FAILURE_INVALID_PIN_OR_ID = 5,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_UNLOCK_FAILURE_INVALID_SCHEDULE = 6,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_ONE_TOUCH_LOCK = 7,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_KEY_LOCK = 8,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_KEY_UNLOCK = 9,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_AUTO_LOCK = 10,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_SCHEDULE_LOCK = 11,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_SCHEDULE_UNLOCK = 12,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_MANUAL_LOCK = 13,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_MANUAL_UNLOCK = 14,
  ZCL_OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_NON_ACCESS_USER_OPERATIONAL_EVENT = 14,
} OperatingEventNotificationOperationEventCode;

// Enum for OptionsStartupMode
typedef enum {
  ZCL_OPTIONS_STARTUP_MODE_RESTART_USING_STARTUP_PARAMETERS = 0,
  ZCL_OPTIONS_STARTUP_MODE_RESTART_USING_CURRENT_STATE = 1,
} OptionsStartupMode;

// Enum for ProfileIntervalPeriod
typedef enum {
  ZCL_PROFILE_INTERVAL_PERIOD_DAILY = 0,
  ZCL_PROFILE_INTERVAL_PERIOD_60_MINUTES = 1,
  ZCL_PROFILE_INTERVAL_PERIOD_30_MINUTES = 2,
  ZCL_PROFILE_INTERVAL_PERIOD_15_MINUTES = 3,
  ZCL_PROFILE_INTERVAL_PERIOD_10_MINUTES = 4,
  ZCL_PROFILE_INTERVAL_PERIOD_7DOT5_MINUTES = 5,
  ZCL_PROFILE_INTERVAL_PERIOD_5_MINUTES = 6,
  ZCL_PROFILE_INTERVAL_PERIOD_2DOT5_MINUTES = 7,
} ProfileIntervalPeriod;

// Enum for ProgrammingEventNotificationProgramEventCode
typedef enum {
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_CODE_UNKNOWN_OR_MS = 0,
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_CODE_MASTER_CODE_CHANGED = 1,
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_CODE_PIN_CODE_ADDED = 2,
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_CODE_PIN_CODE_DELETED = 3,
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_CODE_PIN_CODE_CHANGED = 4,
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_CODE_RFID_CODE_ADDED = 5,
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_CODE_RFID_CODE_DELETED = 6,
} ProgrammingEventNotificationProgramEventCode;

// Enum for ProgrammingEventNotificationProgramEventSource
typedef enum {
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_SOURCE_KEYPAD = 0,
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_SOURCE_RF = 1,
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_SOURCE_RFID = 3,
  ZCL_PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_SOURCE_INDETERMINATE = 255,
} ProgrammingEventNotificationProgramEventSource;

// Enum for PumpControlMode
typedef enum {
  ZCL_PUMP_CONTROL_MODE_CONSTANT_SPEED = 0,
  ZCL_PUMP_CONTROL_MODE_CONSTANT_PRESSURE = 1,
  ZCL_PUMP_CONTROL_MODE_PROPORTIONAL_PRESSURE = 2,
  ZCL_PUMP_CONTROL_MODE_CONSTANT_FLOW = 3,
  ZCL_PUMP_CONTROL_MODE_CONSTANT_TEMPERATURE = 5,
  ZCL_PUMP_CONTROL_MODE_AUTOMATIC = 7,
} PumpControlMode;

// Enum for PumpOperationMode
typedef enum {
  ZCL_PUMP_OPERATION_MODE_NORMAL = 0,
  ZCL_PUMP_OPERATION_MODE_MINIMUM = 1,
  ZCL_PUMP_OPERATION_MODE_MAXIMUM = 2,
  ZCL_PUMP_OPERATION_MODE_LOCAL = 3,
} PumpOperationMode;

// Enum for SHDCFGDirection
typedef enum {
  ZCL_SHDCFG_DIRECTION_CLOSING = 0,
  ZCL_SHDCFG_DIRECTION_OPENING = 1,
} SHDCFGDirection;

// Enum for ScaleType
typedef enum {
  ZCL_SCALE_TYPE_PERCENTAGE = 0,
  ZCL_SCALE_TYPE_ABSOLUTE = 1,
} ScaleType;

// Enum for SetpointRaiseOrLowerMode
typedef enum {
  ZCL_SETPOINT_RAISE_OR_LOWER_MODE_HEAT = 0,
  ZCL_SETPOINT_RAISE_OR_LOWER_MODE_COOL = 1,
  ZCL_SETPOINT_RAISE_OR_LOWER_MODE_BOTH = 2,
} SetpointRaiseOrLowerMode;

// Enum for SetpointType
typedef enum {
  ZCL_SETPOINT_TYPE_HUMIDIFIER = 1,
  ZCL_SETPOINT_TYPE_DEHUMIDIFIER = 2,
  ZCL_SETPOINT_TYPE_AUTO = 3,
} SetpointType;

// Enum for ShadeConfigurationMode
typedef enum {
  ZCL_SHADE_CONFIGURATION_MODE_NORMAL = 0,
  ZCL_SHADE_CONFIGURATION_MODE_CONFIGURE = 1,
} ShadeConfigurationMode;

// Enum for SirenConfigurationStrobe
typedef enum {
  ZCL_SIREN_CONFIGURATION_STROBE_NO_STROBE = 0,
  ZCL_SIREN_CONFIGURATION_STROBE_USE_STROBE = 1,
} SirenConfigurationStrobe;

// Enum for SirenConfigurationWarningMode
typedef enum {
  ZCL_SIREN_CONFIGURATION_WARNING_MODE_STOP = 0,
  ZCL_SIREN_CONFIGURATION_WARNING_MODE_BURGLER = 1,
  ZCL_SIREN_CONFIGURATION_WARNING_MODE_FIRE = 2,
  ZCL_SIREN_CONFIGURATION_WARNING_MODE_EMERGENCY = 3,
  ZCL_SIREN_CONFIGURATION_WARNING_MODE_POLICE_PANIC = 4,
  ZCL_SIREN_CONFIGURATION_WARNING_MODE_FIRE_PANIC = 5,
  ZCL_SIREN_CONFIGURATION_WARNING_MODE_EMERGENCY_PANIC = 6,
} SirenConfigurationWarningMode;

// Enum for SquawkConfigurationSquawkMode
typedef enum {
  ZCL_SQUAWK_CONFIGURATION_SQUAWK_MODE_SOUND_FOR_SYSTEM_IS_ARMED = 0,
  ZCL_SQUAWK_CONFIGURATION_SQUAWK_MODE_SOUND_FOR_SYSTEM_IS_DISARMED = 1,
} SquawkConfigurationSquawkMode;

// Enum for ThermostatACCapacityFormat
typedef enum {
  ZCL_THERMOSTAT_AC_CAPACITY_FORMAT_BT_UH = 0,
} ThermostatACCapacityFormat;

// Enum for ThermostatACCompressorType
typedef enum {
  ZCL_THERMOSTAT_AC_COMPRESSOR_TYPE_T1 = 1,
  ZCL_THERMOSTAT_AC_COMPRESSOR_TYPE_T2 = 2,
  ZCL_THERMOSTAT_AC_COMPRESSOR_TYPE_T3 = 3,
} ThermostatACCompressorType;

// Enum for ThermostatACLouverPosition
typedef enum {
  ZCL_THERMOSTAT_AC_LOUVER_POSITION_FULLY_CLOSED = 1,
  ZCL_THERMOSTAT_AC_LOUVER_POSITION_FULLY_OPEN = 2,
  ZCL_THERMOSTAT_AC_LOUVER_POSITION_QUARTER_OPEN = 3,
  ZCL_THERMOSTAT_AC_LOUVER_POSITION_HALF_OPEN = 4,
  ZCL_THERMOSTAT_AC_LOUVER_POSITION_THREE_QUARTERS_OPEN = 5,
} ThermostatACLouverPosition;

// Enum for ThermostatACRefrigerantType
typedef enum {
  ZCL_THERMOSTAT_AC_REFRIGERANT_TYPE_R22 = 1,
  ZCL_THERMOSTAT_AC_REFRIGERANT_TYPE_R410A = 2,
  ZCL_THERMOSTAT_AC_REFRIGERANT_TYPE_R407C = 3,
} ThermostatACRefrigerantType;

// Enum for ThermostatACType
typedef enum {
  ZCL_THERMOSTAT_AC_TYPE_COOLING_AND_FIXED_SPEED = 1,
  ZCL_THERMOSTAT_AC_TYPE_HEAT_PUMP_AND_FIXED_SPEED = 2,
  ZCL_THERMOSTAT_AC_TYPE_COOLING_AND_INVERTER = 3,
  ZCL_THERMOSTAT_AC_TYPE_HEAT_PUMP_AND_INVERTER = 4,
} ThermostatACType;

// Enum for ThermostatControlSequenceOfOperation
typedef enum {
  ZCL_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_COOLING_ONLY = 0,
  ZCL_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_COOLING_WITH_REHEAT = 1,
  ZCL_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_HEATING_ONLY = 2,
  ZCL_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_HEATING_WITH_REHEAT = 3,
  ZCL_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_COOLING_AND_HEATING4_PIPES = 4,
  ZCL_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_COOLING_AND_HEATING4_PIPES_WITH_REHEAT = 5,
} ThermostatControlSequenceOfOperation;

// Enum for ThermostatProgrammingOperationModeProgrammingMode
typedef enum {
  ZCL_THERMOSTAT_PROGRAMMING_OPERATION_MODE_PROGRAMMING_MODE_SIMPLE_OR_SETPOINT = 0,
  ZCL_THERMOSTAT_PROGRAMMING_OPERATION_MODE_PROGRAMMING_MODE_SCHEDULE = 1,
} ThermostatProgrammingOperationModeProgrammingMode;

// Enum for ThermostatSetpointChangeSource
typedef enum {
  ZCL_THERMOSTAT_SETPOINT_CHANGE_SOURCE_MANUAL = 0,
  ZCL_THERMOSTAT_SETPOINT_CHANGE_SOURCE_SCHEDULE_OR_INTERNAL_PROGRAMMING = 1,
  ZCL_THERMOSTAT_SETPOINT_CHANGE_SOURCE_EXTERNAL = 2,
} ThermostatSetpointChangeSource;

// Enum for ThermostatStartOfWeek
typedef enum {
  ZCL_THERMOSTAT_START_OF_WEEK_SUNDAY = 0,
  ZCL_THERMOSTAT_START_OF_WEEK_MONDAY = 1,
  ZCL_THERMOSTAT_START_OF_WEEK_TUESDAY = 2,
  ZCL_THERMOSTAT_START_OF_WEEK_WEDNESDAY = 3,
  ZCL_THERMOSTAT_START_OF_WEEK_THURSDAY = 4,
  ZCL_THERMOSTAT_START_OF_WEEK_FRIDAY = 5,
  ZCL_THERMOSTAT_START_OF_WEEK_SATURDAY = 6,
} ThermostatStartOfWeek;

// Enum for ThermostatSystemMode
typedef enum {
  ZCL_THERMOSTAT_SYSTEM_MODE_OFF = 0,
  ZCL_THERMOSTAT_SYSTEM_MODE_AUTO = 1,
  ZCL_THERMOSTAT_SYSTEM_MODE_COOL = 3,
  ZCL_THERMOSTAT_SYSTEM_MODE_HEAT = 4,
  ZCL_THERMOSTAT_SYSTEM_MODE_EMERGENCY_HEATING = 5,
  ZCL_THERMOSTAT_SYSTEM_MODE_PRECOOLING = 6,
  ZCL_THERMOSTAT_SYSTEM_MODE_FAN_ONLY = 7,
  ZCL_THERMOSTAT_SYSTEM_MODE_DRY = 8,
  ZCL_THERMOSTAT_SYSTEM_MODE_SLEEP = 9,
} ThermostatSystemMode;

// Enum for ThermostatTemperatureSetpointHold
typedef enum {
  ZCL_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_SETPOINT_HOLD_OFF = 0,
  ZCL_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_SETPOINT_HOLD_ON = 1,
} ThermostatTemperatureSetpointHold;

// Enum for ThermostatThermostatRunningMode
typedef enum {
  ZCL_THERMOSTAT_THERMOSTAT_RUNNING_MODE_OFF = 0,
  ZCL_THERMOSTAT_THERMOSTAT_RUNNING_MODE_COOL = 3,
  ZCL_THERMOSTAT_THERMOSTAT_RUNNING_MODE_HEAT = 4,
} ThermostatThermostatRunningMode;

// Enum for ThermostatUserInterfaceConfigurationKeypadLockout
typedef enum {
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_NONE = 0,
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_LEVEL1 = 1,
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_LEVEL2 = 2,
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_LEVEL3 = 3,
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_LEVEL4 = 4,
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_LEVEL5 = 5,
} ThermostatUserInterfaceConfigurationKeypadLockout;

// Enum for ThermostatUserInterfaceConfigurationScheduleProgrammingVisibility
typedef enum {
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY_LOCAL_ENABLED = 0,
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY_LOCAL_DISABLED = 1,
} ThermostatUserInterfaceConfigurationScheduleProgrammingVisibility;

// Enum for ThermostatUserInterfaceConfigurationTemperatureDisplayMode
typedef enum {
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE_CELSIUS = 0,
  ZCL_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE_FAHRENHEIT = 1,
} ThermostatUserInterfaceConfigurationTemperatureDisplayMode;

// Enum for TriggerEffectEffectIdentifier
typedef enum {
  ZCL_TRIGGER_EFFECT_EFFECT_IDENTIFIER_BLINK = 0,
  ZCL_TRIGGER_EFFECT_EFFECT_IDENTIFIER_BREATHE = 1,
  ZCL_TRIGGER_EFFECT_EFFECT_IDENTIFIER_OKAY = 2,
  ZCL_TRIGGER_EFFECT_EFFECT_IDENTIFIER_CHANNEL_CHANGE = 11,
  ZCL_TRIGGER_EFFECT_EFFECT_IDENTIFIER_FINISH_EFFECT = 254,
  ZCL_TRIGGER_EFFECT_EFFECT_IDENTIFIER_STOP_EFFECT = 255,
} TriggerEffectEffectIdentifier;

// Enum for TriggerEffectEffectVariant
typedef enum {
  ZCL_TRIGGER_EFFECT_EFFECT_VARIANT_DEFAULT = 0,
} TriggerEffectEffectVariant;

// Enum for TxReportTransmissionSpeed
typedef enum {
  ZCL_TX_REPORT_TRANSMISSION_SPEED_Z_WAVE_9600_BITS_PER_SECOND = 0,
  ZCL_TX_REPORT_TRANSMISSION_SPEED_Z_WAVE_40_KBITS_PER_SECOND = 1,
  ZCL_TX_REPORT_TRANSMISSION_SPEED_Z_WAVE_100_KBITS_PER_SECOND = 2,
  ZCL_TX_REPORT_TRANSMISSION_SPEED_Z_WAVE_LONG_RANGE_100_KBITS_PER_SECOND = 3,
  ZCL_TX_REPORT_TRANSMISSION_SPEED_OTHER = 254,
  ZCL_TX_REPORT_TRANSMISSION_SPEED_UNKNOWN = 255,
} TxReportTransmissionSpeed;

// Enum for UnifyHumidityControlCurrentState
typedef enum {
  ZCL_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE_IDLE = 0,
  ZCL_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE_HUMIDIFYING = 1,
  ZCL_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE_DEHUMIDIFYING = 2,
} UnifyHumidityControlCurrentState;

// Enum for WindowCoveringWindowCoveringType
typedef enum {
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_ROLLERSHADE = 0,
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_ROLLERSHADE2_MOTOR = 1,
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_ROLLERSHADE_EXTERIOR = 2,
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_ROLLERSHADE_EXTERIOR2_MOTOR = 3,
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_DRAPERY = 4,
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_AWNING = 5,
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_SHUTTER = 6,
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_TILT_BLIND_TILT_ONLY = 7,
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_TILT_BLIND_LIFT_AND_TILT = 8,
  ZCL_WINDOW_COVERING_WINDOW_COVERING_TYPE_PROJECTOR_SCREEN = 9,
} WindowCoveringWindowCoveringType;

// Enum for ZoneEnrollResponseEnrollResponseCode
typedef enum {
  ZCL_ZONE_ENROLL_RESPONSE_ENROLL_RESPONSE_CODE_SUCCESS = 0,
  ZCL_ZONE_ENROLL_RESPONSE_ENROLL_RESPONSE_CODE_NOT_SUPPORTED = 1,
  ZCL_ZONE_ENROLL_RESPONSE_ENROLL_RESPONSE_CODE_NO_ENROLL_PERMIT = 2,
  ZCL_ZONE_ENROLL_RESPONSE_ENROLL_RESPONSE_CODE_TOO_MANY_ZONES = 3,
} ZoneEnrollResponseEnrollResponseCode;

// Enum for attributeReportingStatus
typedef enum {
  ZCL_ATTRIBUTE_REPORTING_STATUS_PENDING = 0,
  ZCL_ATTRIBUTE_REPORTING_STATUS_COMPLETE = 1,
} attributeReportingStatus;

// Enum for zclStatus
typedef enum {
  ZCL_ZCL_STATUS_SUCCESS = 0,
  ZCL_ZCL_STATUS_FAILURE = 1,
  ZCL_ZCL_STATUS_NOT_AUTHORIZED = 126,
  ZCL_ZCL_STATUS_MALFORMED_COMMAND = 128,
  ZCL_ZCL_STATUS_UNSUP_CLUSTER_COMMAND = 129,
  ZCL_ZCL_STATUS_UNSUP_GENERAL_COMMAND = 130,
  ZCL_ZCL_STATUS_UNSUP_MANUF_CLUSTER_COMMAND = 131,
  ZCL_ZCL_STATUS_UNSUP_MANUF_GENERAL_COMMAND = 132,
  ZCL_ZCL_STATUS_INVALID_FIELD = 133,
  ZCL_ZCL_STATUS_UNSUPPORTED_ATTRIBUTE = 134,
  ZCL_ZCL_STATUS_INVALID_VALUE = 135,
  ZCL_ZCL_STATUS_READ_ONLY = 136,
  ZCL_ZCL_STATUS_INSUFFICIENT_SPACE = 137,
  ZCL_ZCL_STATUS_DUPLICATE_EXISTS = 138,
  ZCL_ZCL_STATUS_NOT_FOUND = 139,
  ZCL_ZCL_STATUS_UNREPORTABLE_ATTRIBUTE = 140,
  ZCL_ZCL_STATUS_INVALID_DATA_TYPE = 141,
  ZCL_ZCL_STATUS_INVALID_SELECTOR = 142,
  ZCL_ZCL_STATUS_WRITE_ONLY = 143,
  ZCL_ZCL_STATUS_INCONSISTENT_STARTUP_STATE = 144,
  ZCL_ZCL_STATUS_DEFINED_OUT_OF_BAND = 145,
  ZCL_ZCL_STATUS_INCONSISTENT = 146,
  ZCL_ZCL_STATUS_ACTION_DENIED = 147,
  ZCL_ZCL_STATUS_TIMEOUT = 148,
  ZCL_ZCL_STATUS_ABORT = 149,
  ZCL_ZCL_STATUS_INVALID_IMAGE = 150,
  ZCL_ZCL_STATUS_WAIT_FOR_DATA = 151,
  ZCL_ZCL_STATUS_NO_IMAGE_AVAILABLE = 152,
  ZCL_ZCL_STATUS_REQUIRE_MORE_IMAGE = 153,
  ZCL_ZCL_STATUS_NOTIFICATION_PENDING = 154,
  ZCL_ZCL_STATUS_HARDWARE_FAILURE = 192,
  ZCL_ZCL_STATUS_SOFTWARE_FAILURE = 193,
  ZCL_ZCL_STATUS_CALIBRATION_ERROR = 194,
  ZCL_ZCL_STATUS_UNSUPPORTED_CLUSTER = 195,
  ZCL_ZCL_STATUS_LIMIT_REACHED = 196,
} zclStatus;

// Enum for zclType
typedef enum {
  ZCL_ZCL_TYPE_NODATA = 0,
  ZCL_ZCL_TYPE_DATA8 = 8,
  ZCL_ZCL_TYPE_DATA16 = 9,
  ZCL_ZCL_TYPE_DATA24 = 10,
  ZCL_ZCL_TYPE_DATA32 = 11,
  ZCL_ZCL_TYPE_DATA40 = 12,
  ZCL_ZCL_TYPE_DATA48 = 13,
  ZCL_ZCL_TYPE_DATA56 = 14,
  ZCL_ZCL_TYPE_DATA64 = 15,
  ZCL_ZCL_TYPE_BOOL = 16,
  ZCL_ZCL_TYPE_MAP8 = 24,
  ZCL_ZCL_TYPE_MAP16 = 25,
  ZCL_ZCL_TYPE_MAP24 = 26,
  ZCL_ZCL_TYPE_MAP32 = 27,
  ZCL_ZCL_TYPE_MAP40 = 28,
  ZCL_ZCL_TYPE_MAP48 = 29,
  ZCL_ZCL_TYPE_MAP56 = 30,
  ZCL_ZCL_TYPE_MAP64 = 31,
  ZCL_ZCL_TYPE_UINT8 = 32,
  ZCL_ZCL_TYPE_UINT16 = 33,
  ZCL_ZCL_TYPE_UINT24 = 34,
  ZCL_ZCL_TYPE_UINT32 = 35,
  ZCL_ZCL_TYPE_UINT40 = 36,
  ZCL_ZCL_TYPE_UINT48 = 37,
  ZCL_ZCL_TYPE_UINT56 = 38,
  ZCL_ZCL_TYPE_UINT64 = 39,
  ZCL_ZCL_TYPE_INT8 = 40,
  ZCL_ZCL_TYPE_INT16 = 41,
  ZCL_ZCL_TYPE_INT24 = 42,
  ZCL_ZCL_TYPE_INT32 = 43,
  ZCL_ZCL_TYPE_INT40 = 44,
  ZCL_ZCL_TYPE_INT48 = 45,
  ZCL_ZCL_TYPE_INT56 = 46,
  ZCL_ZCL_TYPE_INT64 = 47,
  ZCL_ZCL_TYPE_ENUM8 = 48,
  ZCL_ZCL_TYPE_ENUM16 = 49,
  ZCL_ZCL_TYPE_SEMI = 56,
  ZCL_ZCL_TYPE_SINGLE = 57,
  ZCL_ZCL_TYPE_DOUBLE = 58,
  ZCL_ZCL_TYPE_OCTSTR = 65,
  ZCL_ZCL_TYPE_STRING = 66,
  ZCL_ZCL_TYPE_OCTSTR16 = 67,
  ZCL_ZCL_TYPE_STRING16 = 68,
  ZCL_ZCL_TYPE_ARRAY = 72,
  ZCL_ZCL_TYPE_STRUCT = 76,
  ZCL_ZCL_TYPE_SET = 80,
  ZCL_ZCL_TYPE_BAG = 81,
  ZCL_ZCL_TYPE_FABRIC_IDX = 197,
  ZCL_ZCL_TYPE_TO_D = 224,
  ZCL_ZCL_TYPE_DATE = 225,
  ZCL_ZCL_TYPE_UTC = 226,
  ZCL_ZCL_TYPE_CLUSTER_ID = 232,
  ZCL_ZCL_TYPE_ATTRIB_ID = 233,
  ZCL_ZCL_TYPE_BAC_OID = 234,
  ZCL_ZCL_TYPE_EUI64 = 240,
  ZCL_ZCL_TYPE_KEY128 = 241,
  ZCL_ZCL_TYPE_UNK = 255,
} zclType;

// ZCL bitmaps
#define BALLAST_CONFIGURATION_BALLAST_STATUS_BALLAST_NON_OPERATIONAL (1)
#define BALLAST_CONFIGURATION_BALLAST_STATUS_BALLAST_NON_OPERATIONAL_OFFSET (0)
#define BALLAST_CONFIGURATION_BALLAST_STATUS_LAMP_FAILURE (2)
#define BALLAST_CONFIGURATION_BALLAST_STATUS_LAMP_FAILURE_OFFSET (1)
#define BALLAST_CONFIGURATION_LAMP_ALARM_MODE_LAMP_BURN_HOURS (1)
#define BALLAST_CONFIGURATION_LAMP_ALARM_MODE_LAMP_BURN_HOURS_OFFSET (0)
#define BARRIER_CONTROL_CAPABILITIES_PARTIAL_BARRIER (1)
#define BARRIER_CONTROL_CAPABILITIES_PARTIAL_BARRIER_OFFSET (0)
#define BARRIER_CONTROL_SAFETY_STATUS_REMOTE_LOCKOUT (1)
#define BARRIER_CONTROL_SAFETY_STATUS_REMOTE_LOCKOUT_OFFSET (0)
#define BARRIER_CONTROL_SAFETY_STATUS_TAMPER_DETECTED (2)
#define BARRIER_CONTROL_SAFETY_STATUS_TAMPER_DETECTED_OFFSET (1)
#define BARRIER_CONTROL_SAFETY_STATUS_FAILED_COMMUNICATION (4)
#define BARRIER_CONTROL_SAFETY_STATUS_FAILED_COMMUNICATION_OFFSET (2)
#define BARRIER_CONTROL_SAFETY_STATUS_POSITION_FAILURE (8)
#define BARRIER_CONTROL_SAFETY_STATUS_POSITION_FAILURE_OFFSET (3)
#define BASIC_ALARM_MASK_GENERAL_HARDWARE_FAULT (1)
#define BASIC_ALARM_MASK_GENERAL_HARDWARE_FAULT_OFFSET (0)
#define BASIC_ALARM_MASK_GENERAL_SOFTWARE_FAULT (2)
#define BASIC_ALARM_MASK_GENERAL_SOFTWARE_FAULT_OFFSET (1)
#define BASIC_DISABLE_LOCAL_CONFIG_DISABLE_RESET_TO_FACTORY_DEFAULTS (1)
#define BASIC_DISABLE_LOCAL_CONFIG_DISABLE_RESET_TO_FACTORY_DEFAULTS_OFFSET (0)
#define BASIC_DISABLE_LOCAL_CONFIG_DISABLE_DEVICE_CONFIGURATION (2)
#define BASIC_DISABLE_LOCAL_CONFIG_DISABLE_DEVICE_CONFIGURATION_OFFSET (1)
#define BATTERY_ALARM_MASK_BATTERY_VOLTAGE_TOO_LOW (1)
#define BATTERY_ALARM_MASK_BATTERY_VOLTAGE_TOO_LOW_OFFSET (0)
#define BATTERY_ALARM_MASK_BATTERY_ALARM1 (2)
#define BATTERY_ALARM_MASK_BATTERY_ALARM1_OFFSET (1)
#define BATTERY_ALARM_MASK_BATTERY_ALARM2 (4)
#define BATTERY_ALARM_MASK_BATTERY_ALARM2_OFFSET (2)
#define BATTERY_ALARM_MASK_BATTERY_ALARM3 (8)
#define BATTERY_ALARM_MASK_BATTERY_ALARM3_OFFSET (3)
#define BATTERY_ALARM_STATE_BATTERY1_MIN_THRESHOLD (1)
#define BATTERY_ALARM_STATE_BATTERY1_MIN_THRESHOLD_OFFSET (0)
#define BATTERY_ALARM_STATE_BATTERY1_THRESHOLD1 (2)
#define BATTERY_ALARM_STATE_BATTERY1_THRESHOLD1_OFFSET (1)
#define BATTERY_ALARM_STATE_BATTERY1_THRESHOLD2 (4)
#define BATTERY_ALARM_STATE_BATTERY1_THRESHOLD2_OFFSET (2)
#define BATTERY_ALARM_STATE_BATTERY1_THRESHOLD3 (8)
#define BATTERY_ALARM_STATE_BATTERY1_THRESHOLD3_OFFSET (3)
#define BATTERY_ALARM_STATE_BATTERY2_MIN_THRESHOLD (1024)
#define BATTERY_ALARM_STATE_BATTERY2_MIN_THRESHOLD_OFFSET (10)
#define BATTERY_ALARM_STATE_BATTERY2_THRESHOLD1 (2048)
#define BATTERY_ALARM_STATE_BATTERY2_THRESHOLD1_OFFSET (11)
#define BATTERY_ALARM_STATE_BATTERY2_THRESHOLD2 (4096)
#define BATTERY_ALARM_STATE_BATTERY2_THRESHOLD2_OFFSET (12)
#define BATTERY_ALARM_STATE_BATTERY2_THRESHOLD3 (8192)
#define BATTERY_ALARM_STATE_BATTERY2_THRESHOLD3_OFFSET (13)
#define BATTERY_ALARM_STATE_BATTERY3_MIN_THRESHOLD (1048576)
#define BATTERY_ALARM_STATE_BATTERY3_MIN_THRESHOLD_OFFSET (20)
#define BATTERY_ALARM_STATE_BATTERY3_THRESHOLD1 (2097152)
#define BATTERY_ALARM_STATE_BATTERY3_THRESHOLD1_OFFSET (21)
#define BATTERY_ALARM_STATE_BATTERY3_THRESHOLD2 (4194304)
#define BATTERY_ALARM_STATE_BATTERY3_THRESHOLD2_OFFSET (22)
#define BATTERY_ALARM_STATE_BATTERY3_THRESHOLD3 (8388608)
#define BATTERY_ALARM_STATE_BATTERY3_THRESHOLD3_OFFSET (23)
#define BATTERY_ALARM_STATE_MAINS_POWER_SUPPLY_LOST (1073741824)
#define BATTERY_ALARM_STATE_MAINS_POWER_SUPPLY_LOST_OFFSET (30)
#define CC_COLOR_OPTIONS_EXECUTE_IF_OFF (1)
#define CC_COLOR_OPTIONS_EXECUTE_IF_OFF_OFFSET (0)
#define COLOR_CONTROL_COLOR_CAPABILITIES_HUE_SATURATION_SUPPORTED (1)
#define COLOR_CONTROL_COLOR_CAPABILITIES_HUE_SATURATION_SUPPORTED_OFFSET (0)
#define COLOR_CONTROL_COLOR_CAPABILITIES_ENHANCED_HUE_SUPPORTED (2)
#define COLOR_CONTROL_COLOR_CAPABILITIES_ENHANCED_HUE_SUPPORTED_OFFSET (1)
#define COLOR_CONTROL_COLOR_CAPABILITIES_COLOR_LOOP_SUPPORTED (4)
#define COLOR_CONTROL_COLOR_CAPABILITIES_COLOR_LOOP_SUPPORTED_OFFSET (2)
#define COLOR_CONTROL_COLOR_CAPABILITIES_XY_SUPPORTED (8)
#define COLOR_CONTROL_COLOR_CAPABILITIES_XY_SUPPORTED_OFFSET (3)
#define COLOR_CONTROL_COLOR_CAPABILITIES_COLOR_TEMPERATURE_SUPPORTED (16)
#define COLOR_CONTROL_COLOR_CAPABILITIES_COLOR_TEMPERATURE_SUPPORTED_OFFSET (4)
#define COLOR_LOOP_SET_UPDATE_FLAGS_UPDATE_ACTION (1)
#define COLOR_LOOP_SET_UPDATE_FLAGS_UPDATE_ACTION_OFFSET (0)
#define COLOR_LOOP_SET_UPDATE_FLAGS_UPDATE_DIRECTION (2)
#define COLOR_LOOP_SET_UPDATE_FLAGS_UPDATE_DIRECTION_OFFSET (1)
#define COLOR_LOOP_SET_UPDATE_FLAGS_UPDATE_TIME (4)
#define COLOR_LOOP_SET_UPDATE_FLAGS_UPDATE_TIME_OFFSET (2)
#define COLOR_LOOP_SET_UPDATE_FLAGS_UPDATE_START_HUE (8)
#define COLOR_LOOP_SET_UPDATE_FLAGS_UPDATE_START_HUE_OFFSET (3)
#define COPY_SCENE_MODE_COPY_ALL_SCENES (1)
#define COPY_SCENE_MODE_COPY_ALL_SCENES_OFFSET (0)
#define DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK_DEVICE_TEMPERATURE_TOO_LOW (1)
#define DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK_DEVICE_TEMPERATURE_TOO_LOW_OFFSET (0)
#define DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK_DEVICE_TEMPERATURE_TOO_HIGH (2)
#define DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK_DEVICE_TEMPERATURE_TOO_HIGH_OFFSET (1)
#define DOOR_LOCK_ALARM_MASK_DEADBOLT_JAMMED (1)
#define DOOR_LOCK_ALARM_MASK_DEADBOLT_JAMMED_OFFSET (0)
#define DOOR_LOCK_ALARM_MASK_LOCK_RESET_TO_FACTORY_DEFAULTS (2)
#define DOOR_LOCK_ALARM_MASK_LOCK_RESET_TO_FACTORY_DEFAULTS_OFFSET (1)
#define DOOR_LOCK_ALARM_MASK_RF_POWER_MODULE_CYCLED (8)
#define DOOR_LOCK_ALARM_MASK_RF_POWER_MODULE_CYCLED_OFFSET (3)
#define DOOR_LOCK_ALARM_MASK_TAMPER_ALARM_WRONG_CODE_ENTRY_LIMIT (16)
#define DOOR_LOCK_ALARM_MASK_TAMPER_ALARM_WRONG_CODE_ENTRY_LIMIT_OFFSET (4)
#define DOOR_LOCK_ALARM_MASK_TAMPER_ALARM_FRONT_ESCUTCHEON_REMOVED_FROM_MAIN (32)
#define DOOR_LOCK_ALARM_MASK_TAMPER_ALARM_FRONT_ESCUTCHEON_REMOVED_FROM_MAIN_OFFSET (5)
#define DOOR_LOCK_ALARM_MASK_FORCED_DOOR_OPEN_UNDER_DOOR_LOCKED_CONDITION (64)
#define DOOR_LOCK_ALARM_MASK_FORCED_DOOR_OPEN_UNDER_DOOR_LOCKED_CONDITION_OFFSET (6)
#define DOOR_LOCK_CREDENTIAL_RULES_SUPPORT_SINGLE (1)
#define DOOR_LOCK_CREDENTIAL_RULES_SUPPORT_SINGLE_OFFSET (0)
#define DOOR_LOCK_CREDENTIAL_RULES_SUPPORT_DUAL (2)
#define DOOR_LOCK_CREDENTIAL_RULES_SUPPORT_DUAL_OFFSET (1)
#define DOOR_LOCK_CREDENTIAL_RULES_SUPPORT_TRI (4)
#define DOOR_LOCK_CREDENTIAL_RULES_SUPPORT_TRI_OFFSET (2)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_ENABLE_LOCAL_PROGRAMMING_ATTRIBUTE_IS_ENABLED (1)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_ENABLE_LOCAL_PROGRAMMING_ATTRIBUTE_IS_ENABLED_OFFSET (0)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_KEYPAD_INTERFACE_IS_ENABLED (2)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_KEYPAD_INTERFACE_IS_ENABLED_OFFSET (1)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_RF_INTERFACE_IS_ENABLED (4)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_RF_INTERFACE_IS_ENABLED_OFFSET (2)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_SOUND_VOLUME_IS_ENABLED (32)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_SOUND_VOLUME_IS_ENABLED_OFFSET (5)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_AUTO_RELOCK_TIME_IS_ENABLED (64)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_AUTO_RELOCK_TIME_IS_ENABLED_OFFSET (6)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_LED_SETTINGS_IS_ENABLED (128)
#define DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER_DEFAULT_LED_SETTINGS_IS_ENABLED_OFFSET (7)
#define DOOR_LOCK_FEATURE_MAP_PIN_CREDENTIAL (1)
#define DOOR_LOCK_FEATURE_MAP_PIN_CREDENTIAL_OFFSET (0)
#define DOOR_LOCK_FEATURE_MAP_RFID_CREDENTIAL (2)
#define DOOR_LOCK_FEATURE_MAP_RFID_CREDENTIAL_OFFSET (1)
#define DOOR_LOCK_FEATURE_MAP_FINGER_CREDENTIALS (4)
#define DOOR_LOCK_FEATURE_MAP_FINGER_CREDENTIALS_OFFSET (2)
#define DOOR_LOCK_FEATURE_MAP_LOGGING (8)
#define DOOR_LOCK_FEATURE_MAP_LOGGING_OFFSET (3)
#define DOOR_LOCK_FEATURE_MAP_WEEK_DAY_ACCESS_SCHEDULES (16)
#define DOOR_LOCK_FEATURE_MAP_WEEK_DAY_ACCESS_SCHEDULES_OFFSET (4)
#define DOOR_LOCK_FEATURE_MAP_DOOR_POSITION_SENSOR (32)
#define DOOR_LOCK_FEATURE_MAP_DOOR_POSITION_SENSOR_OFFSET (5)
#define DOOR_LOCK_FEATURE_MAP_FACE_CREDENTIALS (64)
#define DOOR_LOCK_FEATURE_MAP_FACE_CREDENTIALS_OFFSET (6)
#define DOOR_LOCK_FEATURE_MAP_CREDENTIAL_OVER_THE_AIR_ACCESS (128)
#define DOOR_LOCK_FEATURE_MAP_CREDENTIAL_OVER_THE_AIR_ACCESS_OFFSET (7)
#define DOOR_LOCK_FEATURE_MAP_USER (256)
#define DOOR_LOCK_FEATURE_MAP_USER_OFFSET (8)
#define DOOR_LOCK_FEATURE_MAP_NOTIFICATION (512)
#define DOOR_LOCK_FEATURE_MAP_NOTIFICATION_OFFSET (9)
#define DOOR_LOCK_FEATURE_MAP_YEAR_DAY_ACCESS_SCHEDULES (1024)
#define DOOR_LOCK_FEATURE_MAP_YEAR_DAY_ACCESS_SCHEDULES_OFFSET (10)
#define DOOR_LOCK_FEATURE_MAP_HOLIDAY_SCHEDULES (2048)
#define DOOR_LOCK_FEATURE_MAP_HOLIDAY_SCHEDULES_OFFSET (11)
#define DOOR_LOCK_FEATURE_MAP_UNBOLTING (4096)
#define DOOR_LOCK_FEATURE_MAP_UNBOLTING_OFFSET (12)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_UNKNOWN_OR_MS (1)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_UNKNOWN_OR_MS_OFFSET (0)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_LOCK (2)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_LOCK_OFFSET (1)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_UNLOCK (4)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_UNLOCK_OFFSET (2)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_LOCK_ERROR_INVALID_PIN (8)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_LOCK_ERROR_INVALID_PIN_OFFSET (3)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_LOCK_ERROR_INVALID_SCHEDULE (16)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_LOCK_ERROR_INVALID_SCHEDULE_OFFSET (4)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_UNLOCK_INVALID_PIN (32)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_UNLOCK_INVALID_PIN_OFFSET (5)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_UNLOCK_INVALID_SCHEDULE (64)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_UNLOCK_INVALID_SCHEDULE_OFFSET (6)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_NON_ACCESS_USER (128)
#define DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK_KEYPAD_OP_NON_ACCESS_USER_OFFSET (7)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_UNKNOWN_OR_MS (1)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_UNKNOWN_OR_MS_OFFSET (0)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_MASTER_CODE_CHANGED (2)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_MASTER_CODE_CHANGED_OFFSET (1)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_PIN_ADDED (4)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_PIN_ADDED_OFFSET (2)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_PIN_DELETED (8)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_PIN_DELETED_OFFSET (3)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_PIN_CHANGED (16)
#define DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK_KEYPAD_PROG_PIN_CHANGED_OFFSET (4)
#define DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_ADD_USERS_CREDENTIALS_SCHEDULES_LOCALLY (1)
#define DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_ADD_USERS_CREDENTIALS_SCHEDULES_LOCALLY_OFFSET (0)
#define DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_MODIFY_USERS_CREDENTIALS_SCHEDULES_LOCALLY (2)
#define DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_MODIFY_USERS_CREDENTIALS_SCHEDULES_LOCALLY_OFFSET (1)
#define DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_CLEAR_USERS_CREDENTIALS_SCHEDULES_LOCALLY (4)
#define DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_CLEAR_USERS_CREDENTIALS_SCHEDULES_LOCALLY_OFFSET (2)
#define DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_ADJUST_LOCK_SETTINGS_LOCALLY (8)
#define DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES_ADJUST_LOCK_SETTINGS_LOCALLY_OFFSET (3)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_UNKNOWN_OR_MS (1)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_UNKNOWN_OR_MS_OFFSET (0)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_THUMBTURN_LOCK (2)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_THUMBTURN_LOCK_OFFSET (1)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_THUMBTURN_UNLOCK (4)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_THUMBTURN_UNLOCK_OFFSET (2)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_ONE_TOUCH_LOCK (8)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_ONE_TOUCH_LOCK_OFFSET (3)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_KEY_LOCK (16)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_KEY_LOCK_OFFSET (4)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_KEY_UNLOCK (32)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_KEY_UNLOCK_OFFSET (5)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_AUTO_LOCK (64)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_AUTO_LOCK_OFFSET (6)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_SCHEDULE_LOCK (128)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_SCHEDULE_LOCK_OFFSET (7)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_SCHEDULE_UNLOCK (256)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_SCHEDULE_UNLOCK_OFFSET (8)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_LOCK (512)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_LOCK_OFFSET (9)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_UNLOCK (1024)
#define DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK_MANUAL_OP_UNLOCK_OFFSET (10)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_UNKNOWN_OR_MS (1)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_UNKNOWN_OR_MS_OFFSET (0)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_LOCK (2)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_LOCK_OFFSET (1)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_UNLOCK (4)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_UNLOCK_OFFSET (2)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_LOCK_ERROR_INVALID_RFID (8)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_LOCK_ERROR_INVALID_RFID_OFFSET (3)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_LOCK_ERROR_INVALID_SCHEDULE (16)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_LOCK_ERROR_INVALID_SCHEDULE_OFFSET (4)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_UNLOCK_ERROR_INVALID_RFID (32)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_UNLOCK_ERROR_INVALID_RFID_OFFSET (5)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_UNLOCK_ERROR_INVALID_SCHEDULE (64)
#define DOOR_LOCK_RFID_OPERATION_EVENT_MASK_RFID_OP_UNLOCK_ERROR_INVALID_SCHEDULE_OFFSET (6)
#define DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK_RFID_PROG_UNKNOWN_OR_MS (1)
#define DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK_RFID_PROG_UNKNOWN_OR_MS_OFFSET (0)
#define DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK_RFID_PROG_RFID_ADDED (32)
#define DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK_RFID_PROG_RFID_ADDED_OFFSET (5)
#define DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK_RFID_PROG_RFID_DELETED (64)
#define DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK_RFID_PROG_RFID_DELETED_OFFSET (6)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_UNKNOWN_OR_MS (1)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_UNKNOWN_OR_MS_OFFSET (0)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_LOCK (2)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_LOCK_OFFSET (1)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_UNLOCK (4)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_UNLOCK_OFFSET (2)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_LOCK_ERROR_INVALID_CODE (8)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_LOCK_ERROR_INVALID_CODE_OFFSET (3)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_LOCK_ERROR_INVALID_SCHEDULE (16)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_LOCK_ERROR_INVALID_SCHEDULE_OFFSET (4)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_UNLOCK_INVALID_CODE (32)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_UNLOCK_INVALID_CODE_OFFSET (5)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_UNLOCK_INVALID_SCHEDULE (64)
#define DOOR_LOCK_RF_OPERATION_EVENT_MASK_RF_OP_UNLOCK_INVALID_SCHEDULE_OFFSET (6)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_UNKNOWN_OR_MS (1)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_UNKNOWN_OR_MS_OFFSET (0)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_PIN_ADDED (4)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_PIN_ADDED_OFFSET (2)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_PIN_DELETED (8)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_PIN_DELETED_OFFSET (3)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_PIN_CHANGED (16)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_PIN_CHANGED_OFFSET (4)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_RFID_ADDED (32)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_RFID_ADDED_OFFSET (5)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_RFID_DELETED (64)
#define DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK_RF_PROG_RFID_DELETED_OFFSET (6)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_NORMAL_MODE_SUPPORTED (1)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_NORMAL_MODE_SUPPORTED_OFFSET (0)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_VACATION_MODE_SUPPORTED (2)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_VACATION_MODE_SUPPORTED_OFFSET (1)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_PRIVACY_MODE_SUPPORTED (4)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_PRIVACY_MODE_SUPPORTED_OFFSET (2)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_NO_RF_LOCK_OR_UNLOCK_MODE_SUPPORTED (8)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_NO_RF_LOCK_OR_UNLOCK_MODE_SUPPORTED_OFFSET (3)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_PASSAGE_MODE_SUPPORTED (16)
#define DOOR_LOCK_SUPPORTED_OPERATING_MODES_PASSAGE_MODE_SUPPORTED_OFFSET (4)
#define DRLK_DAYS_MASK_SUN (1)
#define DRLK_DAYS_MASK_SUN_OFFSET (0)
#define DRLK_DAYS_MASK_MON (2)
#define DRLK_DAYS_MASK_MON_OFFSET (1)
#define DRLK_DAYS_MASK_TUE (4)
#define DRLK_DAYS_MASK_TUE_OFFSET (2)
#define DRLK_DAYS_MASK_WED (8)
#define DRLK_DAYS_MASK_WED_OFFSET (3)
#define DRLK_DAYS_MASK_THU (16)
#define DRLK_DAYS_MASK_THU_OFFSET (4)
#define DRLK_DAYS_MASK_FRI (32)
#define DRLK_DAYS_MASK_FRI_OFFSET (5)
#define DRLK_DAYS_MASK_SAT (64)
#define DRLK_DAYS_MASK_SAT_OFFSET (6)
#define DRLK_DAYS_MASK_ENABLE (128)
#define DRLK_DAYS_MASK_ENABLE_OFFSET (7)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_VOLTAGE_OVERLOAD (1)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_VOLTAGE_OVERLOAD_OFFSET (0)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_CURRENT_OVERLOAD (2)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_CURRENT_OVERLOAD_OFFSET (1)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_ACTIVE_POWER_OVERLOAD (4)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_ACTIVE_POWER_OVERLOAD_OFFSET (2)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_REACTIVE_POWER_OVERLOAD (8)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_REACTIVE_POWER_OVERLOAD_OFFSET (3)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_AVERAGE_RMS_OVER_VOLTAGE (16)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_AVERAGE_RMS_OVER_VOLTAGE_OFFSET (4)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_AVERAGE_RMS_UNDER_VOLTAGE (32)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_AVERAGE_RMS_UNDER_VOLTAGE_OFFSET (5)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_RMS_EXTREME_OVER_VOLTAGE (64)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_RMS_EXTREME_OVER_VOLTAGE_OFFSET (6)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_RMS_EXTREME_UNDER_VOLTAGE (128)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_RMS_EXTREME_UNDER_VOLTAGE_OFFSET (7)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_RMS_VOLTAGE_SAG (256)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_RMS_VOLTAGE_SAG_OFFSET (8)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_RMS_VOLTAGE_SWELL (512)
#define ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK_RMS_VOLTAGE_SWELL_OFFSET (9)
#define ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK_VOLTAGE_OVERLOAD (1)
#define ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK_VOLTAGE_OVERLOAD_OFFSET (0)
#define ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK_CURRENT_OVERLOAD (2)
#define ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK_CURRENT_OVERLOAD_OFFSET (1)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_ACTIVE_MEASUREMENT_AC (1)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_ACTIVE_MEASUREMENT_AC_OFFSET (0)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_REACTIVE_MEASUREMENT_AC (2)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_REACTIVE_MEASUREMENT_AC_OFFSET (1)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_APPARENT_MEASUREMENT_AC (4)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_APPARENT_MEASUREMENT_AC_OFFSET (2)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_PHASE_A_MEASUREMENT (8)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_PHASE_A_MEASUREMENT_OFFSET (3)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_PHASE_B_MEASUREMENT (16)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_PHASE_B_MEASUREMENT_OFFSET (4)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_PHASE_C_MEASUREMENT (32)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_PHASE_C_MEASUREMENT_OFFSET (5)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_DC_MEASUREMENT (64)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_DC_MEASUREMENT_OFFSET (6)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_HARMONICS_MEASUREMENT (128)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_HARMONICS_MEASUREMENT_OFFSET (7)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_POWER_QUALITY_MEASUREMENT (256)
#define ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE_POWER_QUALITY_MEASUREMENT_OFFSET (8)
#define GROUPS_NAME_SUPPORT_SUPPORTED (128)
#define GROUPS_NAME_SUPPORT_SUPPORTED_OFFSET (7)
#define IAS_ZONE_STATUS_ALARM1 (1)
#define IAS_ZONE_STATUS_ALARM1_OFFSET (0)
#define IAS_ZONE_STATUS_ALARM2 (2)
#define IAS_ZONE_STATUS_ALARM2_OFFSET (1)
#define IAS_ZONE_STATUS_TAMPER (4)
#define IAS_ZONE_STATUS_TAMPER_OFFSET (2)
#define IAS_ZONE_STATUS_BATTERY_LOW (8)
#define IAS_ZONE_STATUS_BATTERY_LOW_OFFSET (3)
#define IAS_ZONE_STATUS_SUPERVISION_NOTIFY (16)
#define IAS_ZONE_STATUS_SUPERVISION_NOTIFY_OFFSET (4)
#define IAS_ZONE_STATUS_RESTORE_NOTIFY (32)
#define IAS_ZONE_STATUS_RESTORE_NOTIFY_OFFSET (5)
#define IAS_ZONE_STATUS_TROUBLE (64)
#define IAS_ZONE_STATUS_TROUBLE_OFFSET (6)
#define IAS_ZONE_STATUS_AC_MAINS_FAULT (128)
#define IAS_ZONE_STATUS_AC_MAINS_FAULT_OFFSET (7)
#define IAS_ZONE_STATUS_TEST (256)
#define IAS_ZONE_STATUS_TEST_OFFSET (8)
#define IAS_ZONE_STATUS_BATTERY_DEFECT (512)
#define IAS_ZONE_STATUS_BATTERY_DEFECT_OFFSET (9)
#define IMAGE_BLOCK_REQUEST_FIELD_CONTROL_REQUEST_NODE_IEEE_ADDRESS_PRESENT (1)
#define IMAGE_BLOCK_REQUEST_FIELD_CONTROL_REQUEST_NODE_IEEE_ADDRESS_PRESENT_OFFSET (0)
#define IMAGE_BLOCK_REQUEST_FIELD_CONTROL_MINIMUM_BLOCK_PERIOD_PRESENT (2)
#define IMAGE_BLOCK_REQUEST_FIELD_CONTROL_MINIMUM_BLOCK_PERIOD_PRESENT_OFFSET (1)
#define IMAGE_PAGE_REQUEST_FIELD_CONTROL_REQUEST_NODE_IEEE_ADDRESS_PRESENT (1)
#define IMAGE_PAGE_REQUEST_FIELD_CONTROL_REQUEST_NODE_IEEE_ADDRESS_PRESENT_OFFSET (0)
#define LEVEL_OPTIONS_EXECUTE_IF_OFF (1)
#define LEVEL_OPTIONS_EXECUTE_IF_OFF_OFFSET (0)
#define LEVEL_OPTIONS_COUPLE_COLOR_TEMP_TO_LEVEL (2)
#define LEVEL_OPTIONS_COUPLE_COLOR_TEMP_TO_LEVEL_OFFSET (1)
#define METERING_DEMAND_FORMATTING_SUPPRESS_LEADING_ZEROS (1)
#define METERING_DEMAND_FORMATTING_SUPPRESS_LEADING_ZEROS_OFFSET (0)
#define METERING_DEMAND_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT (224)
#define METERING_DEMAND_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT_OFFSET (5)
#define METERING_DEMAND_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT (30)
#define METERING_DEMAND_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT_OFFSET (1)
#define METERING_ENERGY_CARRIER_DEMAND_FORMATTING_SUPPRESS_LEADING_ZEROS (1)
#define METERING_ENERGY_CARRIER_DEMAND_FORMATTING_SUPPRESS_LEADING_ZEROS_OFFSET (0)
#define METERING_ENERGY_CARRIER_DEMAND_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT (224)
#define METERING_ENERGY_CARRIER_DEMAND_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT_OFFSET (5)
#define METERING_ENERGY_CARRIER_DEMAND_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT (30)
#define METERING_ENERGY_CARRIER_DEMAND_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT_OFFSET (1)
#define METERING_ENERGY_CARRIER_SUMMATION_FORMATTING_SUPPRESS_LEADING_ZEROS (1)
#define METERING_ENERGY_CARRIER_SUMMATION_FORMATTING_SUPPRESS_LEADING_ZEROS_OFFSET (0)
#define METERING_ENERGY_CARRIER_SUMMATION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT (224)
#define METERING_ENERGY_CARRIER_SUMMATION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT_OFFSET (5)
#define METERING_ENERGY_CARRIER_SUMMATION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT (30)
#define METERING_ENERGY_CARRIER_SUMMATION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT_OFFSET (1)
#define METERING_HISTORICAL_CONSUMPTION_FORMATTING_SUPPRESS_LEADING_ZEROS (1)
#define METERING_HISTORICAL_CONSUMPTION_FORMATTING_SUPPRESS_LEADING_ZEROS_OFFSET (0)
#define METERING_HISTORICAL_CONSUMPTION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT (224)
#define METERING_HISTORICAL_CONSUMPTION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT_OFFSET (5)
#define METERING_HISTORICAL_CONSUMPTION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT (30)
#define METERING_HISTORICAL_CONSUMPTION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT_OFFSET (1)
#define METERING_SUMMATION_FORMATTING_SUPPRESS_LEADING_ZEROS (1)
#define METERING_SUMMATION_FORMATTING_SUPPRESS_LEADING_ZEROS_OFFSET (0)
#define METERING_SUMMATION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT (224)
#define METERING_SUMMATION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT_OFFSET (5)
#define METERING_SUMMATION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT (30)
#define METERING_SUMMATION_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT_OFFSET (1)
#define METERING_TEMPERATURE_FORMATTING_SUPPRESS_LEADING_ZEROS (1)
#define METERING_TEMPERATURE_FORMATTING_SUPPRESS_LEADING_ZEROS_OFFSET (0)
#define METERING_TEMPERATURE_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT (224)
#define METERING_TEMPERATURE_FORMATTING_NUMBER_OF_DIGITS_TO_THE_RIGHT_OF_DECIMAL_POINT_OFFSET (5)
#define METERING_TEMPERATURE_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT (30)
#define METERING_TEMPERATURE_FORMATTING_NUMBER_OF_DIGITS_TO_THE_LEFT_OF_THE_DECIMAL_POINT_OFFSET (1)
#define OCCUPANCY_SENSING_OCCUPANCY_SENSED_OCCUPANCY (1)
#define OCCUPANCY_SENSING_OCCUPANCY_SENSED_OCCUPANCY_OFFSET (0)
#define OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP_PIR (1)
#define OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP_PIR_OFFSET (0)
#define OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP_ULTRASONIC (2)
#define OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP_ULTRASONIC_OFFSET (1)
#define OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP_PHYSICAL_CONTACT (4)
#define OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP_PHYSICAL_CONTACT_OFFSET (2)
#define ON_WITH_TIMED_OFF_ON_OFF_CONTROL_ACCEPT_ONLY_WHEN_ON (1)
#define ON_WITH_TIMED_OFF_ON_OFF_CONTROL_ACCEPT_ONLY_WHEN_ON_OFFSET (0)
#define POWER_CONFIGURATION_MAINS_ALARM_MASK_MAINS_VOLTAGE_TOO_LOW (1)
#define POWER_CONFIGURATION_MAINS_ALARM_MASK_MAINS_VOLTAGE_TOO_LOW_OFFSET (0)
#define POWER_CONFIGURATION_MAINS_ALARM_MASK_MAINS_VOLTAGE_TOO_HIGH (2)
#define POWER_CONFIGURATION_MAINS_ALARM_MASK_MAINS_VOLTAGE_TOO_HIGH_OFFSET (1)
#define POWER_CONFIGURATION_MAINS_ALARM_MASK_MAINS_POWER_SUPPLY_LOST (4)
#define POWER_CONFIGURATION_MAINS_ALARM_MASK_MAINS_POWER_SUPPLY_LOST_OFFSET (2)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SUPPLY_VOLTAGE_TOO_LOW (1)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SUPPLY_VOLTAGE_TOO_LOW_OFFSET (0)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SUPPLY_VOLTAGE_TOO_HIGH (2)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SUPPLY_VOLTAGE_TOO_HIGH_OFFSET (1)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_POWER_MISSING_PHASE (4)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_POWER_MISSING_PHASE_OFFSET (2)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SYSTEM_PRESSURE_TOO_LOW (8)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SYSTEM_PRESSURE_TOO_LOW_OFFSET (3)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SYSTEM_PRESSURE_TOO_HIGH (16)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SYSTEM_PRESSURE_TOO_HIGH_OFFSET (4)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_DRY_RUNNING (32)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_DRY_RUNNING_OFFSET (5)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_MOTOR_TEMPERATURE_TOO_HIGH (64)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_MOTOR_TEMPERATURE_TOO_HIGH_OFFSET (6)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_PUMP_MOTOR_HAS_FATAL_FAILURE (128)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_PUMP_MOTOR_HAS_FATAL_FAILURE_OFFSET (7)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_ELECTRONIC_TEMPERATURE_TOO_HIGH (256)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_ELECTRONIC_TEMPERATURE_TOO_HIGH_OFFSET (8)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_PUMP_BLOCKED (512)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_PUMP_BLOCKED_OFFSET (9)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SENSOR_FAILURE (1024)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_SENSOR_FAILURE_OFFSET (10)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_ELECTRONIC_NON_FATAL_FAILURE (2048)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_ELECTRONIC_NON_FATAL_FAILURE_OFFSET (11)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_ELECTRONIC_FATAL_FAILURE (4096)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_ELECTRONIC_FATAL_FAILURE_OFFSET (12)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_GENERAL_FAULT (8192)
#define PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK_GENERAL_FAULT_OFFSET (13)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_DEVICE_FAULT (1)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_DEVICE_FAULT_OFFSET (0)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_SUPPLY_FAULT (2)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_SUPPLY_FAULT_OFFSET (1)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_SPEED_LOW (4)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_SPEED_LOW_OFFSET (2)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_SPEED_HIGH (8)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_SPEED_HIGH_OFFSET (3)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_LOCAL_OVERRIDE (16)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_LOCAL_OVERRIDE_OFFSET (4)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_RUNNING (32)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_RUNNING_OFFSET (5)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_REMOTE_PRESSURE (64)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_REMOTE_PRESSURE_OFFSET (6)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_REMOTE_FLOW (128)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_REMOTE_FLOW_OFFSET (7)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_REMOTE_TEMPERATURE (256)
#define PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS_REMOTE_TEMPERATURE_OFFSET (8)
#define QUERY_NEXT_IMAGE_REQUEST_FIELD_CONTROL_HARDWARE_VERSION_PRESENT (1)
#define QUERY_NEXT_IMAGE_REQUEST_FIELD_CONTROL_HARDWARE_VERSION_PRESENT_OFFSET (0)
#define RESET_STARTUP_PARAMETERS_OPTIONS_RESET_CURRENT (1)
#define RESET_STARTUP_PARAMETERS_OPTIONS_RESET_CURRENT_OFFSET (0)
#define RESET_STARTUP_PARAMETERS_OPTIONS_RESET_ALL (2)
#define RESET_STARTUP_PARAMETERS_OPTIONS_RESET_ALL_OFFSET (1)
#define RESET_STARTUP_PARAMETERS_OPTIONS_ERASE_INDEX (4)
#define RESET_STARTUP_PARAMETERS_OPTIONS_ERASE_INDEX_OFFSET (2)
#define RESTART_DEVICE_OPTIONS_STARTUP_MODE (7)
#define RESTART_DEVICE_OPTIONS_STARTUP_MODE_OFFSET (0)
#define RESTART_DEVICE_OPTIONS_IMMEDIATE (8)
#define RESTART_DEVICE_OPTIONS_IMMEDIATE_OFFSET (3)
#define SCENES_NAME_SUPPORT_SCENE_NAMES_SUPPORTED (128)
#define SCENES_NAME_SUPPORT_SCENE_NAMES_SUPPORTED_OFFSET (7)
#define SHADE_CONFIGURATION_STATUS_SHADE_OPERATIONAL (1)
#define SHADE_CONFIGURATION_STATUS_SHADE_OPERATIONAL_OFFSET (0)
#define SHADE_CONFIGURATION_STATUS_SHADE_ADJUSTING (2)
#define SHADE_CONFIGURATION_STATUS_SHADE_ADJUSTING_OFFSET (1)
#define SHADE_CONFIGURATION_STATUS_SHADE_DIRECTION (4)
#define SHADE_CONFIGURATION_STATUS_SHADE_DIRECTION_OFFSET (2)
#define SHADE_CONFIGURATION_STATUS_FORWARD_DIRECTION_OF_MOTOR (8)
#define SHADE_CONFIGURATION_STATUS_FORWARD_DIRECTION_OF_MOTOR_OFFSET (3)
#define SQUAWK_SQUAWK_CONFIGURATION_SQUAWK_LEVEL (3)
#define SQUAWK_SQUAWK_CONFIGURATION_SQUAWK_LEVEL_OFFSET (0)
#define SQUAWK_SQUAWK_CONFIGURATION_SQUAWK_STROBE_ACTIVE (8)
#define SQUAWK_SQUAWK_CONFIGURATION_SQUAWK_STROBE_ACTIVE_OFFSET (3)
#define SQUAWK_SQUAWK_CONFIGURATION_SQUAWK_MODE (240)
#define SQUAWK_SQUAWK_CONFIGURATION_SQUAWK_MODE_OFFSET (4)
#define START_WARNING_SIREN_CONFIGURATION_SIREN_LEVEL (3)
#define START_WARNING_SIREN_CONFIGURATION_SIREN_LEVEL_OFFSET (0)
#define START_WARNING_SIREN_CONFIGURATION_STROBE (12)
#define START_WARNING_SIREN_CONFIGURATION_STROBE_OFFSET (2)
#define START_WARNING_SIREN_CONFIGURATION_WARNING_MODE (240)
#define START_WARNING_SIREN_CONFIGURATION_WARNING_MODE_OFFSET (4)
#define THERMOSTAT_AC_ERROR_CODE_COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE (1)
#define THERMOSTAT_AC_ERROR_CODE_COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE_OFFSET (0)
#define THERMOSTAT_AC_ERROR_CODE_ROOM_TEMPERATURE_SENSOR_FAILURE (2)
#define THERMOSTAT_AC_ERROR_CODE_ROOM_TEMPERATURE_SENSOR_FAILURE_OFFSET (1)
#define THERMOSTAT_AC_ERROR_CODE_OUTDOOR_TEMPERATURE_SENSOR_FAILURE (4)
#define THERMOSTAT_AC_ERROR_CODE_OUTDOOR_TEMPERATURE_SENSOR_FAILURE_OFFSET (2)
#define THERMOSTAT_AC_ERROR_CODE_INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE (8)
#define THERMOSTAT_AC_ERROR_CODE_INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE_OFFSET (3)
#define THERMOSTAT_AC_ERROR_CODE_FAN_FAILURE (16)
#define THERMOSTAT_AC_ERROR_CODE_FAN_FAILURE_OFFSET (4)
#define THERMOSTAT_ALARM_MASK_INITIALIZATION_FAILURE (1)
#define THERMOSTAT_ALARM_MASK_INITIALIZATION_FAILURE_OFFSET (0)
#define THERMOSTAT_ALARM_MASK_HARDWARE_FAILURE (2)
#define THERMOSTAT_ALARM_MASK_HARDWARE_FAILURE_OFFSET (1)
#define THERMOSTAT_ALARM_MASK_SELF_CALIBRATION_FAILURE (4)
#define THERMOSTAT_ALARM_MASK_SELF_CALIBRATION_FAILURE_OFFSET (2)
#define THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_COOLING_SYSTEM_STAGE (3)
#define THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_COOLING_SYSTEM_STAGE_OFFSET (0)
#define THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_STAGE (12)
#define THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_STAGE_OFFSET (2)
#define THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_TYPE (16)
#define THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_TYPE_OFFSET (4)
#define THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_FUEL_SOURCE (32)
#define THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_FUEL_SOURCE_OFFSET (5)
#define THERMOSTAT_OCCUPANCY_OCCUPIED (1)
#define THERMOSTAT_OCCUPANCY_OCCUPIED_OFFSET (0)
#define THERMOSTAT_REMOTE_SENSING_LOCAL_TEMPERATURE_REMOTE (1)
#define THERMOSTAT_REMOTE_SENSING_LOCAL_TEMPERATURE_REMOTE_OFFSET (0)
#define THERMOSTAT_REMOTE_SENSING_OUTDOOR_TEMPERATURE_REMOTE (2)
#define THERMOSTAT_REMOTE_SENSING_OUTDOOR_TEMPERATURE_REMOTE_OFFSET (1)
#define THERMOSTAT_REMOTE_SENSING_OCCUPANCY_REMOTE (4)
#define THERMOSTAT_REMOTE_SENSING_OCCUPANCY_REMOTE_OFFSET (2)
#define THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE_PROGRAMMING_MODE (1)
#define THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE_PROGRAMMING_MODE_OFFSET (0)
#define THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE_AUTO_OR_RECOVERY (2)
#define THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE_AUTO_OR_RECOVERY_OFFSET (1)
#define THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE_ECONOMY_OR_ENERGY_STAR (4)
#define THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE_ECONOMY_OR_ENERGY_STAR_OFFSET (2)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_HEAT_ON (1)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_HEAT_ON_OFFSET (0)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_COOL_ON (2)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_COOL_ON_OFFSET (1)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_FAN_ON (4)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_FAN_ON_OFFSET (2)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_HEAT_SECOND_STAGE_ON (8)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_HEAT_SECOND_STAGE_ON_OFFSET (3)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_COOL_SECOND_STAGE_ON (16)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_COOL_SECOND_STAGE_ON_OFFSET (4)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_FAN_SECOND_STAGE_ON (32)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_FAN_SECOND_STAGE_ON_OFFSET (5)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_FAN_THIRD_STAGE_ON (64)
#define THERMOSTAT_THERMOSTAT_RUNNING_STATE_FAN_THIRD_STAGE_ON_OFFSET (6)
#define TIME_TIME_STATUS_MASTER (1)
#define TIME_TIME_STATUS_MASTER_OFFSET (0)
#define TIME_TIME_STATUS_SYNCHRONIZED (2)
#define TIME_TIME_STATUS_SYNCHRONIZED_OFFSET (1)
#define TIME_TIME_STATUS_MASTER_ZONE_DST (4)
#define TIME_TIME_STATUS_MASTER_ZONE_DST_OFFSET (2)
#define TIME_TIME_STATUS_SUPERSEDING (8)
#define TIME_TIME_STATUS_SUPERSEDING_OFFSET (3)
#define TSTAT_SCHEDULE_DOW_SUNDAY (1)
#define TSTAT_SCHEDULE_DOW_SUNDAY_OFFSET (0)
#define TSTAT_SCHEDULE_DOW_MONDAY (2)
#define TSTAT_SCHEDULE_DOW_MONDAY_OFFSET (1)
#define TSTAT_SCHEDULE_DOW_TUESDAY (4)
#define TSTAT_SCHEDULE_DOW_TUESDAY_OFFSET (2)
#define TSTAT_SCHEDULE_DOW_WEDNESDAY (8)
#define TSTAT_SCHEDULE_DOW_WEDNESDAY_OFFSET (3)
#define TSTAT_SCHEDULE_DOW_THURSDAY (16)
#define TSTAT_SCHEDULE_DOW_THURSDAY_OFFSET (4)
#define TSTAT_SCHEDULE_DOW_FRIDAY (32)
#define TSTAT_SCHEDULE_DOW_FRIDAY_OFFSET (5)
#define TSTAT_SCHEDULE_DOW_SATURDAY (64)
#define TSTAT_SCHEDULE_DOW_SATURDAY_OFFSET (6)
#define TSTAT_SCHEDULE_DOW_AWAY_OR_VACATION (128)
#define TSTAT_SCHEDULE_DOW_AWAY_OR_VACATION_OFFSET (7)
#define TSTAT_SCHEDULE_MODE_HEAT (1)
#define TSTAT_SCHEDULE_MODE_HEAT_OFFSET (0)
#define TSTAT_SCHEDULE_MODE_COOL (2)
#define TSTAT_SCHEDULE_MODE_COOL_OFFSET (1)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE_HUMIDIFY (1)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE_HUMIDIFY_OFFSET (0)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE_DEHUMIDIFY (2)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE_DEHUMIDIFY_OFFSET (1)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE_AUTO (4)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE_AUTO_OFFSET (2)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS_HUMIDIFIER (1)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS_HUMIDIFIER_OFFSET (0)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS_DEHUMIDIFIER (2)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS_DEHUMIDIFIER_OFFSET (1)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS_AUTO (4)
#define UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS_AUTO_OFFSET (2)
#define WINDOW_COVERING_CONFIG_OR_STATUS_OPERATIONAL (1)
#define WINDOW_COVERING_CONFIG_OR_STATUS_OPERATIONAL_OFFSET (0)
#define WINDOW_COVERING_CONFIG_OR_STATUS_ONLINE (2)
#define WINDOW_COVERING_CONFIG_OR_STATUS_ONLINE_OFFSET (1)
#define WINDOW_COVERING_CONFIG_OR_STATUS_OPEN_AND_UP_COMMANDS_REVERSED (4)
#define WINDOW_COVERING_CONFIG_OR_STATUS_OPEN_AND_UP_COMMANDS_REVERSED_OFFSET (2)
#define WINDOW_COVERING_CONFIG_OR_STATUS_LIFT_CLOSED_LOOP (8)
#define WINDOW_COVERING_CONFIG_OR_STATUS_LIFT_CLOSED_LOOP_OFFSET (3)
#define WINDOW_COVERING_CONFIG_OR_STATUS_TILT_CLOSED_LOOP (16)
#define WINDOW_COVERING_CONFIG_OR_STATUS_TILT_CLOSED_LOOP_OFFSET (4)
#define WINDOW_COVERING_CONFIG_OR_STATUS_LIFT_ENCODER_CONTROLLED (32)
#define WINDOW_COVERING_CONFIG_OR_STATUS_LIFT_ENCODER_CONTROLLED_OFFSET (5)
#define WINDOW_COVERING_CONFIG_OR_STATUS_TILT_ENCODER_CONTROLLED (64)
#define WINDOW_COVERING_CONFIG_OR_STATUS_TILT_ENCODER_CONTROLLED_OFFSET (6)
#define WINDOW_COVERING_MODE_MOTOR_DIRECTION_REVERSED (1)
#define WINDOW_COVERING_MODE_MOTOR_DIRECTION_REVERSED_OFFSET (0)
#define WINDOW_COVERING_MODE_CALIBRATION_MODE (2)
#define WINDOW_COVERING_MODE_CALIBRATION_MODE_OFFSET (1)
#define WINDOW_COVERING_MODE_MAINTENANCE_MODE (4)
#define WINDOW_COVERING_MODE_MAINTENANCE_MODE_OFFSET (2)
#define WINDOW_COVERING_MODE_LED_FEEDBACK (8)
#define WINDOW_COVERING_MODE_LED_FEEDBACK_OFFSET (3)

// ZCL Structs

// Struct for NM_StateParameters
typedef struct _NM_StateParameters {
  const char* ProvisioningMode;
  bool UserAccept;
  const char* SecurityCode;
  const char* Unid;
  bool AllowMultipleInclusions;
} NM_StateParameters;

// Struct for NetworkManagementState
typedef struct _NetworkManagementState {
  NM_State State;
  const char* SupportedStateList;
  NM_StateParameters StateParameters;
  const char* RequestedStateParameters;
} NetworkManagementState;

// Struct for BindingObject
typedef struct _BindingObject {
  const char* ClusterName;
  const char* DestinationUnid;
  uint8_t DestinationEp;
} BindingObject;

// Struct for ConfigurationParameter
typedef struct _ConfigurationParameter {
  uint16_t ParameterId;
  int64_t Value;
  const char* Name;
  const char* Info;
  int64_t MinimumValue;
  int64_t MaximumValue;
  int64_t DefaultValue;
  uint8_t DisplayFormat;
  bool ReadOnly;
  bool Advanced;
  bool AlteringCapabilities;
} ConfigurationParameter;

// Struct for CoordinateAndOrientation
typedef struct _CoordinateAndOrientation {
  double CoordinateX;
  double CoordinateY;
  double CoordinateZ;
  double OrientationX;
  double OrientationY;
  double OrientationZ;
} CoordinateAndOrientation;

// Struct for CredentialStruct
typedef struct _CredentialStruct {
  CredentialTypeEnum CredentialType;
  uint16_t CredentialIndex;
} CredentialStruct;

// Struct for DeviceTypeStruct
typedef struct _DeviceTypeStruct {
  DevTypeId DeviceType;
  uint16_t Revision;
} DeviceTypeStruct;

// Struct for DiskIOCounters
typedef struct _DiskIOCounters {
  const char* UUID;
  uint64_t ReadCount;
  uint64_t WriteCount;
  uint64_t ReadBytes;
  uint64_t WriteBytes;
} DiskIOCounters;

// Struct for DiskUsageData
typedef struct _DiskUsageData {
  const char* UUID;
  double UsagePercent;
  double FreeSpaceMB;
} DiskUsageData;

// Struct for EstimatedPosition
typedef struct _EstimatedPosition {
  const char* ApplicationId;
  double X;
  double Y;
  double Z;
  double DeviationX;
  double DeviationY;
  double DeviationZ;
  int32_t Sequence;
} EstimatedPosition;

// Struct for IasaceZoneStatusRecord
typedef struct _IasaceZoneStatusRecord {
  uint8_t ZoneID;
  uint16_t ZoneStatus;
} IasaceZoneStatusRecord;

// Struct for MinMaxPair
typedef struct _MinMaxPair {
  double Min;
  double Max;
} MinMaxPair;

// Struct for NetworkInterfaceData
typedef struct _NetworkInterfaceData {
  const char* InterfaceName;
  uint64_t BytesSent;
  uint64_t BytesReceived;
  uint64_t PacketsSent;
  uint64_t PacketsReceived;
  uint64_t ErrorsIn;
  uint64_t ErrorsOut;
  uint64_t DropIn;
  uint64_t DropOut;
} NetworkInterfaceData;

// Struct for SExtensionFieldSetList
typedef struct _SExtensionFieldSetList {
  uint16_t ClusterId;
  const char* ExtensionFieldSet;
} SExtensionFieldSetList;

// Struct for SSceneTable
typedef struct _SSceneTable {
  uint16_t SceneID;
  uint16_t GroupID;
  const char* SceneName;
  uint16_t TransitionTime;
  uint8_t TransitionTime100ms;
  const char* SceneTableExtensions;
} SSceneTable;

// Struct for SphericalCoordinates
typedef struct _SphericalCoordinates {
  double Azimuth;
  double Elevation;
  double Distance;
} SphericalCoordinates;

// Struct for TransitionType
typedef struct _TransitionType {
  uint16_t TransitionTime;
  int16_t HeatSetPoint;
  int16_t CoolSetPoint;
} TransitionType;

// Struct for WirelessNetworkInterfaceData
typedef struct _WirelessNetworkInterfaceData {
  const char* InterfaceName;
  double SignalStrengthdBm;
} WirelessNetworkInterfaceData;

#endif
/** @} end zap-types */
