#!/usr/bin/env python3

import subprocess
import os
import argparse
import shutil
import tempfile

default_project_root = os.path.realpath(
    os.path.join(__file__, "..", "..", ".."))

default_sphinx_cache = os.path.join(tempfile.gettempdir(), ".sphinx-cache-doctree")

parser = argparse.ArgumentParser(
    description='Script that build the unify documentation')
parser.add_argument('--doc-dir', default=os.path.join(default_project_root, "doc"),
                    help="directory to where the sphinx conf.py file is located")
parser.add_argument('--build-dir', default=os.path.join(os.getcwd()),
                    help="Unify build directory. default=$cwd")
parser.add_argument('--builder', choices=['html', 'latex'],
                    default='html', help="which builder to use. default=html")
parser.add_argument('--root-doc', default="doc/introduction",
                    help="which root doc to use. Has to be relative to directory specified in --source. default=doc/contents")
parser.add_argument('--doctree', default=default_sphinx_cache,
                    help=f"where to place generated doctree files in the build folder. default={default_sphinx_cache}")
parser.add_argument('--source', default=default_project_root,
                    help=f"directory Sphinx should use as the root of documentation. default={default_project_root}")
parser.add_argument('--output-dir', default=os.path.join(os.getcwd(), "unify_host_sdk_documentation"),
                    help=f"directory where documentation will be placed when done building.")
args = parser.parse_args()

doc_dir = os.path.realpath(args.doc_dir)
build_dir = os.path.realpath(args.build_dir)
# Does not work when using full path, has to be relative to 'documentation_root = args.source'
root_doc = args.root_doc
doctree_dir = os.path.realpath(args.doctree)
documentation_root = os.path.realpath(args.source)
output_dir = os.path.realpath(args.output_dir)

sphinx_opt_version = subprocess.check_output(["git", "describe"], cwd=default_project_root, text=True).strip()

print(f"Git Version string: {sphinx_opt_version}")

def setup_doxygen_project(project_name, outdir):
    doxygen = os.path.join(build_dir, project_name)
    if os.path.exists(doxygen):
        # For now we hyperlink to the html generated by doxygen
        html = os.path.join(doxygen, "html")
        if os.path.exists(html):
            dest = os.path.join(outdir, project_name)
            if os.path.exists(dest):
                shutil.rmtree(dest)
            print(f"Copying content of {html} to {dest}")
            shutil.copytree(html, dest)
    else:
        print("could not find " + doxygen)

# run sphinx builder
setup_doxygen_project("doxygen_uic",        output_dir)
setup_doxygen_project("doxygen_zigpc",      output_dir)
setup_doxygen_project("doxygen_zpc",        output_dir)
setup_doxygen_project("doxygen_aox",        output_dir)
setup_doxygen_project("reference_ucl_mqtt", output_dir)

sphinx_build_cmd=f"sphinx-build -b {args.builder} -c {doc_dir} -D root_doc={root_doc} -D version={sphinx_opt_version} -D release={sphinx_opt_version} -d {doctree_dir} {documentation_root} {output_dir}"

print(f"Running '{sphinx_build_cmd}'")
subprocess.run(sphinx_build_cmd, shell=True)
